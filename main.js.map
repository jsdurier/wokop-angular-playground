{"version":3,"file":"main.js","mappings":"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;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAA1B;;;;;;;;;;;;;;;ACAP,MAAM,6BAA6B,GAAG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;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","sources":["./src/add-new-import.ts","./src/angular-core-file.ts","./src/angular-platform-browser-file.ts","./src/app.component.ts","./src/app.component.html","./src/base-editor.ts","./src/clickable-element.component.ts","./src/clickable-element.component.html","./src/clickable-icon.component.ts","./src/clickable-icon.component.html","./src/compile-component.component.ts","./src/compile-component.component.html","./src/context-menu-2.directive.ts","./src/context-menu-ref.service.ts","./src/convert-to-kebab-case.ts","./src/create-function-in-workspace.service.ts","./src/create-ng-component-from-string.ts","./src/create-ng-component-in-file.service.ts","./src/create-ng-component-in-workspace.service.ts","./src/deep-clone.ts","./src/environments/environment.ts","./src/file-context-menu.component.ts","./src/file-context-menu.component.html","./src/files-in-editor.service.ts","./src/files-tabs.component.ts","./src/files-tabs.component.html","./src/get-available-name.ts","./src/get-deps-of-ts-file.ts","./src/get-imports.ts","./src/get-typescript-file-name.ts","./src/i-ng-project-files-service.ts","./src/i-tree-data-provider-service.ts","./src/import-in-file.ts","./src/init-monaco-model.service.ts","./src/is-angular-component.ts","./src/main.ts","./src/monaco-editor-2.ts","./src/monaco-editor-2.html","./src/monaco-editor-config-injection-token.ts","./src/overlay-container.component.ts","./src/overlay-container.component.html","./src/project-files.service.ts","./src/project-tree-data-provider.service.ts","./src/project-tree-item.component-2.ts","./src/project-tree-item.component-2.html","./src/project-tree-item.component.ts","./src/project-tree-item.component.html","./src/project-tree.component.ts","./src/project-tree.component.html","./src/show-input-box.service.ts","./src/show-overlay.service.ts","./src/tab-title.component.ts","./src/tab-title.component.html","./src/tab.component.ts","./src/tabs.component.ts","./src/tabs.component.html","./src/to-camel-case.ts","./src/to-pascal-case.ts","./src/transpile-ts.ts","./src/tree.component.ts","./src/tree.component.html","./src/ts-extension.ts","./src/vscode-input-box-value.service.ts","./src/vscode-input-box.component.ts","./src/vscode-input-box.component.html","./src/vscode-workspace-view-container-ref.service.ts","./src/vscode-workspace.component.ts","./src/vscode-workspace.component.html","./src/workspace-commands.service.ts","./src/workspace-with-renderer-debug.component.ts","./src/workspace-with-renderer-debug.component.html","./node_modules/.pnpm/typescript@4.7.4/node_modules/typescript/lib/ sync","ignored|/Users/j-sdurier/Documents/development/wokop-angular-playground/node_modules/.pnpm/typescript@4.7.4/node_modules/typescript/lib|buffer","ignored|/Users/j-sdurier/Documents/development/wokop-angular-playground/node_modules/.pnpm/typescript@4.7.4/node_modules/typescript/lib|crypto","ignored|/Users/j-sdurier/Documents/development/wokop-angular-playground/node_modules/.pnpm/typescript@4.7.4/node_modules/typescript/lib|fs","ignored|/Users/j-sdurier/Documents/development/wokop-angular-playground/node_modules/.pnpm/typescript@4.7.4/node_modules/typescript/lib|inspector","ignored|/Users/j-sdurier/Documents/development/wokop-angular-playground/node_modules/.pnpm/typescript@4.7.4/node_modules/typescript/lib|os","ignored|/Users/j-sdurier/Documents/development/wokop-angular-playground/node_modules/.pnpm/typescript@4.7.4/node_modules/typescript/lib|path","ignored|/Users/j-sdurier/Documents/development/wokop-angular-playground/node_modules/.pnpm/typescript@4.7.4/node_modules/typescript/lib|source-map-support"],"sourcesContent":["interface IImportInFile {\n\tname: string;\n\trow: number;\n}\n\ninterface IImport {\n\talias: string;\n\tname: string;\n}\n\nconst LOCAL_IMPORT_PREFIX = './';\n\nexport default function addNewImport(\n\tnewImport: IImport,\n\timporterFileContent: string\n): string {\n\tconst lines = importerFileContent.split('\\n');\n\tconst allImports = getImports(lines);\n\tlet row = 0;\n\tlet spaceBefore = false;\n\tfor (const e of allImports) {\n\t\tif (!e.name.startsWith(LOCAL_IMPORT_PREFIX)) {\n\t\t\trow = e.row + 1;\n\t\t\tspaceBefore = true;\n\t\t\tcontinue;\n\t\t}\n\t\tconst existingImportName = e.name.slice(LOCAL_IMPORT_PREFIX.length);\n\t\tspaceBefore = false;\n\t\tif (newImport.name < existingImportName) {\n\t\t\trow = e.row;\n\t\t\tbreak;\n\t\t}\n\t\trow = e.row + 1;\n\t}\n\tconst newLine = `import ${newImport.alias} from './${newImport.name}';`;\n\tlines.splice(\n\t\trow,\n\t\t0,\n\t\tnewLine\n\t);\n\tif (spaceBefore) {\n\t\tlines.splice(\n\t\t\trow,\n\t\t\t0,\n\t\t\t''\n\t\t);\n\t}\n\treturn lines.join('\\n');\n}\n\nconst REGEXP = /from '([^']+)';?\\s*$/;\n\nfunction getImports(lines: string[]): IImportInFile[] {\n\treturn lines.map(processLine).filter(e => e !== undefined) as IImportInFile[];\n}\n\nfunction processLine(\n\tlineText: string,\n\trow: number\n): IImportInFile | undefined {\n\tconst match = lineText.match(REGEXP);\n\tif (match === null) {\n\t\treturn undefined;\n\t}\n\treturn {\n\t\tname: match[1],\n\t\trow\n\t};\n}\n","export const ANGULAR_CORE_FILE = `import { Observable } from 'rxjs';\nimport { Subject } from 'rxjs';\nimport { Subscribable } from 'rxjs';\nimport { Subscription } from 'rxjs';\n\n/**\n * @description\n *\n * Represents an abstract class \\`T\\`, if applied to a concrete class it would stop being\n * instantiable.\n *\n * @publicApi\n */\nexport declare interface AbstractType<T> extends Function {\n\tprototype: T;\n}\n\n/**\n * @description\n * A lifecycle hook that is called after the default change detector has\n * completed checking all content of a directive.\n *\n * @see \\`AfterViewChecked\\`\n * @see [Lifecycle hooks guide](guide/lifecycle-hooks)\n *\n * @usageNotes\n * The following snippet shows how a component can implement this interface to\n * define its own after-check functionality.\n *\n * {@example core/ts/metadata/lifecycle_hooks_spec.ts region='AfterContentChecked'}\n *\n * @publicApi\n */\nexport declare interface AfterContentChecked {\n\t/**\n\t * A callback method that is invoked immediately after the\n\t * default change detector has completed checking all of the directive's\n\t * content.\n\t */\n\tngAfterContentChecked(): void;\n}\n\n/**\n * @description\n * A lifecycle hook that is called after Angular has fully initialized\n * all content of a directive.\n * Define an \\`ngAfterContentInit()\\` method to handle any additional initialization tasks.\n *\n * @see \\`OnInit\\`\n * @see \\`AfterViewInit\\`\n * @see [Lifecycle hooks guide](guide/lifecycle-hooks)\n *\n * @usageNotes\n * The following snippet shows how a component can implement this interface to\n * define its own content initialization method.\n *\n * {@example core/ts/metadata/lifecycle_hooks_spec.ts region='AfterContentInit'}\n *\n * @publicApi\n */\nexport declare interface AfterContentInit {\n\t/**\n\t * A callback method that is invoked immediately after\n\t * Angular has completed initialization of all of the directive's\n\t * content.\n\t * It is invoked only once when the directive is instantiated.\n\t */\n\tngAfterContentInit(): void;\n}\n\n/**\n * @description\n * A lifecycle hook that is called after the default change detector has\n * completed checking a component's view for changes.\n *\n * @see \\`AfterContentChecked\\`\n * @see [Lifecycle hooks guide](guide/lifecycle-hooks)\n *\n * @usageNotes\n * The following snippet shows how a component can implement this interface to\n * define its own after-check functionality.\n *\n * {@example core/ts/metadata/lifecycle_hooks_spec.ts region='AfterViewChecked'}\n *\n * @publicApi\n */\nexport declare interface AfterViewChecked {\n\t/**\n\t * A callback method that is invoked immediately after the\n\t * default change detector has completed one change-check cycle\n\t * for a component's view.\n\t */\n\tngAfterViewChecked(): void;\n}\n\n/**\n * @description\n * A lifecycle hook that is called after Angular has fully initialized\n * a component's view.\n * Define an \\`ngAfterViewInit()\\` method to handle any additional initialization tasks.\n *\n * @see \\`OnInit\\`\n * @see \\`AfterContentInit\\`\n * @see [Lifecycle hooks guide](guide/lifecycle-hooks)\n *\n * @usageNotes\n * The following snippet shows how a component can implement this interface to\n * define its own view initialization method.\n *\n * {@example core/ts/metadata/lifecycle_hooks_spec.ts region='AfterViewInit'}\n *\n * @publicApi\n */\nexport declare interface AfterViewInit {\n\t/**\n\t * A callback method that is invoked immediately after\n\t * Angular has completed initialization of a component's view.\n\t * It is invoked only once when the view is instantiated.\n\t *\n\t */\n\tngAfterViewInit(): void;\n}\n\n/**\n * A DI token that you can use to create a virtual [provider](guide/glossary#provider)\n * that will populate the \\`entryComponents\\` field of components and NgModules\n * based on its \\`useValue\\` property value.\n * All components that are referenced in the \\`useValue\\` value (either directly\n * or in a nested array or map) are added to the \\`entryComponents\\` property.\n *\n * @usageNotes\n *\n * The following example shows how the router can populate the \\`entryComponents\\`\n * field of an NgModule based on a router configuration that refers\n * to components.\n *\n * \\`\\`\\`typescript\n * // helper function inside the router\n * function provideRoutes(routes) {\n *   return [\n *     {provide: ROUTES, useValue: routes},\n *     {provide: ANALYZE_FOR_ENTRY_COMPONENTS, useValue: routes, multi: true}\n *   ];\n * }\n *\n * // user code\n * let routes = [\n *   {path: '/root', component: RootComp},\n *   {path: '/teams', component: TeamsComp}\n * ];\n *\n * @NgModule({\n *   providers: [provideRoutes(routes)]\n * })\n * class ModuleWithRoutes {}\n * \\`\\`\\`\n *\n * @publicApi\n * @deprecated Since 9.0.0. With Ivy, this property is no longer necessary.\n */\nexport declare const ANALYZE_FOR_ENTRY_COMPONENTS: InjectionToken<any>;\n\n/**\n * A [DI token](guide/glossary#di-token \"DI token definition\") that indicates which animations\n * module has been loaded.\n * @publicApi\n */\nexport declare const ANIMATION_MODULE_TYPE: InjectionToken<\"NoopAnimations\" | \"BrowserAnimations\">;\n\n/**\n * A [DI token](guide/glossary#di-token \"DI token definition\") that provides a set of callbacks to\n * be called for every component that is bootstrapped.\n *\n * Each callback must take a \\`ComponentRef\\` instance and return nothing.\n *\n * \\`(componentRef: ComponentRef) => void\\`\n *\n * @publicApi\n */\nexport declare const APP_BOOTSTRAP_LISTENER: InjectionToken<((compRef: ComponentRef<any>) => void)[]>;\n\n/**\n * A [DI token](guide/glossary#di-token \"DI token definition\") representing a unique string ID, used\n * primarily for prefixing application attributes and CSS styles when\n * {@link ViewEncapsulation#Emulated ViewEncapsulation.Emulated} is being used.\n *\n * BY default, the value is randomly generated and assigned to the application by Angular.\n * To provide a custom ID value, use a DI provider <!-- TODO: provider --> to configure\n * the root {@link Injector} that uses this token.\n *\n * @publicApi\n */\nexport declare const APP_ID: InjectionToken<string>;\n\n/**\n * A [DI token](guide/glossary#di-token \"DI token definition\") that you can use to provide\n * one or more initialization functions.\n *\n * The provided functions are injected at application startup and executed during\n * app initialization. If any of these functions returns a Promise or an Observable, initialization\n * does not complete until the Promise is resolved or the Observable is completed.\n *\n * You can, for example, create a factory function that loads language data\n * or an external configuration, and provide that function to the \\`APP_INITIALIZER\\` token.\n * The function is executed during the application bootstrap process,\n * and the needed data is available on startup.\n *\n * @see \\`ApplicationInitStatus\\`\n *\n * @usageNotes\n *\n * The following example illustrates how to configure a multi-provider using \\`APP_INITIALIZER\\` token\n * and a function returning a promise.\n *\n * \\`\\`\\`\n *  function initializeApp(): Promise<any> {\n *    return new Promise((resolve, reject) => {\n *      // Do some asynchronous stuff\n *      resolve();\n *    });\n *  }\n *\n *  @NgModule({\n *   imports: [BrowserModule],\n *   declarations: [AppComponent],\n *   bootstrap: [AppComponent],\n *   providers: [{\n *     provide: APP_INITIALIZER,\n *     useFactory: () => initializeApp,\n *     multi: true\n *    }]\n *   })\n *  export class AppModule {}\n * \\`\\`\\`\n *\n * It's also possible to configure a multi-provider using \\`APP_INITIALIZER\\` token and a function\n * returning an observable, see an example below. Note: the \\`HttpClient\\` in this example is used for\n * demo purposes to illustrate how the factory function can work with other providers available\n * through DI.\n *\n * \\`\\`\\`\n *  function initializeAppFactory(httpClient: HttpClient): () => Observable<any> {\n *   return () => httpClient.get(\"https://someUrl.com/api/user\")\n *     .pipe(\n *        tap(user => { ... })\n *     );\n *  }\n *\n *  @NgModule({\n *    imports: [BrowserModule, HttpClientModule],\n *    declarations: [AppComponent],\n *    bootstrap: [AppComponent],\n *    providers: [{\n *      provide: APP_INITIALIZER,\n *      useFactory: initializeAppFactory,\n *      deps: [HttpClient],\n *      multi: true\n *    }]\n *  })\n *  export class AppModule {}\n * \\`\\`\\`\n *\n * @publicApi\n */\nexport declare const APP_INITIALIZER: InjectionToken<readonly (() => Observable<unknown> | Promise<unknown> | void)[]>;\n\ndeclare function _appIdRandomProviderFactory(): string;\n\n/**\n * A class that reflects the state of running {@link APP_INITIALIZER} functions.\n *\n * @publicApi\n */\nexport declare class ApplicationInitStatus {\n\tprivate readonly appInits;\n\tprivate resolve;\n\tprivate reject;\n\tprivate initialized;\n\treadonly donePromise: Promise<any>;\n\treadonly done = false;\n\tconstructor(appInits: ReadonlyArray<() => Observable<unknown> | Promise<unknown> | void>);\n\tstatic ɵfac: i0.ɵɵFactoryDeclaration<ApplicationInitStatus, [{ optional: true; }]>;\n\tstatic ɵprov: i0.ɵɵInjectableDeclaration<ApplicationInitStatus>;\n}\n\n/**\n * Re-exported by \\`BrowserModule\\`, which is included automatically in the root\n * \\`AppModule\\` when you create a new app with the CLI \\`new\\` command. Eagerly injects\n * \\`ApplicationRef\\` to instantiate it.\n *\n * @publicApi\n */\nexport declare class ApplicationModule {\n\tconstructor(appRef: ApplicationRef);\n\tstatic ɵfac: i0.ɵɵFactoryDeclaration<ApplicationModule, never>;\n\tstatic ɵmod: i0.ɵɵNgModuleDeclaration<ApplicationModule, never, never, never>;\n\tstatic ɵinj: i0.ɵɵInjectorDeclaration<ApplicationModule>;\n}\n\n/**\n * A reference to an Angular application running on a page.\n *\n * @usageNotes\n *\n * {@a is-stable-examples}\n * ### isStable examples and caveats\n *\n * Note two important points about \\`isStable\\`, demonstrated in the examples below:\n * - the application will never be stable if you start any kind\n * of recurrent asynchronous task when the application starts\n * (for example for a polling process, started with a \\`setInterval\\`, a \\`setTimeout\\`\n * or using RxJS operators like \\`interval\\`);\n * - the \\`isStable\\` Observable runs outside of the Angular zone.\n *\n * Let's imagine that you start a recurrent task\n * (here incrementing a counter, using RxJS \\`interval\\`),\n * and at the same time subscribe to \\`isStable\\`.\n *\n * \\`\\`\\`\n * constructor(appRef: ApplicationRef) {\n *   appRef.isStable.pipe(\n *      filter(stable => stable)\n *   ).subscribe(() => console.log('App is stable now');\n *   interval(1000).subscribe(counter => console.log(counter));\n * }\n * \\`\\`\\`\n * In this example, \\`isStable\\` will never emit \\`true\\`,\n * and the trace \"App is stable now\" will never get logged.\n *\n * If you want to execute something when the app is stable,\n * you have to wait for the application to be stable\n * before starting your polling process.\n *\n * \\`\\`\\`\n * constructor(appRef: ApplicationRef) {\n *   appRef.isStable.pipe(\n *     first(stable => stable),\n *     tap(stable => console.log('App is stable now')),\n *     switchMap(() => interval(1000))\n *   ).subscribe(counter => console.log(counter));\n * }\n * \\`\\`\\`\n * In this example, the trace \"App is stable now\" will be logged\n * and then the counter starts incrementing every second.\n *\n * Note also that this Observable runs outside of the Angular zone,\n * which means that the code in the subscription\n * to this Observable will not trigger the change detection.\n *\n * Let's imagine that instead of logging the counter value,\n * you update a field of your component\n * and display it in its template.\n *\n * \\`\\`\\`\n * constructor(appRef: ApplicationRef) {\n *   appRef.isStable.pipe(\n *     first(stable => stable),\n *     switchMap(() => interval(1000))\n *   ).subscribe(counter => this.value = counter);\n * }\n * \\`\\`\\`\n * As the \\`isStable\\` Observable runs outside the zone,\n * the \\`value\\` field will be updated properly,\n * but the template will not be refreshed!\n *\n * You'll have to manually trigger the change detection to update the template.\n *\n * \\`\\`\\`\n * constructor(appRef: ApplicationRef, cd: ChangeDetectorRef) {\n *   appRef.isStable.pipe(\n *     first(stable => stable),\n *     switchMap(() => interval(1000))\n *   ).subscribe(counter => {\n *     this.value = counter;\n *     cd.detectChanges();\n *   });\n * }\n * \\`\\`\\`\n *\n * Or make the subscription callback run inside the zone.\n *\n * \\`\\`\\`\n * constructor(appRef: ApplicationRef, zone: NgZone) {\n *   appRef.isStable.pipe(\n *     first(stable => stable),\n *     switchMap(() => interval(1000))\n *   ).subscribe(counter => zone.run(() => this.value = counter));\n * }\n * \\`\\`\\`\n *\n * @publicApi\n */\nexport declare class ApplicationRef {\n\tprivate _zone;\n\tprivate _injector;\n\tprivate _exceptionHandler;\n\tprivate _views;\n\tprivate _runningTick;\n\tprivate _stable;\n\tprivate _onMicrotaskEmptySubscription;\n\tprivate _destroyed;\n\tprivate _destroyListeners;\n\t/**\n\t * Indicates whether this instance was destroyed.\n\t */\n\tget destroyed(): boolean;\n\t/**\n\t * Get a list of component types registered to this application.\n\t * This list is populated even before the component is created.\n\t */\n\treadonly componentTypes: Type<any>[];\n\t/**\n\t * Get a list of components registered to this application.\n\t */\n\treadonly components: ComponentRef<any>[];\n\t/**\n\t * Returns an Observable that indicates when the application is stable or unstable.\n\t *\n\t * @see  [Usage notes](#is-stable-examples) for examples and caveats when using this API.\n\t */\n\treadonly isStable: Observable<boolean>;\n\t/**\n\t * The \\`EnvironmentInjector\\` used to create this application.\n\t */\n\tget injector(): EnvironmentInjector;\n\t/**\n\t * Bootstrap a component onto the element identified by its selector or, optionally, to a\n\t * specified element.\n\t *\n\t * @usageNotes\n\t * ### Bootstrap process\n\t *\n\t * When bootstrapping a component, Angular mounts it onto a target DOM element\n\t * and kicks off automatic change detection. The target DOM element can be\n\t * provided using the \\`rootSelectorOrNode\\` argument.\n\t *\n\t * If the target DOM element is not provided, Angular tries to find one on a page\n\t * using the \\`selector\\` of the component that is being bootstrapped\n\t * (first matched element is used).\n\t *\n\t * ### Example\n\t *\n\t * Generally, we define the component to bootstrap in the \\`bootstrap\\` array of \\`NgModule\\`,\n\t * but it requires us to know the component while writing the application code.\n\t *\n\t * Imagine a situation where we have to wait for an API call to decide about the component to\n\t * bootstrap. We can use the \\`ngDoBootstrap\\` hook of the \\`NgModule\\` and call this method to\n\t * dynamically bootstrap a component.\n\t *\n\t * {@example core/ts/platform/platform.ts region='componentSelector'}\n\t *\n\t * Optionally, a component can be mounted onto a DOM element that does not match the\n\t * selector of the bootstrapped component.\n\t *\n\t * In the following example, we are providing a CSS selector to match the target element.\n\t *\n\t * {@example core/ts/platform/platform.ts region='cssSelector'}\n\t *\n\t * While in this example, we are providing reference to a DOM node.\n\t *\n\t * {@example core/ts/platform/platform.ts region='domNode'}\n\t */\n\tbootstrap<C>(component: Type<C>, rootSelectorOrNode?: string | any): ComponentRef<C>;\n\t/**\n\t * Bootstrap a component onto the element identified by its selector or, optionally, to a\n\t * specified element.\n\t *\n\t * @usageNotes\n\t * ### Bootstrap process\n\t *\n\t * When bootstrapping a component, Angular mounts it onto a target DOM element\n\t * and kicks off automatic change detection. The target DOM element can be\n\t * provided using the \\`rootSelectorOrNode\\` argument.\n\t *\n\t * If the target DOM element is not provided, Angular tries to find one on a page\n\t * using the \\`selector\\` of the component that is being bootstrapped\n\t * (first matched element is used).\n\t *\n\t * ### Example\n\t *\n\t * Generally, we define the component to bootstrap in the \\`bootstrap\\` array of \\`NgModule\\`,\n\t * but it requires us to know the component while writing the application code.\n\t *\n\t * Imagine a situation where we have to wait for an API call to decide about the component to\n\t * bootstrap. We can use the \\`ngDoBootstrap\\` hook of the \\`NgModule\\` and call this method to\n\t * dynamically bootstrap a component.\n\t *\n\t * {@example core/ts/platform/platform.ts region='componentSelector'}\n\t *\n\t * Optionally, a component can be mounted onto a DOM element that does not match the\n\t * selector of the bootstrapped component.\n\t *\n\t * In the following example, we are providing a CSS selector to match the target element.\n\t *\n\t * {@example core/ts/platform/platform.ts region='cssSelector'}\n\t *\n\t * While in this example, we are providing reference to a DOM node.\n\t *\n\t * {@example core/ts/platform/platform.ts region='domNode'}\n\t *\n\t * @deprecated Passing Component factories as the \\`Application.bootstrap\\` function argument is\n\t *     deprecated. Pass Component Types instead.\n\t */\n\tbootstrap<C>(componentFactory: ComponentFactory<C>, rootSelectorOrNode?: string | any): ComponentRef<C>;\n\t/**\n\t * Invoke this method to explicitly process change detection and its side-effects.\n\t *\n\t * In development mode, \\`tick()\\` also performs a second change detection cycle to ensure that no\n\t * further changes are detected. If additional changes are picked up during this second cycle,\n\t * bindings in the app have side-effects that cannot be resolved in a single change detection\n\t * pass.\n\t * In this case, Angular throws an error, since an Angular application can only have one change\n\t * detection pass during which all change detection must complete.\n\t */\n\ttick(): void;\n\t/**\n\t * Attaches a view so that it will be dirty checked.\n\t * The view will be automatically detached when it is destroyed.\n\t * This will throw if the view is already attached to a ViewContainer.\n\t */\n\tattachView(viewRef: ViewRef): void;\n\t/**\n\t * Detaches a view from dirty checking again.\n\t */\n\tdetachView(viewRef: ViewRef): void;\n\tprivate _loadComponent;\n\t/**\n\t * Destroys an Angular application represented by this \\`ApplicationRef\\`. Calling this function\n\t * will destroy the associated environment injectors as well as all the bootstrapped components\n\t * with their views.\n\t */\n\tdestroy(): void;\n\t/**\n\t * Returns the number of attached views.\n\t */\n\tget viewCount(): number;\n\tprivate warnIfDestroyed;\n\tstatic ɵfac: i0.ɵɵFactoryDeclaration<ApplicationRef, never>;\n\tstatic ɵprov: i0.ɵɵInjectableDeclaration<ApplicationRef>;\n}\n\n/**\n * @publicApi\n */\nexport declare function asNativeElements(debugEls: DebugElement[]): any;\n\n/**\n * Checks that there is currently a platform that contains the given token as a provider.\n *\n * @publicApi\n */\nexport declare function assertPlatform(requiredToken: any): PlatformRef;\n\n/**\n * Type of the Attribute metadata.\n *\n * @publicApi\n */\nexport declare interface Attribute {\n\t/**\n\t * The name of the attribute whose value can be injected.\n\t */\n\tattributeName: string;\n}\n\n/**\n * Attribute decorator and metadata.\n *\n * @Annotation\n * @publicApi\n */\nexport declare const Attribute: AttributeDecorator;\n\n\n/**\n * Type of the Attribute decorator / constructor function.\n *\n * @publicApi\n */\nexport declare interface AttributeDecorator {\n\t/**\n\t * Parameter decorator for a directive constructor that designates\n\t * a host-element attribute whose value is injected as a constant string literal.\n\t *\n\t * @usageNotes\n\t *\n\t * Suppose we have an \\`<input>\\` element and want to know its \\`type\\`.\n\t *\n\t * \\`\\`\\`html\n\t * <input type=\"text\">\n\t * \\`\\`\\`\n\t *\n\t * The following example uses the decorator to inject the string literal \\`text\\` in a directive.\n\t *\n\t * {@example core/ts/metadata/metadata.ts region='attributeMetadata'}\n\t *\n\t * The following example uses the decorator in a component constructor.\n\t *\n\t * {@example core/ts/metadata/metadata.ts region='attributeFactory'}\n\t *\n\t */\n\t(name: string): any;\n\tnew(name: string): Attribute;\n}\n\n/**\n * Provides additional options to the bootstrapping process.\n *\n * @publicApi\n */\nexport declare interface BootstrapOptions {\n\t/**\n\t * Optionally specify which \\`NgZone\\` should be used.\n\t *\n\t * - Provide your own \\`NgZone\\` instance.\n\t * - \\`zone.js\\` - Use default \\`NgZone\\` which requires \\`Zone.js\\`.\n\t * - \\`noop\\` - Use \\`NoopNgZone\\` which does nothing.\n\t */\n\tngZone?: NgZone | 'zone.js' | 'noop';\n\t/**\n\t * Optionally specify coalescing event change detections or not.\n\t * Consider the following case.\n\t *\n\t * <div (click)=\"doSomething()\">\n\t *   <button (click)=\"doSomethingElse()\"></button>\n\t * </div>\n\t *\n\t * When button is clicked, because of the event bubbling, both\n\t * event handlers will be called and 2 change detections will be\n\t * triggered. We can coalesce such kind of events to only trigger\n\t * change detection only once.\n\t *\n\t * By default, this option will be false. So the events will not be\n\t * coalesced and the change detection will be triggered multiple times.\n\t * And if this option be set to true, the change detection will be\n\t * triggered async by scheduling a animation frame. So in the case above,\n\t * the change detection will only be triggered once.\n\t */\n\tngZoneEventCoalescing?: boolean;\n\t/**\n\t * Optionally specify if \\`NgZone#run()\\` method invocations should be coalesced\n\t * into a single change detection.\n\t *\n\t * Consider the following case.\n\t *\n\t * for (let i = 0; i < 10; i ++) {\n\t *   ngZone.run(() => {\n\t *     // do something\n\t *   });\n\t * }\n\t *\n\t * This case triggers the change detection multiple times.\n\t * With ngZoneRunCoalescing options, all change detections in an event loop trigger only once.\n\t * In addition, the change detection executes in requestAnimation.\n\t *\n\t */\n\tngZoneRunCoalescing?: boolean;\n}\n\n\n/**\n * The strategy that the default change detector uses to detect changes.\n * When set, takes effect the next time change detection is triggered.\n *\n * @see {@link ChangeDetectorRef#usage-notes Change detection usage}\n *\n * @publicApi\n */\nexport declare enum ChangeDetectionStrategy {\n\t/**\n\t * Use the \\`CheckOnce\\` strategy, meaning that automatic change detection is deactivated\n\t * until reactivated by setting the strategy to \\`Default\\` (\\`CheckAlways\\`).\n\t * Change detection can still be explicitly invoked.\n\t * This strategy applies to all child directives and cannot be overridden.\n\t */\n\tOnPush = 0,\n\t/**\n\t * Use the default \\`CheckAlways\\` strategy, in which change detection is automatic until\n\t * explicitly deactivated.\n\t */\n\tDefault = 1\n}\n\ndeclare type ChangeDetectionStrategy_2 = number;\n\n/**\n * Base class that provides change detection functionality.\n * A change-detection tree collects all views that are to be checked for changes.\n * Use the methods to add and remove views from the tree, initiate change-detection,\n * and explicitly mark views as _dirty_, meaning that they have changed and need to be re-rendered.\n *\n * @see [Using change detection hooks](guide/lifecycle-hooks#using-change-detection-hooks)\n * @see [Defining custom change detection](guide/lifecycle-hooks#defining-custom-change-detection)\n *\n * @usageNotes\n *\n * The following examples demonstrate how to modify default change-detection behavior\n * to perform explicit detection when needed.\n *\n * ### Use \\`markForCheck()\\` with \\`CheckOnce\\` strategy\n *\n * The following example sets the \\`OnPush\\` change-detection strategy for a component\n * (\\`CheckOnce\\`, rather than the default \\`CheckAlways\\`), then forces a second check\n * after an interval. See [live demo](https://plnkr.co/edit/GC512b?p=preview).\n *\n * <code-example path=\"core/ts/change_detect/change-detection.ts\"\n * region=\"mark-for-check\"></code-example>\n *\n * ### Detach change detector to limit how often check occurs\n *\n * The following example defines a component with a large list of read-only data\n * that is expected to change constantly, many times per second.\n * To improve performance, we want to check and update the list\n * less often than the changes actually occur. To do that, we detach\n * the component's change detector and perform an explicit local check every five seconds.\n *\n * <code-example path=\"core/ts/change_detect/change-detection.ts\" region=\"detach\"></code-example>\n *\n *\n * ### Reattaching a detached component\n *\n * The following example creates a component displaying live data.\n * The component detaches its change detector from the main change detector tree\n * when the \\`live\\` property is set to false, and reattaches it when the property\n * becomes true.\n *\n * <code-example path=\"core/ts/change_detect/change-detection.ts\" region=\"reattach\"></code-example>\n *\n * @publicApi\n */\nexport declare abstract class ChangeDetectorRef {\n\t/**\n\t * When a view uses the {@link ChangeDetectionStrategy#OnPush OnPush} (checkOnce)\n\t * change detection strategy, explicitly marks the view as changed so that\n\t * it can be checked again.\n\t *\n\t * Components are normally marked as dirty (in need of rerendering) when inputs\n\t * have changed or events have fired in the view. Call this method to ensure that\n\t * a component is checked even if these triggers have not occurred.\n\t *\n\t * <!-- TODO: Add a link to a chapter on OnPush components -->\n\t *\n\t */\n\tabstract markForCheck(): void;\n\t/**\n\t * Detaches this view from the change-detection tree.\n\t * A detached view is  not checked until it is reattached.\n\t * Use in combination with \\`detectChanges()\\` to implement local change detection checks.\n\t *\n\t * Detached views are not checked during change detection runs until they are\n\t * re-attached, even if they are marked as dirty.\n\t *\n\t * <!-- TODO: Add a link to a chapter on detach/reattach/local digest -->\n\t * <!-- TODO: Add a live demo once ref.detectChanges is merged into master -->\n\t *\n\t */\n\tabstract detach(): void;\n\t/**\n\t * Checks this view and its children. Use in combination with {@link ChangeDetectorRef#detach\n\t * detach}\n\t * to implement local change detection checks.\n\t *\n\t * <!-- TODO: Add a link to a chapter on detach/reattach/local digest -->\n\t * <!-- TODO: Add a live demo once ref.detectChanges is merged into master -->\n\t *\n\t */\n\tabstract detectChanges(): void;\n\t/**\n\t * Checks the change detector and its children, and throws if any changes are detected.\n\t *\n\t * Use in development mode to verify that running change detection doesn't introduce\n\t * other changes. Calling it in production mode is a noop.\n\t */\n\tabstract checkNoChanges(): void;\n\t/**\n\t * Re-attaches the previously detached view to the change detection tree.\n\t * Views are attached to the tree by default.\n\t *\n\t * <!-- TODO: Add a link to a chapter on detach/reattach/local digest -->\n\t *\n\t */\n\tabstract reattach(): void;\n}\n\ndeclare const CHILD_HEAD = 13;\n\ndeclare const CHILD_TAIL = 14;\n\n/**\n * Configures the \\`Injector\\` to return an instance of \\`useClass\\` for a token.\n * @see [\"Dependency Injection Guide\"](guide/dependency-injection).\n *\n * @usageNotes\n *\n * {@example core/di/ts/provider_spec.ts region='ClassProvider'}\n *\n * Note that following two providers are not equal:\n *\n * {@example core/di/ts/provider_spec.ts region='ClassProviderDifference'}\n *\n * ### Multi-value example\n *\n * {@example core/di/ts/provider_spec.ts region='MultiProviderAspect'}\n *\n * @publicApi\n */\nexport declare interface ClassProvider extends ClassSansProvider {\n\t/**\n\t * An injection token. (Typically an instance of \\`Type\\` or \\`InjectionToken\\`, but can be \\`any\\`).\n\t */\n\tprovide: any;\n\t/**\n\t * When true, injector returns an array of instances. This is useful to allow multiple\n\t * providers spread across many files to provide configuration information to a common token.\n\t */\n\tmulti?: boolean;\n}\n\n/**\n * Configures the \\`Injector\\` to return a value by invoking a \\`useClass\\` function.\n * Base for \\`ClassProvider\\` decorator.\n *\n * @see [\"Dependency Injection Guide\"](guide/dependency-injection).\n *\n * @publicApi\n */\nexport declare interface ClassSansProvider {\n\t/**\n\t * Class to instantiate for the \\`token\\`.\n\t */\n\tuseClass: Type<any>;\n}\n\ndeclare const CLEANUP = 7;\n\n/**\n * Low-level service for running the angular compiler during runtime\n * to create {@link ComponentFactory}s, which\n * can later be used to create and render a Component instance.\n *\n * Each \\`@NgModule\\` provides an own \\`Compiler\\` to its injector,\n * that will use the directives/pipes of the ng module for compilation\n * of components.\n *\n * @publicApi\n *\n * @deprecated\n * Ivy JIT mode doesn't require accessing this symbol.\n * See [JIT API changes due to ViewEngine deprecation](guide/deprecations#jit-api-changes) for\n * additional context.\n */\nexport declare class Compiler {\n\t/**\n\t * Compiles the given NgModule and all of its components. All templates of the components listed\n\t * in \\`entryComponents\\` have to be inlined.\n\t */\n\tcompileModuleSync<T>(moduleType: Type<T>): NgModuleFactory<T>;\n\t/**\n\t * Compiles the given NgModule and all of its components\n\t */\n\tcompileModuleAsync<T>(moduleType: Type<T>): Promise<NgModuleFactory<T>>;\n\t/**\n\t * Same as {@link #compileModuleSync} but also creates ComponentFactories for all components.\n\t */\n\tcompileModuleAndAllComponentsSync<T>(moduleType: Type<T>): ModuleWithComponentFactories<T>;\n\t/**\n\t * Same as {@link #compileModuleAsync} but also creates ComponentFactories for all components.\n\t */\n\tcompileModuleAndAllComponentsAsync<T>(moduleType: Type<T>): Promise<ModuleWithComponentFactories<T>>;\n\t/**\n\t * Clears all caches.\n\t */\n\tclearCache(): void;\n\t/**\n\t * Clears the cache for the given component/ngModule.\n\t */\n\tclearCacheFor(type: Type<any>): void;\n\t/**\n\t * Returns the id for a given NgModule, if one is defined and known to the compiler.\n\t */\n\tgetModuleId(moduleType: Type<any>): string | undefined;\n\tstatic ɵfac: i0.ɵɵFactoryDeclaration<Compiler, never>;\n\tstatic ɵprov: i0.ɵɵInjectableDeclaration<Compiler>;\n}\n\n/**\n * Token to provide CompilerOptions in the platform injector.\n *\n * @publicApi\n */\nexport declare const COMPILER_OPTIONS: InjectionToken<CompilerOptions[]>;\n\n/**\n * A factory for creating a Compiler\n *\n * @publicApi\n *\n * @deprecated\n * Ivy JIT mode doesn't require accessing this symbol.\n * See [JIT API changes due to ViewEngine deprecation](guide/deprecations#jit-api-changes) for\n * additional context.\n */\nexport declare abstract class CompilerFactory {\n\tabstract createCompiler(options?: CompilerOptions[]): Compiler;\n}\n\n/**\n * Options for creating a compiler.\n *\n * Note: the \\`useJit\\` and \\`missingTranslation\\` config options are not used in Ivy, passing them has\n * no effect. Those config options are deprecated since v13.\n *\n * @publicApi\n */\nexport declare type CompilerOptions = {\n\t/**\n\t * @deprecated not used at all in Ivy, providing this config option has no effect.\n\t */\n\tuseJit?: boolean;\n\tdefaultEncapsulation?: ViewEncapsulation;\n\tproviders?: StaticProvider[];\n\t/**\n\t * @deprecated not used at all in Ivy, providing this config option has no effect.\n\t */\n\tmissingTranslation?: MissingTranslationStrategy;\n\tpreserveWhitespaces?: boolean;\n};\n\n/**\n * Supplies configuration metadata for an Angular component.\n *\n * @publicApi\n */\nexport declare interface Component extends Directive {\n\t/**\n\t * The change-detection strategy to use for this component.\n\t *\n\t * When a component is instantiated, Angular creates a change detector,\n\t * which is responsible for propagating the component's bindings.\n\t * The strategy is one of:\n\t * - \\`ChangeDetectionStrategy#OnPush\\` sets the strategy to \\`CheckOnce\\` (on demand).\n\t * - \\`ChangeDetectionStrategy#Default\\` sets the strategy to \\`CheckAlways\\`.\n\t */\n\tchangeDetection?: ChangeDetectionStrategy;\n\t/**\n\t * Defines the set of injectable objects that are visible to its view DOM children.\n\t * See [example](#injecting-a-class-with-a-view-provider).\n\t *\n\t */\n\tviewProviders?: Provider[];\n\t/**\n\t * The module ID of the module that contains the component.\n\t * The component must be able to resolve relative URLs for templates and styles.\n\t * SystemJS exposes the \\`__moduleName\\` variable within each module.\n\t * In CommonJS, this can  be set to \\`module.id\\`.\n\t *\n\t */\n\tmoduleId?: string;\n\t/**\n\t * The relative path or absolute URL of a template file for an Angular component.\n\t * If provided, do not supply an inline template using \\`template\\`.\n\t *\n\t */\n\ttemplateUrl?: string;\n\t/**\n\t * An inline template for an Angular component. If provided,\n\t * do not supply a template file using \\`templateUrl\\`.\n\t *\n\t */\n\ttemplate?: string;\n\t/**\n\t * One or more relative paths or absolute URLs for files containing CSS stylesheets to use\n\t * in this component.\n\t */\n\tstyleUrls?: string[];\n\t/**\n\t * One or more inline CSS stylesheets to use\n\t * in this component.\n\t */\n\tstyles?: string[];\n\t/**\n\t * One or more animation \\`trigger()\\` calls, containing\n\t * [\\`state()\\`](api/animations/state) and \\`transition()\\` definitions.\n\t * See the [Animations guide](/guide/animations) and animations API documentation.\n\t *\n\t */\n\tanimations?: any[];\n\t/**\n\t * An encapsulation policy for the component's styling.\n\t * Possible values:\n\t * - \\`ViewEncapsulation.Emulated\\`: Apply modified component styles in order to emulate\n\t *                                 a native Shadow DOM CSS encapsulation behavior.\n\t * - \\`ViewEncapsulation.None\\`: Apply component styles globally without any sort of encapsulation.\n\t * - \\`ViewEncapsulation.ShadowDom\\`: Use the browser's native Shadow DOM API to encapsulate styles.\n\t *\n\t * If not supplied, the value is taken from the \\`CompilerOptions\\`\n\t * which defaults to \\`ViewEncapsulation.Emulated\\`.\n\t *\n\t * If the policy is \\`ViewEncapsulation.Emulated\\` and the component has no\n\t * {@link Component#styles styles} nor {@link Component#styleUrls styleUrls},\n\t * the policy is automatically switched to \\`ViewEncapsulation.None\\`.\n\t */\n\tencapsulation?: ViewEncapsulation;\n\t/**\n\t * Overrides the default interpolation start and end delimiters (\\`{{\\` and \\`}}\\`).\n\t */\n\tinterpolation?: [string, string];\n\t/**\n\t * A set of components that should be compiled along with\n\t * this component. For each component listed here,\n\t * Angular creates a {@link ComponentFactory} and stores it in the\n\t * {@link ComponentFactoryResolver}.\n\t * @deprecated Since 9.0.0. With Ivy, this property is no longer necessary.\n\t */\n\tentryComponents?: Array<Type<any> | any[]>;\n\t/**\n\t * True to preserve or false to remove potentially superfluous whitespace characters\n\t * from the compiled template. Whitespace characters are those matching the \\`\\s\\`\n\t * character class in JavaScript regular expressions. Default is false, unless\n\t * overridden in compiler options.\n\t */\n\tpreserveWhitespaces?: boolean;\n\t/**\n\t * Angular components marked as \\`standalone\\` do not need to be declared in an NgModule. Such\n\t * components directly manage their own template dependencies (components, directives, and pipes\n\t * used in a template) via the imports property.\n\t *\n\t * More information about standalone components, directives, and pipes can be found in [this\n\t * guide](guide/standalone-components).\n\t *\n\t * @developerPreview\n\t */\n\tstandalone?: boolean;\n\t/**\n\t * The imports property specifies the standalone component's template dependencies — those\n\t * directives, components, and pipes that can be used within its template. Standalone components\n\t * can import other standalone components, directives, and pipes as well as existing NgModules.\n\t *\n\t * This property is only available for standalone components - specifying it for components\n\t * declared in an NgModule generates a compilation error.\n\t *\n\t * More information about standalone components, directives, and pipes can be found in [this\n\t * guide](guide/standalone-components).\n\t *\n\t * @developerPreview\n\t */\n\timports?: (Type<any> | any[])[];\n\t/**\n\t * The set of schemas that declare elements to be allowed in a standalone component. Elements and\n\t * properties that are neither Angular components nor directives must be declared in a schema.\n\t *\n\t * This property is only available for standalone components - specifying it for components\n\t * declared in an NgModule generates a compilation error.\n\t *\n\t * More information about standalone components, directives, and pipes can be found in [this\n\t * guide](guide/standalone-components).\n\t */\n\tschemas?: SchemaMetadata[];\n}\n\n/**\n * Component decorator and metadata.\n *\n * @Annotation\n * @publicApi\n */\nexport declare const Component: ComponentDecorator;\n\n/**\n * Component decorator interface\n *\n * @publicApi\n */\nexport declare interface ComponentDecorator {\n\t/**\n\t * Decorator that marks a class as an Angular component and provides configuration\n\t * metadata that determines how the component should be processed,\n\t * instantiated, and used at runtime.\n\t *\n\t * Components are the most basic UI building block of an Angular app.\n\t * An Angular app contains a tree of Angular components.\n\t *\n\t * Angular components are a subset of directives, always associated with a template.\n\t * Unlike other directives, only one component can be instantiated for a given element in a\n\t * template.\n\t *\n\t * A component must belong to an NgModule in order for it to be available\n\t * to another component or application. To make it a member of an NgModule,\n\t * list it in the \\`declarations\\` field of the \\`NgModule\\` metadata.\n\t *\n\t * Note that, in addition to these options for configuring a directive,\n\t * you can control a component's runtime behavior by implementing\n\t * life-cycle hooks. For more information, see the\n\t * [Lifecycle Hooks](guide/lifecycle-hooks) guide.\n\t *\n\t * @usageNotes\n\t *\n\t * ### Setting component inputs\n\t *\n\t * The following example creates a component with two data-bound properties,\n\t * specified by the \\`inputs\\` value.\n\t *\n\t * <code-example path=\"core/ts/metadata/directives.ts\" region=\"component-input\"></code-example>\n\t *\n\t *\n\t * ### Setting component outputs\n\t *\n\t * The following example shows two event emitters that emit on an interval. One\n\t * emits an output every second, while the other emits every five seconds.\n\t *\n\t * {@example core/ts/metadata/directives.ts region='component-output-interval'}\n\t *\n\t * ### Injecting a class with a view provider\n\t *\n\t * The following simple example injects a class into a component\n\t * using the view provider specified in component metadata:\n\t *\n\t * \\`\\`\\`ts\n\t * class Greeter {\n\t *    greet(name:string) {\n\t *      return 'Hello ' + name + '!';\n\t *    }\n\t * }\n\t *\n\t * @Directive({\n\t *   selector: 'needs-greeter'\n\t * })\n\t * class NeedsGreeter {\n\t *   greeter:Greeter;\n\t *\n\t *   constructor(greeter:Greeter) {\n\t *     this.greeter = greeter;\n\t *   }\n\t * }\n\t *\n\t * @Component({\n\t *   selector: 'greet',\n\t *   viewProviders: [\n\t *     Greeter\n\t *   ],\n\t *   template: \\`<needs-greeter></needs-greeter>\\`\n\t * })\n\t * class HelloWorld {\n\t * }\n\t *\n\t * \\`\\`\\`\n\t *\n\t * ### Preserving whitespace\n\t *\n\t * Removing whitespace can greatly reduce AOT-generated code size and speed up view creation.\n\t * As of Angular 6, the default for \\`preserveWhitespaces\\` is false (whitespace is removed).\n\t * To change the default setting for all components in your application, set\n\t * the \\`preserveWhitespaces\\` option of the AOT compiler.\n\t *\n\t * By default, the AOT compiler removes whitespace characters as follows:\n\t * * Trims all whitespaces at the beginning and the end of a template.\n\t * * Removes whitespace-only text nodes. For example,\n\t *\n\t * \\`\\`\\`html\n\t * <button>Action 1</button>  <button>Action 2</button>\n\t * \\`\\`\\`\n\t *\n\t * becomes:\n\t *\n\t * \\`\\`\\`html\n\t * <button>Action 1</button><button>Action 2</button>\n\t * \\`\\`\\`\n\t *\n\t * * Replaces a series of whitespace characters in text nodes with a single space.\n\t * For example, \\`<span>\\n some text\\n</span>\\` becomes \\`<span> some text </span>\\`.\n\t * * Does NOT alter text nodes inside HTML tags such as \\`<pre>\\` or \\`<textarea>\\`,\n\t * where whitespace characters are significant.\n\t *\n\t * Note that these transformations can influence DOM nodes layout, although impact\n\t * should be minimal.\n\t *\n\t * You can override the default behavior to preserve whitespace characters\n\t * in certain fragments of a template. For example, you can exclude an entire\n\t * DOM sub-tree by using the \\`ngPreserveWhitespaces\\` attribute:\n\t *\n\t * \\`\\`\\`html\n\t * <div ngPreserveWhitespaces>\n\t *     whitespaces are preserved here\n\t *     <span>    and here </span>\n\t * </div>\n\t * \\`\\`\\`\n\t *\n\t * You can force a single space to be preserved in a text node by using \\`&ngsp;\\`,\n\t * which is replaced with a space character by Angular's template\n\t * compiler:\n\t *\n\t * \\`\\`\\`html\n\t * <a>Spaces</a>&ngsp;<a>between</a>&ngsp;<a>links.</a>\n\t * <!-- compiled to be equivalent to:\n\t *  <a>Spaces</a> <a>between</a> <a>links.</a>  -->\n\t * \\`\\`\\`\n\t *\n\t * Note that sequences of \\`&ngsp;\\` are still collapsed to just one space character when\n\t * the \\`preserveWhitespaces\\` option is set to \\`false\\`.\n\t *\n\t * \\`\\`\\`html\n\t * <a>before</a>&ngsp;&ngsp;&ngsp;<a>after</a>\n\t * <!-- compiled to be equivalent to:\n\t *  <a>before</a> <a>after</a> -->\n\t * \\`\\`\\`\n\t *\n\t * To preserve sequences of whitespace characters, use the\n\t * \\`ngPreserveWhitespaces\\` attribute.\n\t *\n\t * @Annotation\n\t */\n\t(obj: Component): TypeDecorator;\n\t/**\n\t * See the \\`Component\\` decorator.\n\t */\n\tnew(obj: Component): Component;\n}\n\ndeclare interface ComponentDefFeature {\n\t<T>(componentDef: ɵComponentDef<T>): void;\n\t/**\n\t * Marks a feature as something that {@link InheritDefinitionFeature} will execute\n\t * during inheritance.\n\t *\n\t * NOTE: DO NOT SET IN ROOT OF MODULE! Doing so will result in tree-shakers/bundlers\n\t * identifying the change as a side effect, and the feature will be included in\n\t * every bundle.\n\t */\n\tngInherit?: true;\n}\n\n/**\n * Base class for a factory that can create a component dynamically.\n * Instantiate a factory for a given type of component with \\`resolveComponentFactory()\\`.\n * Use the resulting \\`ComponentFactory.create()\\` method to create a component of that type.\n *\n * @see [Dynamic Components](guide/dynamic-component-loader)\n *\n * @publicApi\n *\n * @deprecated Angular no longer requires Component factories. Please use other APIs where\n *     Component class can be used directly.\n */\ndeclare abstract class ComponentFactory<C> {\n\t/**\n\t * The component's HTML selector.\n\t */\n\tabstract get selector(): string;\n\t/**\n\t * The type of component the factory will create.\n\t */\n\tabstract get componentType(): Type<any>;\n\t/**\n\t * Selector for all <ng-content> elements in the component.\n\t */\n\tabstract get ngContentSelectors(): string[];\n\t/**\n\t * The inputs of the component.\n\t */\n\tabstract get inputs(): {\n\t\tpropName: string;\n\t\ttemplateName: string;\n\t}[];\n\t/**\n\t * The outputs of the component.\n\t */\n\tabstract get outputs(): {\n\t\tpropName: string;\n\t\ttemplateName: string;\n\t}[];\n\t/**\n\t * Creates a new component.\n\t */\n\tabstract create(injector: Injector, projectableNodes?: any[][], rootSelectorOrNode?: string | any, environmentInjector?: EnvironmentInjector | NgModuleRef<any>): ComponentRef<C>;\n}\nexport { ComponentFactory }\nexport { ComponentFactory as ɵComponentFactory }\n\n/**\n * A simple registry that maps \\`Components\\` to generated \\`ComponentFactory\\` classes\n * that can be used to create instances of components.\n * Use to obtain the factory for a given component type,\n * then use the factory's \\`create()\\` method to create a component of that type.\n *\n * Note: since v13, dynamic component creation via\n * [\\`ViewContainerRef.createComponent\\`](api/core/ViewContainerRef#createComponent)\n * does **not** require resolving component factory: component class can be used directly.\n *\n * @publicApi\n *\n * @deprecated Angular no longer requires Component factories. Please use other APIs where\n *     Component class can be used directly.\n */\nexport declare abstract class ComponentFactoryResolver {\n\tstatic NULL: ComponentFactoryResolver;\n\t/**\n\t * Retrieves the factory object that creates a component of the given type.\n\t * @param component The component type.\n\t */\n\tabstract resolveComponentFactory<T>(component: Type<T>): ComponentFactory<T>;\n}\n\ndeclare class ComponentFactoryResolver_2 extends ComponentFactoryResolver {\n\tprivate ngModule?;\n\t/**\n\t * @param ngModule The NgModuleRef to which all resolved factories are bound.\n\t */\n\tconstructor(ngModule?: NgModuleRef<any> | undefined);\n\tresolveComponentFactory<T>(component: Type<T>): ComponentFactory<T>;\n}\n\n/**\n * An interface that describes the subset of component metadata\n * that can be retrieved using the \\`reflectComponentType\\` function.\n *\n * @publicApi\n */\nexport declare interface ComponentMirror<C> {\n\t/**\n\t * The component's HTML selector.\n\t */\n\tget selector(): string;\n\t/**\n\t * The type of component the factory will create.\n\t */\n\tget type(): Type<C>;\n\t/**\n\t * The inputs of the component.\n\t */\n\tget inputs(): ReadonlyArray<{\n\t\treadonly propName: string;\n\t\treadonly templateName: string;\n\t}>;\n\t/**\n\t * The outputs of the component.\n\t */\n\tget outputs(): ReadonlyArray<{\n\t\treadonly propName: string;\n\t\treadonly templateName: string;\n\t}>;\n\t/**\n\t * Selector for all <ng-content> elements in the component.\n\t */\n\tget ngContentSelectors(): ReadonlyArray<string>;\n\t/**\n\t * Whether this component is marked as standalone.\n\t * Note: an extra flag, not present in \\`ComponentFactory\\`.\n\t */\n\tget isStandalone(): boolean;\n}\n\n/**\n * Represents a component created by a \\`ComponentFactory\\`.\n * Provides access to the component instance and related objects,\n * and provides the means of destroying the instance.\n *\n * @publicApi\n */\nexport declare abstract class ComponentRef<C> {\n\t/**\n\t * Updates a specified input name to a new value. Using this method will properly mark for check\n\t * component using the \\`OnPush\\` change detection strategy. It will also assure that the\n\t * \\`OnChanges\\` lifecycle hook runs when a dynamically created component is change-detected.\n\t *\n\t * @param name The name of an input.\n\t * @param value The new value of an input.\n\t */\n\tabstract setInput(name: string, value: unknown): void;\n\t/**\n\t * The host or anchor [element](guide/glossary#element) for this component instance.\n\t */\n\tabstract get location(): ElementRef;\n\t/**\n\t * The [dependency injector](guide/glossary#injector) for this component instance.\n\t */\n\tabstract get injector(): Injector;\n\t/**\n\t * This component instance.\n\t */\n\tabstract get instance(): C;\n\t/**\n\t * The [host view](guide/glossary#view-tree) defined by the template\n\t * for this component instance.\n\t */\n\tabstract get hostView(): ViewRef;\n\t/**\n\t * The change detector for this component instance.\n\t */\n\tabstract get changeDetectorRef(): ChangeDetectorRef;\n\t/**\n\t * The type of this component (as created by a \\`ComponentFactory\\` class).\n\t */\n\tabstract get componentType(): Type<any>;\n\t/**\n\t * Destroys the component instance and all of the data structures associated with it.\n\t */\n\tabstract destroy(): void;\n\t/**\n\t * A lifecycle hook that provides additional developer-defined cleanup\n\t * functionality for the component.\n\t * @param callback A handler function that cleans up developer-defined data\n\t * associated with this component. Called when the \\`destroy()\\` method is invoked.\n\t */\n\tabstract onDestroy(callback: Function): void;\n}\n\n/**\n * Definition of what a template rendering function should look like for a component.\n */\ndeclare type ComponentTemplate<T> = {\n\t<U extends T>(rf: ɵRenderFlags, ctx: T | U): void;\n};\n\n/**\n * Configures the \\`Injector\\` to return an instance of a token.\n *\n * @see [\"Dependency Injection Guide\"](guide/dependency-injection).\n *\n * @usageNotes\n *\n * {@example core/di/ts/provider_spec.ts region='ConstructorProvider'}\n *\n * ### Multi-value example\n *\n * {@example core/di/ts/provider_spec.ts region='MultiProviderAspect'}\n *\n * @publicApi\n */\nexport declare interface ConstructorProvider extends ConstructorSansProvider {\n\t/**\n\t * An injection token. Typically an instance of \\`Type\\` or \\`InjectionToken\\`, but can be \\`any\\`.\n\t */\n\tprovide: Type<any>;\n\t/**\n\t * When true, injector returns an array of instances. This is useful to allow multiple\n\t * providers spread across many files to provide configuration information to a common token.\n\t */\n\tmulti?: boolean;\n}\n\n/**\n * Configures the \\`Injector\\` to return an instance of a token.\n *\n * @see [\"Dependency Injection Guide\"](guide/dependency-injection).\n *\n * @usageNotes\n *\n * \\`\\`\\`ts\n * @Injectable(SomeModule, {deps: []})\n * class MyService {}\n * \\`\\`\\`\n *\n * @publicApi\n */\nexport declare interface ConstructorSansProvider {\n\t/**\n\t * A list of \\`token\\`s to be resolved by the injector.\n\t */\n\tdeps?: any[];\n}\n\n/**\n * Type of the ContentChild metadata.\n *\n * @publicApi\n */\nexport declare type ContentChild = Query;\n\n/**\n * ContentChild decorator and metadata.\n *\n *\n * @Annotation\n *\n * @publicApi\n */\nexport declare const ContentChild: ContentChildDecorator;\n\n/**\n * Type of the ContentChild decorator / constructor function.\n *\n * @publicApi\n */\nexport declare interface ContentChildDecorator {\n\t/**\n\t * @description\n\t * Property decorator that configures a content query.\n\t *\n\t * Use to get the first element or the directive matching the selector from the content DOM.\n\t * If the content DOM changes, and a new child matches the selector,\n\t * the property will be updated.\n\t *\n\t * Content queries are set before the \\`ngAfterContentInit\\` callback is called.\n\t *\n\t * Does not retrieve elements or directives that are in other components' templates,\n\t * since a component's template is always a black box to its ancestors.\n\t *\n\t * **Metadata Properties**:\n\t *\n\t * * **selector** - The directive type or the name used for querying.\n\t * * **descendants** - If \\`true\\` (default) include all descendants of the element. If \\`false\\` then\n\t * only query direct children of the element.\n\t * * **read** - Used to read a different token from the queried element.\n\t * * **static** - True to resolve query results before change detection runs,\n\t * false to resolve after change detection. Defaults to false.\n\t *\n\t * The following selectors are supported.\n\t *   * Any class with the \\`@Component\\` or \\`@Directive\\` decorator\n\t *   * A template reference variable as a string (e.g. query \\`<my-component #cmp></my-component>\\`\n\t * with \\`@ContentChild('cmp')\\`)\n\t *   * Any provider defined in the child component tree of the current component (e.g.\n\t * \\`@ContentChild(SomeService) someService: SomeService\\`)\n\t *   * Any provider defined through a string token (e.g. \\`@ContentChild('someToken') someTokenVal:\n\t * any\\`)\n\t *   * A \\`TemplateRef\\` (e.g. query \\`<ng-template></ng-template>\\` with \\`@ContentChild(TemplateRef)\n\t * template;\\`)\n\t *\n\t * The following values are supported by \\`read\\`:\n\t *   * Any class with the \\`@Component\\` or \\`@Directive\\` decorator\n\t *   * Any provider defined on the injector of the component that is matched by the \\`selector\\` of\n\t * this query\n\t *   * Any provider defined through a string token (e.g. \\`{provide: 'token', useValue: 'val'}\\`)\n\t *   * \\`TemplateRef\\`, \\`ElementRef\\`, and \\`ViewContainerRef\\`\n\t *\n\t * @usageNotes\n\t *\n\t * {@example core/di/ts/contentChild/content_child_howto.ts region='HowTo'}\n\t *\n\t * ### Example\n\t *\n\t * {@example core/di/ts/contentChild/content_child_example.ts region='Component'}\n\t *\n\t * @Annotation\n\t */\n\t(selector: ProviderToken<unknown> | Function | string, opts?: {\n\t\tdescendants?: boolean;\n\t\tread?: any;\n\t\tstatic?: boolean;\n\t}): any;\n\tnew(selector: ProviderToken<unknown> | Function | string, opts?: {\n\t\tdescendants?: boolean;\n\t\tread?: any;\n\t\tstatic?: boolean;\n\t}): ContentChild;\n}\n\n/**\n * Type of the ContentChildren metadata.\n *\n *\n * @Annotation\n * @publicApi\n */\nexport declare type ContentChildren = Query;\n\n/**\n * ContentChildren decorator and metadata.\n *\n *\n * @Annotation\n * @publicApi\n */\nexport declare const ContentChildren: ContentChildrenDecorator;\n\n/**\n * Type of the ContentChildren decorator / constructor function.\n *\n * @see \\`ContentChildren\\`.\n * @publicApi\n */\nexport declare interface ContentChildrenDecorator {\n\t/**\n\t * @description\n\t * Property decorator that configures a content query.\n\t *\n\t * Use to get the \\`QueryList\\` of elements or directives from the content DOM.\n\t * Any time a child element is added, removed, or moved, the query list will be\n\t * updated, and the changes observable of the query list will emit a new value.\n\t *\n\t * Content queries are set before the \\`ngAfterContentInit\\` callback is called.\n\t *\n\t * Does not retrieve elements or directives that are in other components' templates,\n\t * since a component's template is always a black box to its ancestors.\n\t *\n\t * **Metadata Properties**:\n\t *\n\t * * **selector** - The directive type or the name used for querying.\n\t * * **descendants** - If \\`true\\` include all descendants of the element. If \\`false\\` then only\n\t * query direct children of the element.\n\t * * **emitDistinctChangesOnly** - The \\` QueryList#changes\\` observable will emit new values only\n\t *   if the QueryList result has changed. When \\`false\\` the \\`changes\\` observable might emit even\n\t *   if the QueryList has not changed.\n\t *   ** Note: *** This config option is **deprecated**, it will be permanently set to \\`true\\` and\n\t *   removed in future versions of Angular.\n\t * * **read** - Used to read a different token from the queried elements.\n\t *\n\t * The following selectors are supported.\n\t *   * Any class with the \\`@Component\\` or \\`@Directive\\` decorator\n\t *   * A template reference variable as a string (e.g. query \\`<my-component #cmp></my-component>\\`\n\t * with \\`@ContentChildren('cmp')\\`)\n\t *   * Any provider defined in the child component tree of the current component (e.g.\n\t * \\`@ContentChildren(SomeService) someService: SomeService\\`)\n\t *   * Any provider defined through a string token (e.g. \\`@ContentChildren('someToken')\n\t * someTokenVal: any\\`)\n\t *   * A \\`TemplateRef\\` (e.g. query \\`<ng-template></ng-template>\\` with\n\t * \\`@ContentChildren(TemplateRef) template;\\`)\n\t *\n\t * In addition, multiple string selectors can be separated with a comma (e.g.\n\t * \\`@ContentChildren('cmp1,cmp2')\\`)\n\t *\n\t * The following values are supported by \\`read\\`:\n\t *   * Any class with the \\`@Component\\` or \\`@Directive\\` decorator\n\t *   * Any provider defined on the injector of the component that is matched by the \\`selector\\` of\n\t * this query\n\t *   * Any provider defined through a string token (e.g. \\`{provide: 'token', useValue: 'val'}\\`)\n\t *   * \\`TemplateRef\\`, \\`ElementRef\\`, and \\`ViewContainerRef\\`\n\t *\n\t * @usageNotes\n\t *\n\t * Here is a simple demonstration of how the \\`ContentChildren\\` decorator can be used.\n\t *\n\t * {@example core/di/ts/contentChildren/content_children_howto.ts region='HowTo'}\n\t *\n\t * ### Tab-pane example\n\t *\n\t * Here is a slightly more realistic example that shows how \\`ContentChildren\\` decorators\n\t * can be used to implement a tab pane component.\n\t *\n\t * {@example core/di/ts/contentChildren/content_children_example.ts region='Component'}\n\t *\n\t * @Annotation\n\t */\n\t(selector: ProviderToken<unknown> | Function | string, opts?: {\n\t\tdescendants?: boolean;\n\t\temitDistinctChangesOnly?: boolean;\n\t\tread?: any;\n\t}): any;\n\tnew(selector: ProviderToken<unknown> | Function | string, opts?: {\n\t\tdescendants?: boolean;\n\t\temitDistinctChangesOnly?: boolean;\n\t\tread?: any;\n\t}): Query;\n}\n\n/**\n * Definition of what a content queries function should look like.\n */\ndeclare type ContentQueriesFunction<T> = <U extends T>(rf: ɵRenderFlags, ctx: U, directiveIndex: number) => void;\n\ndeclare const CONTEXT = 8;\n\n/**\n * Creates a \\`ComponentRef\\` instance based on provided component type and a set of options.\n *\n * @usageNotes\n *\n * The example below demonstrates how the \\`createComponent\\` function can be used\n * to create an instance of a ComponentRef dynamically and attach it to an ApplicationRef,\n * so that it gets included into change detection cycles.\n *\n * Note: the example uses standalone components, but the function can also be used for\n * non-standalone components (declared in an NgModule) as well.\n *\n * \\`\\`\\`typescript\n * @Component({\n *   standalone: true,\n *   template: \\`Hello {{ name }}!\\`\n * })\n * class HelloComponent {\n *   name = 'Angular';\n * }\n *\n * @Component({\n *   standalone: true,\n *   template: \\`<div id=\"hello-component-host\"></div>\\`\n * })\n * class RootComponent {}\n *\n * // Bootstrap an application.\n * const applicationRef = await bootstrapApplication(RootComponent);\n *\n * // Locate a DOM node that would be used as a host.\n * const host = document.getElementById('hello-component-host');\n *\n * // Get an \\`EnvironmentInjector\\` instance from the \\`ApplicationRef\\`.\n * const environmentInjector = applicationRef.injector;\n *\n * // We can now create a \\`ComponentRef\\` instance.\n * const componentRef = createComponent(HelloComponent, {host, environmentInjector});\n *\n * // Last step is to register the newly created ref using the \\`ApplicationRef\\` instance\n * // to include the component view into change detection cycles.\n * applicationRef.attachView(componentRef.hostView);\n * \\`\\`\\`\n *\n * @param component Component class reference.\n * @param options Set of options to use:\n *  * \\`environmentInjector\\`: An \\`EnvironmentInjector\\` instance to be used for the component, see\n * additional info about it at https://angular.io/guide/standalone-components#environment-injectors.\n *  * \\`hostElement\\` (optional): A DOM node that should act as a host node for the component. If not\n * provided, Angular creates one based on the tag name used in the component selector (and falls\n * back to using \\`div\\` if selector doesn't have tag name info).\n *  * \\`elementInjector\\` (optional): An \\`ElementInjector\\` instance, see additional info about it at\n * https://angular.io/guide/hierarchical-dependency-injection#elementinjector.\n *  * \\`projectableNodes\\` (optional): A list of DOM nodes that should be projected through\n *                      [\\`<ng-content>\\`](api/core/ng-content) of the new component instance.\n * @returns ComponentRef instance that represents a given Component.\n *\n * @publicApi\n */\nexport declare function createComponent<C>(component: Type<C>, options: {\n\tenvironmentInjector: EnvironmentInjector;\n\thostElement?: Element;\n\telementInjector?: Injector;\n\tprojectableNodes?: Node[][];\n}): ComponentRef<C>;\n\n/**\n * Create a new environment injector.\n *\n * Learn more about environment injectors in\n * [this guide](guide/standalone-components#environment-injectors).\n *\n * @param providers An array of providers.\n * @param parent A parent environment injector.\n * @param debugName An optional name for this injector instance, which will be used in error\n *     messages.\n *\n * @publicApi\n * @developerPreview\n */\nexport declare function createEnvironmentInjector(providers: Array<Provider | ImportedNgModuleProviders>, parent: EnvironmentInjector, debugName?: string | null): EnvironmentInjector;\n\n/**\n * Returns a new NgModuleRef instance based on the NgModule class and parent injector provided.\n *\n * @param ngModule NgModule class.\n * @param parentInjector Optional injector instance to use as a parent for the module injector. If\n *     not provided, \\`NullInjector\\` will be used instead.\n * @returns NgModuleRef that represents an NgModule instance.\n *\n * @publicApi\n */\nexport declare function createNgModule<T>(ngModule: Type<T>, parentInjector?: Injector): NgModuleRef<T>;\n\n/**\n * The \\`createNgModule\\` function alias for backwards-compatibility.\n * Please avoid using it directly and use \\`createNgModule\\` instead.\n *\n * @deprecated Use \\`createNgModule\\` instead.\n */\nexport declare const createNgModuleRef: typeof createNgModule;\n\n/**\n * Creates a platform.\n * Platforms must be created on launch using this function.\n *\n * @publicApi\n */\nexport declare function createPlatform(injector: Injector): PlatformRef;\n\n/**\n * Creates a factory for a platform. Can be used to provide or override \\`Providers\\` specific to\n * your application's runtime needs, such as \\`PLATFORM_INITIALIZER\\` and \\`PLATFORM_ID\\`.\n * @param parentPlatformFactory Another platform factory to modify. Allows you to compose factories\n * to build up configurations that might be required by different libraries or parts of the\n * application.\n * @param name Identifies the new platform factory.\n * @param providers A set of dependency providers for platforms created with the new factory.\n *\n * @publicApi\n */\nexport declare function createPlatformFactory(parentPlatformFactory: ((extraProviders?: StaticProvider[]) => PlatformRef) | null, name: string, providers?: StaticProvider[]): (extraProviders?: StaticProvider[]) => PlatformRef;\n\n\n/**\n * Expresses a single CSS Selector.\n *\n * Beginning of array\n * - First index: element name\n * - Subsequent odd indices: attr keys\n * - Subsequent even indices: attr values\n *\n * After SelectorFlags.CLASS flag\n * - Class name values\n *\n * SelectorFlags.NOT flag\n * - Changes the mode to NOT\n * - Can be combined with other flags to set the element / attr / class mode\n *\n * e.g. SelectorFlags.NOT | SelectorFlags.ELEMENT\n *\n * Example:\n * Original: \\`div.foo.bar[attr1=val1][attr2]\\`\n * Parsed: ['div', 'attr1', 'val1', 'attr2', '', SelectorFlags.CLASS, 'foo', 'bar']\n *\n * Original: 'div[attr1]:not(.foo[attr2])\n * Parsed: [\n *  'div', 'attr1', '',\n *  SelectorFlags.NOT | SelectorFlags.ATTRIBUTE 'attr2', '', SelectorFlags.CLASS, 'foo'\n * ]\n *\n * See more examples in node_selector_matcher_spec.ts\n */\ndeclare type CssSelector = (string | SelectorFlags)[];\n\n/**\n * An object literal of this type is used to represent the metadata of a constructor dependency.\n * The type itself is never referred to from generated code.\n *\n * @publicApi\n */\ndeclare type CtorDependency = {\n\t/**\n\t * If an \\`@Attribute\\` decorator is used, this represents the injected attribute's name. If the\n\t * attribute name is a dynamic expression instead of a string literal, this will be the unknown\n\t * type.\n\t */\n\tattribute?: string | unknown;\n\t/**\n\t * If \\`@Optional()\\` is used, this key is set to true.\n\t */\n\toptional?: true;\n\t/**\n\t * If \\`@Host\\` is used, this key is set to true.\n\t */\n\thost?: true;\n\t/**\n\t * If \\`@Self\\` is used, this key is set to true.\n\t */\n\tself?: true;\n\t/**\n\t * If \\`@SkipSelf\\` is used, this key is set to true.\n\t */\n\tskipSelf?: true;\n} | null;\n\n/**\n * Defines a schema that allows an NgModule to contain the following:\n * - Non-Angular elements named with dash case (\\`-\\`).\n * - Element properties named with dash case (\\`-\\`).\n * Dash case is the naming convention for custom elements.\n *\n * @publicApi\n */\nexport declare const CUSTOM_ELEMENTS_SCHEMA: SchemaMetadata;\n\n/**\n * @publicApi\n *\n * @see [Component testing scenarios](guide/testing-components-scenarios)\n * @see [Basics of testing components](guide/testing-components-basics)\n * @see [Testing utility APIs](guide/testing-utility-apis)\n */\nexport declare class DebugElement extends DebugNode {\n\tconstructor(nativeNode: Element);\n\t/**\n\t * The underlying DOM element at the root of the component.\n\t */\n\tget nativeElement(): any;\n\t/**\n\t * The element tag name, if it is an element.\n\t */\n\tget name(): string;\n\t/**\n\t *  Gets a map of property names to property values for an element.\n\t *\n\t *  This map includes:\n\t *  - Regular property bindings (e.g. \\`[id]=\"id\"\\`)\n\t *  - Host property bindings (e.g. \\`host: { '[id]': \"id\" }\\`)\n\t *  - Interpolated property bindings (e.g. \\`id=\"{{ value }}\")\n\t *\n\t *  It does not include:\n\t *  - input property bindings (e.g. \\`[myCustomInput]=\"value\"\\`)\n\t *  - attribute bindings (e.g. \\`[attr.role]=\"menu\"\\`)\n\t */\n\tget properties(): {\n\t\t[key: string]: any;\n\t};\n\t/**\n\t *  A map of attribute names to attribute values for an element.\n\t */\n\tget attributes(): {\n\t\t[key: string]: string | null;\n\t};\n\t/**\n\t * The inline styles of the DOM element.\n\t *\n\t * Will be \\`null\\` if there is no \\`style\\` property on the underlying DOM element.\n\t *\n\t * @see [ElementCSSInlineStyle](https://developer.mozilla.org/en-US/docs/Web/API/ElementCSSInlineStyle/style)\n\t */\n\tget styles(): {\n\t\t[key: string]: string | null;\n\t};\n\t/**\n\t * A map containing the class names on the element as keys.\n\t *\n\t * This map is derived from the \\`className\\` property of the DOM element.\n\t *\n\t * Note: The values of this object will always be \\`true\\`. The class key will not appear in the KV\n\t * object if it does not exist on the element.\n\t *\n\t * @see [Element.className](https://developer.mozilla.org/en-US/docs/Web/API/Element/className)\n\t */\n\tget classes(): {\n\t\t[key: string]: boolean;\n\t};\n\t/**\n\t * The \\`childNodes\\` of the DOM element as a \\`DebugNode\\` array.\n\t *\n\t * @see [Node.childNodes](https://developer.mozilla.org/en-US/docs/Web/API/Node/childNodes)\n\t */\n\tget childNodes(): DebugNode[];\n\t/**\n\t * The immediate \\`DebugElement\\` children. Walk the tree by descending through \\`children\\`.\n\t */\n\tget children(): DebugElement[];\n\t/**\n\t * @returns the first \\`DebugElement\\` that matches the predicate at any depth in the subtree.\n\t */\n\tquery(predicate: Predicate<DebugElement>): DebugElement;\n\t/**\n\t * @returns All \\`DebugElement\\` matches for the predicate at any depth in the subtree.\n\t */\n\tqueryAll(predicate: Predicate<DebugElement>): DebugElement[];\n\t/**\n\t * @returns All \\`DebugNode\\` matches for the predicate at any depth in the subtree.\n\t */\n\tqueryAllNodes(predicate: Predicate<DebugNode>): DebugNode[];\n\t/**\n\t * Triggers the event by its name if there is a corresponding listener in the element's\n\t * \\`listeners\\` collection.\n\t *\n\t * If the event lacks a listener or there's some other problem, consider\n\t * calling \\`nativeElement.dispatchEvent(eventObject)\\`.\n\t *\n\t * @param eventName The name of the event to trigger\n\t * @param eventObj The _event object_ expected by the handler\n\t *\n\t * @see [Testing components scenarios](guide/testing-components-scenarios#trigger-event-handler)\n\t */\n\ttriggerEventHandler(eventName: string, eventObj?: any): void;\n}\n\n/**\n * @publicApi\n */\nexport declare class DebugEventListener {\n\tname: string;\n\tcallback: Function;\n\tconstructor(name: string, callback: Function);\n}\n\n/**\n * @publicApi\n */\nexport declare class DebugNode {\n\t/**\n\t * The underlying DOM node.\n\t */\n\treadonly nativeNode: any;\n\tconstructor(nativeNode: Node);\n\t/**\n\t * The \\`DebugElement\\` parent. Will be \\`null\\` if this is the root element.\n\t */\n\tget parent(): DebugElement | null;\n\t/**\n\t * The host dependency injector. For example, the root element's component instance injector.\n\t */\n\tget injector(): Injector;\n\t/**\n\t * The element's own component instance, if it has one.\n\t */\n\tget componentInstance(): any;\n\t/**\n\t * An object that provides parent context for this element. Often an ancestor component instance\n\t * that governs this element.\n\t *\n\t * When an element is repeated within *ngFor, the context is an \\`NgForOf\\` whose \\`$implicit\\`\n\t * property is the value of the row instance value. For example, the \\`hero\\` in \\`*ngFor=\"let hero\n\t * of heroes\"\\`.\n\t */\n\tget context(): any;\n\t/**\n\t * The callbacks attached to the component's @Output properties and/or the element's event\n\t * properties.\n\t */\n\tget listeners(): DebugEventListener[];\n\t/**\n\t * Dictionary of objects associated with template local variables (e.g. #foo), keyed by the local\n\t * variable name.\n\t */\n\tget references(): {\n\t\t[key: string]: any;\n\t};\n\t/**\n\t * This component's injector lookup tokens. Includes the component itself plus the tokens that the\n\t * component lists in its providers metadata.\n\t */\n\tget providerTokens(): any[];\n}\n\n/**\n * A logical node which comprise into \\`LView\\`s.\n *\n */\ndeclare interface DebugNode_2 {\n\t/**\n\t * HTML representation of the node.\n\t */\n\thtml: string | null;\n\t/**\n\t * Associated \\`TNode\\`\n\t */\n\ttNode: TNode;\n\t/**\n\t * Human readable node type.\n\t */\n\ttype: string;\n\t/**\n\t * DOM native node.\n\t */\n\tnative: Node;\n\t/**\n\t * Child nodes\n\t */\n\tchildren: DebugNode_2[];\n\t/**\n\t * A list of Component/Directive types which need to be instantiated an this location.\n\t */\n\tfactories: Type<unknown>[];\n\t/**\n\t * A list of Component/Directive instances which were instantiated an this location.\n\t */\n\tinstances: unknown[];\n\t/**\n\t * NodeInjector information.\n\t */\n\tinjector: NodeInjectorDebug;\n\t/**\n\t * Injector resolution path.\n\t */\n\tinjectorResolutionPath: any;\n}\n\ndeclare const DECLARATION_COMPONENT_VIEW = 16;\n\ndeclare const DECLARATION_LCONTAINER = 17;\n\ndeclare const DECLARATION_VIEW = 15;\n\n/**\n * Provide this token to set the default currency code your application uses for\n * CurrencyPipe when there is no currency code passed into it. This is only used by\n * CurrencyPipe and has no relation to locale currency. Defaults to USD if not configured.\n *\n * See the [i18n guide](guide/i18n-common-locale-id) for more information.\n *\n * <div class=\"alert is-helpful\">\n *\n * **Deprecation notice:**\n *\n * The default currency code is currently always \\`USD\\` but this is deprecated from v9.\n *\n * **In v10 the default currency code will be taken from the current locale.**\n *\n * If you need the previous behavior then set it by creating a \\`DEFAULT_CURRENCY_CODE\\` provider in\n * your application \\`NgModule\\`:\n *\n * \\`\\`\\`ts\n * {provide: DEFAULT_CURRENCY_CODE, useValue: 'USD'}\n * \\`\\`\\`\n *\n * </div>\n *\n * @usageNotes\n * ### Example\n *\n * \\`\\`\\`typescript\n * import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n * import { AppModule } from './app/app.module';\n *\n * platformBrowserDynamic().bootstrapModule(AppModule, {\n *   providers: [{provide: DEFAULT_CURRENCY_CODE, useValue: 'EUR' }]\n * });\n * \\`\\`\\`\n *\n * @publicApi\n */\nexport declare const DEFAULT_CURRENCY_CODE: InjectionToken<string>;\n\n/**\n * @deprecated v4.0.0 - Should not be part of public API.\n * @publicApi\n */\nexport declare class DefaultIterableDiffer<V> implements IterableDiffer<V>, IterableChanges<V> {\n\treadonly length: number;\n\treadonly collection: V[] | Iterable<V> | null;\n\tprivate _linkedRecords;\n\tprivate _unlinkedRecords;\n\tprivate _previousItHead;\n\tprivate _itHead;\n\tprivate _itTail;\n\tprivate _additionsHead;\n\tprivate _additionsTail;\n\tprivate _movesHead;\n\tprivate _movesTail;\n\tprivate _removalsHead;\n\tprivate _removalsTail;\n\tprivate _identityChangesHead;\n\tprivate _identityChangesTail;\n\tprivate _trackByFn;\n\tconstructor(trackByFn?: TrackByFunction<V>);\n\tforEachItem(fn: (record: IterableChangeRecord_<V>) => void): void;\n\tforEachOperation(fn: (item: IterableChangeRecord<V>, previousIndex: number | null, currentIndex: number | null) => void): void;\n\tforEachPreviousItem(fn: (record: IterableChangeRecord_<V>) => void): void;\n\tforEachAddedItem(fn: (record: IterableChangeRecord_<V>) => void): void;\n\tforEachMovedItem(fn: (record: IterableChangeRecord_<V>) => void): void;\n\tforEachRemovedItem(fn: (record: IterableChangeRecord_<V>) => void): void;\n\tforEachIdentityChange(fn: (record: IterableChangeRecord_<V>) => void): void;\n\tdiff(collection: NgIterable<V> | null | undefined): DefaultIterableDiffer<V> | null;\n\tonDestroy(): void;\n\tcheck(collection: NgIterable<V>): boolean;\n\tget isDirty(): boolean;\n\tprivate _addToRemovals;\n}\n\n/**\n * @deprecated in v8, delete after v10. This API should be used only by generated code, and that\n * code should now use ɵɵdefineInjectable instead.\n * @publicApi\n */\nexport declare const defineInjectable: typeof ɵɵdefineInjectable;\n\ndeclare type DependencyTypeList = (ɵDirectiveType<any> | ɵComponentType<any> | PipeType<any> | Type<any>)[];\n\n/**\n * Array of destroy hooks that should be executed for a view and their directive indices.\n *\n * The array is set up as a series of number/function or number/(number|function)[]:\n * - Even indices represent the context with which hooks should be called.\n * - Odd indices are the hook functions themselves. If a value at an odd index is an array,\n *   it represents the destroy hooks of a \\`multi\\` provider where:\n *     - Even indices represent the index of the provider for which we've registered a destroy hook,\n *       inside of the \\`multi\\` provider array.\n *     - Odd indices are the destroy hook functions.\n * For example:\n * LView: \\`[0, 1, 2, AService, 4, [BService, CService, DService]]\\`\n * destroyHooks: \\`[3, AService.ngOnDestroy, 5, [0, BService.ngOnDestroy, 2, DService.ngOnDestroy]]\\`\n *\n * In the example above \\`AService\\` is a type provider with an \\`ngOnDestroy\\`, whereas \\`BService\\`,\n * \\`CService\\` and \\`DService\\` are part of a \\`multi\\` provider where only \\`BService\\` and \\`DService\\`\n * have an \\`ngOnDestroy\\` hook.\n */\ndeclare type DestroyHookData = (HookEntry | HookData)[];\n\n/**\n * Destroys the current Angular platform and all Angular applications on the page.\n * Destroys all modules and listeners registered with the platform.\n *\n * @publicApi\n */\nexport declare function destroyPlatform(): void;\n\n/**\n * Directive decorator and metadata.\n *\n * @Annotation\n * @publicApi\n */\nexport declare interface Directive {\n\t/**\n\t * The CSS selector that identifies this directive in a template\n\t * and triggers instantiation of the directive.\n\t *\n\t * Declare as one of the following:\n\t *\n\t * - \\`element-name\\`: Select by element name.\n\t * - \\`.class\\`: Select by class name.\n\t * - \\`[attribute]\\`: Select by attribute name.\n\t * - \\`[attribute=value]\\`: Select by attribute name and value.\n\t * - \\`:not(sub_selector)\\`: Select only if the element does not match the \\`sub_selector\\`.\n\t * - \\`selector1, selector2\\`: Select if either \\`selector1\\` or \\`selector2\\` matches.\n\t *\n\t * Angular only allows directives to apply on CSS selectors that do not cross\n\t * element boundaries.\n\t *\n\t * For the following template HTML, a directive with an \\`input[type=text]\\` selector,\n\t * would be instantiated only on the \\`<input type=\"text\">\\` element.\n\t *\n\t * \\`\\`\\`html\n\t * <form>\n\t *   <input type=\"text\">\n\t *   <input type=\"radio\">\n\t * <form>\n\t * \\`\\`\\`\n\t *\n\t */\n\tselector?: string;\n\t/**\n\t * Enumerates the set of data-bound input properties for a directive\n\t *\n\t * Angular automatically updates input properties during change detection.\n\t * The \\`inputs\\` property defines a set of \\`directiveProperty\\` to \\`bindingProperty\\`\n\t * configuration:\n\t *\n\t * - \\`directiveProperty\\` specifies the component property where the value is written.\n\t * - \\`bindingProperty\\` specifies the DOM property where the value is read from.\n\t *\n\t * When \\`bindingProperty\\` is not provided, it is assumed to be equal to \\`directiveProperty\\`.\n\t *\n\t * @usageNotes\n\t *\n\t * The following example creates a component with two data-bound properties.\n\t *\n\t * \\`\\`\\`typescript\n\t * @Component({\n\t *   selector: 'bank-account',\n\t *   inputs: ['bankName', 'id: account-id'],\n\t *   template: \\`\n\t *     Bank Name: {{bankName}}\n\t *     Account Id: {{id}}\n\t *   \\`\n\t * })\n\t * class BankAccount {\n\t *   bankName: string;\n\t *   id: string;\n\t * }\n\t * \\`\\`\\`\n\t *\n\t */\n\tinputs?: string[];\n\t/**\n\t * Enumerates the set of event-bound output properties.\n\t *\n\t * When an output property emits an event, an event handler attached to that event\n\t * in the template is invoked.\n\t *\n\t * The \\`outputs\\` property defines a set of \\`directiveProperty\\` to \\`bindingProperty\\`\n\t * configuration:\n\t *\n\t * - \\`directiveProperty\\` specifies the component property that emits events.\n\t * - \\`bindingProperty\\` specifies the DOM property the event handler is attached to.\n\t *\n\t * @usageNotes\n\t *\n\t * \\`\\`\\`typescript\n\t * @Component({\n\t *   selector: 'child-dir',\n\t *   outputs: [ 'bankNameChange' ]\n\t *   template: \\`<input (input)=\"bankNameChange.emit($event.target.value)\" />\\`\n\t * })\n\t * class ChildDir {\n\t *  bankNameChange: EventEmitter<string> = new EventEmitter<string>();\n\t * }\n\t *\n\t * @Component({\n\t *   selector: 'main',\n\t *   template: \\`\n\t *     {{ bankName }} <child-dir (bankNameChange)=\"onBankNameChange($event)\"></child-dir>\n\t *   \\`\n\t * })\n\t * class MainComponent {\n\t *  bankName: string;\n\t *\n\t *   onBankNameChange(bankName: string) {\n\t *     this.bankName = bankName;\n\t *   }\n\t * }\n\t * \\`\\`\\`\n\t *\n\t */\n\toutputs?: string[];\n\t/**\n\t * Configures the [injector](guide/glossary#injector) of this\n\t * directive or component with a [token](guide/glossary#di-token)\n\t * that maps to a [provider](guide/glossary#provider) of a dependency.\n\t */\n\tproviders?: Provider[];\n\t/**\n\t * Defines the name that can be used in the template to assign this directive to a variable.\n\t *\n\t * @usageNotes\n\t *\n\t * \\`\\`\\`ts\n\t * @Directive({\n\t *   selector: 'child-dir',\n\t *   exportAs: 'child'\n\t * })\n\t * class ChildDir {\n\t * }\n\t *\n\t * @Component({\n\t *   selector: 'main',\n\t *   template: \\`<child-dir #c=\"child\"></child-dir>\\`\n\t * })\n\t * class MainComponent {\n\t * }\n\t * \\`\\`\\`\n\t *\n\t */\n\texportAs?: string;\n\t/**\n\t * Configures the queries that will be injected into the directive.\n\t *\n\t * Content queries are set before the \\`ngAfterContentInit\\` callback is called.\n\t * View queries are set before the \\`ngAfterViewInit\\` callback is called.\n\t *\n\t * @usageNotes\n\t *\n\t * The following example shows how queries are defined\n\t * and when their results are available in lifecycle hooks:\n\t *\n\t * \\`\\`\\`ts\n\t * @Component({\n\t *   selector: 'someDir',\n\t *   queries: {\n\t *     contentChildren: new ContentChildren(ChildDirective),\n\t *     viewChildren: new ViewChildren(ChildDirective)\n\t *   },\n\t *   template: '<child-directive></child-directive>'\n\t * })\n\t * class SomeDir {\n\t *   contentChildren: QueryList<ChildDirective>,\n\t *   viewChildren: QueryList<ChildDirective>\n\t *\n\t *   ngAfterContentInit() {\n\t *     // contentChildren is set\n\t *   }\n\t *\n\t *   ngAfterViewInit() {\n\t *     // viewChildren is set\n\t *   }\n\t * }\n\t * \\`\\`\\`\n\t *\n\t * @Annotation\n\t */\n\tqueries?: {\n\t\t[key: string]: any;\n\t};\n\t/**\n\t * Maps class properties to host element bindings for properties,\n\t * attributes, and events, using a set of key-value pairs.\n\t *\n\t * Angular automatically checks host property bindings during change detection.\n\t * If a binding changes, Angular updates the directive's host element.\n\t *\n\t * When the key is a property of the host element, the property value is\n\t * the propagated to the specified DOM property.\n\t *\n\t * When the key is a static attribute in the DOM, the attribute value\n\t * is propagated to the specified property in the host element.\n\t *\n\t * For event handling:\n\t * - The key is the DOM event that the directive listens to.\n\t * To listen to global events, add the target to the event name.\n\t * The target can be \\`window\\`, \\`document\\` or \\`body\\`.\n\t * - The value is the statement to execute when the event occurs. If the\n\t * statement evaluates to \\`false\\`, then \\`preventDefault\\` is applied on the DOM\n\t * event. A handler method can refer to the \\`$event\\` local variable.\n\t *\n\t */\n\thost?: {\n\t\t[key: string]: string;\n\t};\n\t/**\n\t * When present, this directive/component is ignored by the AOT compiler.\n\t * It remains in distributed code, and the JIT compiler attempts to compile it\n\t * at run time, in the browser.\n\t * To ensure the correct behavior, the app must import \\`@angular/compiler\\`.\n\t */\n\tjit?: true;\n\t/**\n\t * Angular directives marked as \\`standalone\\` do not need to be declared in an NgModule. Such\n\t * directives don't depend on any \"intermediate context\" of an NgModule (ex. configured\n\t * providers).\n\t *\n\t * More information about standalone components, directives, and pipes can be found in [this\n\t * guide](guide/standalone-components).\n\t *\n\t * @developerPreview\n\t */\n\tstandalone?: boolean;\n}\n\n/**\n * Type of the Directive metadata.\n *\n * @publicApi\n */\nexport declare const Directive: DirectiveDecorator;\n\n/**\n * Type of the Directive decorator / constructor function.\n * @publicApi\n */\nexport declare interface DirectiveDecorator {\n\t/**\n\t * Decorator that marks a class as an Angular directive.\n\t * You can define your own directives to attach custom behavior to elements in the DOM.\n\t *\n\t * The options provide configuration metadata that determines\n\t * how the directive should be processed, instantiated and used at\n\t * runtime.\n\t *\n\t * Directive classes, like component classes, can implement\n\t * [life-cycle hooks](guide/lifecycle-hooks) to influence their configuration and behavior.\n\t *\n\t *\n\t * @usageNotes\n\t * To define a directive, mark the class with the decorator and provide metadata.\n\t *\n\t * \\`\\`\\`ts\n\t * import {Directive} from '@angular/core';\n\t *\n\t * @Directive({\n\t *   selector: 'my-directive',\n\t * })\n\t * export class MyDirective {\n\t * ...\n\t * }\n\t * \\`\\`\\`\n\t *\n\t * ### Declaring directives\n\t *\n\t * In order to make a directive available to other components in your application, you should do\n\t * one of the following:\n\t *  - either mark the directive as [standalone](guide/standalone-components),\n\t *  - or declare it in an NgModule by adding it to the \\`declarations\\` and \\`exports\\` fields.\n\t *\n\t * ** Marking a directive as standalone **\n\t *\n\t * You can add the \\`standalone: true\\` flag to the Directive decorator metadata to declare it as\n\t * [standalone](guide/standalone-components):\n\t *\n\t * \\`\\`\\`ts\n\t * @Directive({\n\t *   standalone: true,\n\t *   selector: 'my-directive',\n\t * })\n\t * class MyDirective {}\n\t * \\`\\`\\`\n\t *\n\t * When marking a directive as standalone, please make sure that the directive is not already\n\t * declared in an NgModule.\n\t *\n\t *\n\t * ** Declaring a directive in an NgModule **\n\t *\n\t * Another approach is to declare a directive in an NgModule:\n\t *\n\t * \\`\\`\\`ts\n\t * @Directive({\n\t *   selector: 'my-directive',\n\t * })\n\t * class MyDirective {}\n\t *\n\t * @NgModule({\n\t *   declarations: [MyDirective, SomeComponent],\n\t *   exports: [MyDirective], // making it available outside of this module\n\t * })\n\t * class SomeNgModule {}\n\t * \\`\\`\\`\n\t *\n\t * When declaring a directive in an NgModule, please make sure that:\n\t *  - the directive is declared in exactly one NgModule.\n\t *  - the directive is not standalone.\n\t *  - you do not re-declare a directive imported from another module.\n\t *  - the directive is included into the \\`exports\\` field as well if you want this directive to be\n\t *    accessible for components outside of the NgModule.\n\t *\n\t *\n\t * @Annotation\n\t */\n\t(obj?: Directive): TypeDecorator;\n\t/**\n\t * See the \\`Directive\\` decorator.\n\t */\n\tnew(obj?: Directive): Directive;\n}\n\ndeclare interface DirectiveDefFeature {\n\t<T>(directiveDef: ɵDirectiveDef<T>): void;\n\t/**\n\t * Marks a feature as something that {@link InheritDefinitionFeature} will execute\n\t * during inheritance.\n\t *\n\t * NOTE: DO NOT SET IN ROOT OF MODULE! Doing so will result in tree-shakers/bundlers\n\t * identifying the change as a side effect, and the feature will be included in\n\t * every bundle.\n\t */\n\tngInherit?: true;\n}\n\ndeclare type DirectiveDefList = (ɵDirectiveDef<any> | ɵComponentDef<any>)[];\n\n/**\n * Type used for directiveDefs on component definition.\n *\n * The function is necessary to be able to support forward declarations.\n */\ndeclare type DirectiveDefListOrFactory = (() => DirectiveDefList) | DirectiveDefList;\n\n/**\n * @description\n * Hook for manual bootstrapping of the application instead of using \\`bootstrap\\` array in @NgModule\n * annotation. This hook is invoked only when the \\`bootstrap\\` array is empty or not provided.\n *\n * Reference to the current application is provided as a parameter.\n *\n * See [\"Bootstrapping\"](guide/bootstrapping) and [\"Entry components\"](guide/entry-components).\n *\n * @usageNotes\n * The example below uses \\`ApplicationRef.bootstrap()\\` to render the\n * \\`AppComponent\\` on the page.\n *\n * \\`\\`\\`typescript\n * class AppModule implements DoBootstrap {\n *   ngDoBootstrap(appRef: ApplicationRef) {\n *     appRef.bootstrap(AppComponent); // Or some other component\n *   }\n * }\n * \\`\\`\\`\n *\n * @publicApi\n */\nexport declare interface DoBootstrap {\n\tngDoBootstrap(appRef: ApplicationRef): void;\n}\n\n/**\n * A lifecycle hook that invokes a custom change-detection function for a directive,\n * in addition to the check performed by the default change-detector.\n *\n * The default change-detection algorithm looks for differences by comparing\n * bound-property values by reference across change detection runs. You can use this\n * hook to check for and respond to changes by some other means.\n *\n * When the default change detector detects changes, it invokes \\`ngOnChanges()\\` if supplied,\n * regardless of whether you perform additional change detection.\n * Typically, you should not use both \\`DoCheck\\` and \\`OnChanges\\` to respond to\n * changes on the same input.\n *\n * @see \\`OnChanges\\`\n * @see [Lifecycle hooks guide](guide/lifecycle-hooks)\n *\n * @usageNotes\n * The following snippet shows how a component can implement this interface\n * to invoke it own change-detection cycle.\n *\n * {@example core/ts/metadata/lifecycle_hooks_spec.ts region='DoCheck'}\n *\n * For a more complete example and discussion, see\n * [Defining custom change detection](guide/lifecycle-hooks#defining-custom-change-detection).\n *\n * @publicApi\n */\nexport declare interface DoCheck {\n\t/**\n\t * A callback method that performs change-detection, invoked\n\t * after the default change-detector runs.\n\t * See \\`KeyValueDiffers\\` and \\`IterableDiffers\\` for implementing\n\t * custom change checking for collections.\n\t *\n\t */\n\tngDoCheck(): void;\n}\n\n/**\n * Marks that the next string is an element name.\n *\n * See \\`I18nMutateOpCodes\\` documentation.\n */\ndeclare const ELEMENT_MARKER: ELEMENT_MARKER;\n\ndeclare interface ELEMENT_MARKER {\n\tmarker: 'element';\n}\n\n/**\n * A wrapper around a native element inside of a View.\n *\n * An \\`ElementRef\\` is backed by a render-specific element. In the browser, this is usually a DOM\n * element.\n *\n * @security Permitting direct access to the DOM can make your application more vulnerable to\n * XSS attacks. Carefully review any use of \\`ElementRef\\` in your code. For more detail, see the\n * [Security Guide](https://g.co/ng/security).\n *\n * @publicApi\n */\nexport declare class ElementRef<T = any> {\n\t/**\n\t * The underlying native element or \\`null\\` if direct access to native elements is not supported\n\t * (e.g. when the application runs in a web worker).\n\t *\n\t * <div class=\"callout is-critical\">\n\t *   <header>Use with caution</header>\n\t *   <p>\n\t *    Use this API as the last resort when direct access to DOM is needed. Use templating and\n\t *    data-binding provided by Angular instead. Alternatively you can take a look at {@link\n\t * Renderer2}\n\t *    which provides API that can safely be used even when direct access to native elements is not\n\t *    supported.\n\t *   </p>\n\t *   <p>\n\t *    Relying on direct DOM access creates tight coupling between your application and rendering\n\t *    layers which will make it impossible to separate the two and deploy your application into a\n\t *    web worker.\n\t *   </p>\n\t * </div>\n\t *\n\t */\n\tnativeElement: T;\n\tconstructor(nativeElement: T);\n}\n\ndeclare const EMBEDDED_VIEW_INJECTOR = 21;\n\n/**\n * Represents an Angular [view](guide/glossary#view) in a view container.\n * An [embedded view](guide/glossary#view-tree) can be referenced from a component\n * other than the hosting component whose template defines it, or it can be defined\n * independently by a \\`TemplateRef\\`.\n *\n * Properties of elements in a view can change, but the structure (number and order) of elements in\n * a view cannot. Change the structure of elements by inserting, moving, or\n * removing nested views in a view container.\n *\n * @see \\`ViewContainerRef\\`\n *\n * @usageNotes\n *\n * The following template breaks down into two separate \\`TemplateRef\\` instances,\n * an outer one and an inner one.\n *\n * \\`\\`\\`\n * Count: {{items.length}}\n * <ul>\n *   <li *ngFor=\"let  item of items\">{{item}}</li>\n * </ul>\n * \\`\\`\\`\n *\n * This is the outer \\`TemplateRef\\`:\n *\n * \\`\\`\\`\n * Count: {{items.length}}\n * <ul>\n *   <ng-template ngFor let-item [ngForOf]=\"items\"></ng-template>\n * </ul>\n * \\`\\`\\`\n *\n * This is the inner \\`TemplateRef\\`:\n *\n * \\`\\`\\`\n *   <li>{{item}}</li>\n * \\`\\`\\`\n *\n * The outer and inner \\`TemplateRef\\` instances are assembled into views as follows:\n *\n * \\`\\`\\`\n * <!-- ViewRef: outer-0 -->\n * Count: 2\n * <ul>\n *   <ng-template view-container-ref></ng-template>\n *   <!-- ViewRef: inner-1 --><li>first</li><!-- /ViewRef: inner-1 -->\n *   <!-- ViewRef: inner-2 --><li>second</li><!-- /ViewRef: inner-2 -->\n * </ul>\n * <!-- /ViewRef: outer-0 -->\n * \\`\\`\\`\n * @publicApi\n */\nexport declare abstract class EmbeddedViewRef<C> extends ViewRef {\n\t/**\n\t * The context for this view, inherited from the anchor element.\n\t */\n\tabstract context: C;\n\t/**\n\t * The root nodes for this embedded view.\n\t */\n\tabstract get rootNodes(): any[];\n}\n\n/**\n * Disable Angular's development mode, which turns off assertions and other\n * checks within the framework.\n *\n * One important assertion this disables verifies that a change detection pass\n * does not result in additional changes to any bindings (also known as\n * unidirectional data flow).\n *\n * @publicApi\n */\nexport declare function enableProdMode(): void;\n\n/**\n * A multi-provider token for initialization functions that will run upon construction of an\n * environment injector.\n *\n * @publicApi\n */\nexport declare const ENVIRONMENT_INITIALIZER: InjectionToken<() => void>;\n\n/**\n * An \\`Injector\\` that's part of the environment injector hierarchy, which exists outside of the\n * component tree.\n *\n * @developerPreview\n */\nexport declare abstract class EnvironmentInjector implements Injector {\n\t/**\n\t * Retrieves an instance from the injector based on the provided token.\n\t * @returns The instance from the injector if defined, otherwise the \\`notFoundValue\\`.\n\t * @throws When the \\`notFoundValue\\` is \\`undefined\\` or \\`Injector.THROW_IF_NOT_FOUND\\`.\n\t */\n\tabstract get<T>(token: ProviderToken<T>, notFoundValue?: T, flags?: InjectFlags): T;\n\t/**\n\t * @deprecated from v4.0.0 use ProviderToken<T>\n\t * @suppress {duplicate}\n\t */\n\tabstract get(token: any, notFoundValue?: any): any;\n\t/**\n\t * Runs the given function in the context of this \\`EnvironmentInjector\\`.\n\t *\n\t * Within the function's stack frame, \\`inject\\` can be used to inject dependencies from this\n\t * injector. Note that \\`inject\\` is only usable synchronously, and cannot be used in any\n\t * asynchronous callbacks or after any \\`await\\` points.\n\t *\n\t * @param fn the closure to be run in the context of this injector\n\t * @returns the return value of the function, if any\n\t */\n\tabstract runInContext<ReturnT>(fn: () => ReturnT): ReturnT;\n\tabstract destroy(): void;\n}\n\n\n/**\n * Provides a hook for centralized exception handling.\n *\n * The default implementation of \\`ErrorHandler\\` prints error messages to the \\`console\\`. To\n * intercept error handling, write a custom exception handler that replaces this default as\n * appropriate for your app.\n *\n * @usageNotes\n * ### Example\n *\n * \\`\\`\\`\n * class MyErrorHandler implements ErrorHandler {\n *   handleError(error) {\n *     // do something with the exception\n *   }\n * }\n *\n * @NgModule({\n *   providers: [{provide: ErrorHandler, useClass: MyErrorHandler}]\n * })\n * class MyModule {}\n * \\`\\`\\`\n *\n * @publicApi\n */\nexport declare class ErrorHandler {\n\thandleError(error: any): void;\n}\n\n/**\n * Use in components with the \\`@Output\\` directive to emit custom events\n * synchronously or asynchronously, and register handlers for those events\n * by subscribing to an instance.\n *\n * @usageNotes\n *\n * Extends\n * [RxJS \\`Subject\\`](https://rxjs.dev/api/index/class/Subject)\n * for Angular by adding the \\`emit()\\` method.\n *\n * In the following example, a component defines two output properties\n * that create event emitters. When the title is clicked, the emitter\n * emits an open or close event to toggle the current visibility state.\n *\n * \\`\\`\\`html\n * @Component({\n *   selector: 'zippy',\n *   template: \\`\n *   <div class=\"zippy\">\n *     <div (click)=\"toggle()\">Toggle</div>\n *     <div [hidden]=\"!visible\">\n *       <ng-content></ng-content>\n *     </div>\n *  </div>\\`})\n * export class Zippy {\n *   visible: boolean = true;\n *   @Output() open: EventEmitter<any> = new EventEmitter();\n *   @Output() close: EventEmitter<any> = new EventEmitter();\n *\n *   toggle() {\n *     this.visible = !this.visible;\n *     if (this.visible) {\n *       this.open.emit(null);\n *     } else {\n *       this.close.emit(null);\n *     }\n *   }\n * }\n * \\`\\`\\`\n *\n * Access the event object with the \\`$event\\` argument passed to the output event\n * handler:\n *\n * \\`\\`\\`html\n * <zippy (open)=\"onOpen($event)\" (close)=\"onClose($event)\"></zippy>\n * \\`\\`\\`\n *\n * @see [Observables in Angular](guide/observables-in-angular)\n * @publicApi\n */\nexport declare interface EventEmitter<T> extends Subject<T> {\n\t/**\n\t * Creates an instance of this class that can\n\t * deliver events synchronously or asynchronously.\n\t *\n\t * @param [isAsync=false] When true, deliver events asynchronously.\n\t *\n\t */\n\tnew(isAsync?: boolean): EventEmitter<T>;\n\t/**\n\t * Emits an event containing a given value.\n\t * @param value The value to emit.\n\t */\n\temit(value?: T): void;\n\t/**\n\t * Registers handlers for events emitted by this instance.\n\t * @param next When supplied, a custom handler for emitted events.\n\t * @param error When supplied, a custom handler for an error notification from this emitter.\n\t * @param complete When supplied, a custom handler for a completion notification from this\n\t *     emitter.\n\t */\n\tsubscribe(next?: (value: T) => void, error?: (error: any) => void, complete?: () => void): Subscription;\n\t/**\n\t * Registers handlers for events emitted by this instance.\n\t * @param observerOrNext When supplied, a custom handler for emitted events, or an observer\n\t *     object.\n\t * @param error When supplied, a custom handler for an error notification from this emitter.\n\t * @param complete When supplied, a custom handler for a completion notification from this\n\t *     emitter.\n\t */\n\tsubscribe(observerOrNext?: any, error?: any, complete?: any): Subscription;\n}\n\n/**\n * @publicApi\n */\nexport declare const EventEmitter: {\n\tnew(isAsync?: boolean): EventEmitter<any>;\n\tnew <T>(isAsync?: boolean): EventEmitter<T>;\n\treadonly prototype: EventEmitter<any>;\n};\n\n/**\n * Configures the \\`Injector\\` to return a value of another \\`useExisting\\` token.\n *\n * @see [\"Dependency Injection Guide\"](guide/dependency-injection).\n *\n * @usageNotes\n *\n * {@example core/di/ts/provider_spec.ts region='ExistingProvider'}\n *\n * ### Multi-value example\n *\n * {@example core/di/ts/provider_spec.ts region='MultiProviderAspect'}\n *\n * @publicApi\n */\nexport declare interface ExistingProvider extends ExistingSansProvider {\n\t/**\n\t * An injection token. Typically an instance of \\`Type\\` or \\`InjectionToken\\`, but can be \\`any\\`.\n\t */\n\tprovide: any;\n\t/**\n\t * When true, injector returns an array of instances. This is useful to allow multiple\n\t * providers spread across many files to provide configuration information to a common token.\n\t */\n\tmulti?: boolean;\n}\n\n/**\n * Configures the \\`Injector\\` to return a value of another \\`useExisting\\` token.\n *\n * @see \\`ExistingProvider\\`\n * @see [\"Dependency Injection Guide\"](guide/dependency-injection).\n *\n * @publicApi\n */\nexport declare interface ExistingSansProvider {\n\t/**\n\t * Existing \\`token\\` to return. (Equivalent to \\`injector.get(useExisting)\\`)\n\t */\n\tuseExisting: any;\n}\n\n/**\n * Definition of what a factory function should look like.\n */\ndeclare type FactoryFn<T> = {\n\t/**\n\t * Subclasses without an explicit constructor call through to the factory of their base\n\t * definition, providing it with their own constructor to instantiate.\n\t */\n\t<U extends T>(t?: Type<U>): U;\n\t/**\n\t * If no constructor to instantiate is provided, an instance of type T itself is created.\n\t */\n\t(t?: undefined): T;\n};\n\n/**\n * Configures the \\`Injector\\` to return a value by invoking a \\`useFactory\\` function.\n * @see [\"Dependency Injection Guide\"](guide/dependency-injection).\n *\n * @usageNotes\n *\n * {@example core/di/ts/provider_spec.ts region='FactoryProvider'}\n *\n * Dependencies can also be marked as optional:\n *\n * {@example core/di/ts/provider_spec.ts region='FactoryProviderOptionalDeps'}\n *\n * ### Multi-value example\n *\n * {@example core/di/ts/provider_spec.ts region='MultiProviderAspect'}\n *\n * @publicApi\n */\nexport declare interface FactoryProvider extends FactorySansProvider {\n\t/**\n\t * An injection token. (Typically an instance of \\`Type\\` or \\`InjectionToken\\`, but can be \\`any\\`).\n\t */\n\tprovide: any;\n\t/**\n\t * When true, injector returns an array of instances. This is useful to allow multiple\n\t * providers spread across many files to provide configuration information to a common token.\n\t */\n\tmulti?: boolean;\n}\n\n/**\n * Configures the \\`Injector\\` to return a value by invoking a \\`useFactory\\` function.\n *\n * @see \\`FactoryProvider\\`\n * @see [\"Dependency Injection Guide\"](guide/dependency-injection).\n *\n * @publicApi\n */\nexport declare interface FactorySansProvider {\n\t/**\n\t * A function to invoke to create a value for this \\`token\\`. The function is invoked with\n\t * resolved values of \\`token\\`s in the \\`deps\\` field.\n\t */\n\tuseFactory: Function;\n\t/**\n\t * A list of \\`token\\`s to be resolved by the injector. The list of values is then\n\t * used as arguments to the \\`useFactory\\` function.\n\t */\n\tdeps?: any[];\n}\n\ndeclare const FLAGS = 2;\n\n/**\n * Allows to refer to references which are not yet defined.\n *\n * For instance, \\`forwardRef\\` is used when the \\`token\\` which we need to refer to for the purposes of\n * DI is declared, but not yet defined. It is also used when the \\`token\\` which we use when creating\n * a query is not yet defined.\n *\n * @usageNotes\n * ### Example\n * {@example core/di/ts/forward_ref/forward_ref_spec.ts region='forward_ref'}\n * @publicApi\n */\nexport declare function forwardRef(forwardRefFn: ForwardRefFn): Type<any>;\n\n/**\n * An interface that a function passed into {@link forwardRef} has to implement.\n *\n * @usageNotes\n * ### Example\n *\n * {@example core/di/ts/forward_ref/forward_ref_spec.ts region='forward_ref_fn'}\n * @publicApi\n */\nexport declare interface ForwardRefFn {\n\t(): any;\n}\n\n/**\n * @publicApi\n */\ndeclare function getDebugNode(nativeNode: any): DebugNode | null;\nexport { getDebugNode }\nexport { getDebugNode as ɵgetDebugNode }\n\n/**\n * Returns the NgModuleFactory with the given id (specified using [@NgModule.id\n * field](api/core/NgModule#id)), if it exists and has been loaded. Factories for NgModules that do\n * not specify an \\`id\\` cannot be retrieved. Throws if an NgModule cannot be found.\n * @publicApi\n * @deprecated Use \\`getNgModuleById\\` instead.\n */\nexport declare function getModuleFactory(id: string): NgModuleFactory<any>;\n\n/**\n * Returns the NgModule class with the given id (specified using [@NgModule.id\n * field](api/core/NgModule#id)), if it exists and has been loaded. Classes for NgModules that do\n * not specify an \\`id\\` cannot be retrieved. Throws if an NgModule cannot be found.\n * @publicApi\n */\nexport declare function getNgModuleById<T>(id: string): Type<T>;\n\n/**\n * Returns the current platform.\n *\n * @publicApi\n */\nexport declare function getPlatform(): PlatformRef | null;\n\n/**\n * Adapter interface for retrieving the \\`Testability\\` service associated for a\n * particular context.\n *\n * @publicApi\n */\nexport declare interface GetTestability {\n\taddToWindow(registry: TestabilityRegistry): void;\n\tfindTestabilityInTree(registry: TestabilityRegistry, elem: any, findInAncestors: boolean): Testability | null;\n}\n\n/**\n * The goal here is to make sure that the browser DOM API is the Renderer.\n * We do this by defining a subset of DOM API to be the renderer and then\n * use that at runtime for rendering.\n *\n * At runtime we can then use the DOM api directly, in server or web-worker\n * it will be easy to implement such API.\n */\ndeclare type GlobalTargetName = 'document' | 'window' | 'body';\n\ndeclare type GlobalTargetResolver = (element: any) => EventTarget;\n\n/**\n * Flag to signify that this \\`LContainer\\` may have transplanted views which need to be change\n * detected. (see: \\`LView[DECLARATION_COMPONENT_VIEW])\\`.\n *\n * This flag, once set, is never unset for the \\`LContainer\\`. This means that when unset we can skip\n * a lot of work in \\`refreshEmbeddedViews\\`. But when set we still need to verify\n * that the \\`MOVED_VIEWS\\` are transplanted and on-push.\n */\ndeclare const HAS_TRANSPLANTED_VIEWS = 2;\n\n/**\n * Array of hooks that should be executed for a view and their directive indices.\n *\n * For each node of the view, the following data is stored:\n * 1) Node index (optional)\n * 2) A series of number/function pairs where:\n *  - even indices are directive indices\n *  - odd indices are hook functions\n *\n * Special cases:\n *  - a negative directive index flags an init hook (ngOnInit, ngAfterContentInit, ngAfterViewInit)\n */\ndeclare type HookData = HookEntry[];\n\n/**\n * Information necessary to call a hook. E.g. the callback that\n * needs to invoked and the index at which to find its context.\n */\ndeclare type HookEntry = number | HookFn;\n\n/** Single hook callback function. */\ndeclare type HookFn = () => void;\n\ndeclare const HOST = 0;\n\n/**\n * Type of the Host metadata.\n *\n * @publicApi\n */\nexport declare interface Host {\n}\n\n/**\n * Host decorator and metadata.\n *\n * @Annotation\n * @publicApi\n */\nexport declare const Host: HostDecorator;\n\n/**\n * Type of the HostBinding metadata.\n *\n * @publicApi\n */\nexport declare interface HostBinding {\n\t/**\n\t * The DOM property that is bound to a data property.\n\t */\n\thostPropertyName?: string;\n}\n\n/**\n * @Annotation\n * @publicApi\n */\nexport declare const HostBinding: HostBindingDecorator;\n\n/**\n * Type of the HostBinding decorator / constructor function.\n *\n * @publicApi\n */\nexport declare interface HostBindingDecorator {\n\t/**\n\t * Decorator that marks a DOM property as a host-binding property and supplies configuration\n\t * metadata.\n\t * Angular automatically checks host property bindings during change detection, and\n\t * if a binding changes it updates the host element of the directive.\n\t *\n\t * @usageNotes\n\t *\n\t * The following example creates a directive that sets the \\`valid\\` and \\`invalid\\`\n\t * properties on the DOM element that has an \\`ngModel\\` directive on it.\n\t *\n\t * \\`\\`\\`typescript\n\t * @Directive({selector: '[ngModel]'})\n\t * class NgModelStatus {\n\t *   constructor(public control: NgModel) {}\n\t *   @HostBinding('class.valid') get valid() { return this.control.valid; }\n\t *   @HostBinding('class.invalid') get invalid() { return this.control.invalid; }\n\t * }\n\t *\n\t * @Component({\n\t *   selector: 'app',\n\t *   template: \\`<input [(ngModel)]=\"prop\">\\`,\n\t * })\n\t * class App {\n\t *   prop;\n\t * }\n\t * \\`\\`\\`\n\t *\n\t */\n\t(hostPropertyName?: string): any;\n\tnew(hostPropertyName?: string): any;\n}\n\n/**\n * Stores a set of OpCodes to process \\`HostBindingsFunction\\` associated with a current view.\n *\n * In order to invoke \\`HostBindingsFunction\\` we need:\n * 1. 'elementIdx\\`: Index to the element associated with the \\`HostBindingsFunction\\`.\n * 2. 'directiveIdx\\`: Index to the directive associated with the \\`HostBindingsFunction\\`. (This will\n *    become the context for the \\`HostBindingsFunction\\` invocation.)\n * 3. \\`bindingRootIdx\\`: Location where the bindings for the \\`HostBindingsFunction\\` start. Internally\n *    \\`HostBindingsFunction\\` binding indexes start from \\`0\\` so we need to add \\`bindingRootIdx\\` to\n *    it.\n * 4. \\`HostBindingsFunction\\`: A host binding function to execute.\n *\n * The above information needs to be encoded into the \\`HostBindingOpCodes\\` in an efficient manner.\n *\n * 1. \\`elementIdx\\` is encoded into the \\`HostBindingOpCodes\\` as \\`~elementIdx\\` (so a negative number);\n * 2. \\`directiveIdx\\`\n * 3. \\`bindingRootIdx\\`\n * 4. \\`HostBindingsFunction\\` is passed in as is.\n *\n * The \\`HostBindingOpCodes\\` array contains:\n * - negative number to select the element index.\n * - followed by 1 or more of:\n *    - a number to select the directive index\n *    - a number to select the bindingRoot index\n *    - and a function to invoke.\n *\n * ## Example\n *\n * \\`\\`\\`\n * const hostBindingOpCodes = [\n *   ~30,                               // Select element 30\n *   40, 45, MyDir.ɵdir.hostBindings    // Invoke host bindings on MyDir on element 30;\n *                                      // directiveIdx = 40; bindingRootIdx = 45;\n *   50, 55, OtherDir.ɵdir.hostBindings // Invoke host bindings on OtherDire on element 30\n *                                      // directiveIdx = 50; bindingRootIdx = 55;\n * ]\n * \\`\\`\\`\n *\n * ## Pseudocode\n * \\`\\`\\`\n * const hostBindingOpCodes = tView.hostBindingOpCodes;\n * if (hostBindingOpCodes === null) return;\n * for (let i = 0; i < hostBindingOpCodes.length; i++) {\n *   const opCode = hostBindingOpCodes[i] as number;\n *   if (opCode < 0) {\n *     // Negative numbers are element indexes.\n *     setSelectedIndex(~opCode);\n *   } else {\n *     // Positive numbers are NumberTuple which store bindingRootIndex and directiveIndex.\n *     const directiveIdx = opCode;\n *     const bindingRootIndx = hostBindingOpCodes[++i] as number;\n *     const hostBindingFn = hostBindingOpCodes[++i] as HostBindingsFunction<any>;\n *     setBindingRootForHostBindings(bindingRootIndx, directiveIdx);\n *     const context = lView[directiveIdx];\n *     hostBindingFn(RenderFlags.Update, context);\n *   }\n * }\n * \\`\\`\\`\n *\n */\ndeclare interface HostBindingOpCodes extends Array<number | HostBindingsFunction<any>> {\n\t__brand__: 'HostBindingOpCodes';\n\tdebug?: string[];\n}\n\ndeclare type HostBindingsFunction<T> = <U extends T>(rf: ɵRenderFlags, ctx: U) => void;\n\n/**\n * Type of the \\`Host\\` decorator / constructor function.\n *\n * @publicApi\n */\nexport declare interface HostDecorator {\n\t/**\n\t * Parameter decorator on a view-provider parameter of a class constructor\n\t * that tells the DI framework to resolve the view by checking injectors of child\n\t * elements, and stop when reaching the host element of the current component.\n\t *\n\t * @usageNotes\n\t *\n\t * The following shows use with the \\`@Optional\\` decorator, and allows for a \\`null\\` result.\n\t *\n\t * <code-example path=\"core/di/ts/metadata_spec.ts\" region=\"Host\">\n\t * </code-example>\n\t *\n\t * For an extended example, see [\"Dependency Injection\n\t * Guide\"](guide/dependency-injection-in-action#optional).\n\t */\n\t(): any;\n\tnew(): Host;\n}\n\n/**\n * Type of the HostListener metadata.\n *\n * @publicApi\n */\nexport declare interface HostListener {\n\t/**\n\t * The DOM event to listen for.\n\t */\n\teventName?: string;\n\t/**\n\t * A set of arguments to pass to the handler method when the event occurs.\n\t */\n\targs?: string[];\n}\n\n/**\n * Decorator that binds a DOM event to a host listener and supplies configuration metadata.\n * Angular invokes the supplied handler method when the host element emits the specified event,\n * and updates the bound element with the result.\n *\n * If the handler method returns false, applies \\`preventDefault\\` on the bound element.\n *\n * @usageNotes\n *\n * The following example declares a directive\n * that attaches a click listener to a button and counts clicks.\n *\n * \\`\\`\\`ts\n * @Directive({selector: 'button[counting]'})\n * class CountClicks {\n *   numberOfClicks = 0;\n *\n *   @HostListener('click', ['$event.target'])\n *   onClick(btn) {\n *     console.log('button', btn, 'number of clicks:', this.numberOfClicks++);\n *   }\n * }\n *\n * @Component({\n *   selector: 'app',\n *   template: '<button counting>Increment</button>',\n * })\n * class App {}\n *\n * \\`\\`\\`\n *\n * The following example registers another DOM event handler that listens for \\`Enter\\` key-press\n * events on the global \\`window\\`.\n * \\`\\`\\` ts\n * import { HostListener, Component } from \"@angular/core\";\n *\n * @Component({\n *   selector: 'app',\n *   template: \\`<h1>Hello, you have pressed enter {{counter}} number of times!</h1> Press enter key\n * to increment the counter.\n *   <button (click)=\"resetCounter()\">Reset Counter</button>\\`\n * })\n * class AppComponent {\n *   counter = 0;\n *   @HostListener('window:keydown.enter', ['$event'])\n *   handleKeyDown(event: KeyboardEvent) {\n *     this.counter++;\n *   }\n *   resetCounter() {\n *     this.counter = 0;\n *   }\n * }\n * \\`\\`\\`\n * The list of valid key names for \\`keydown\\` and \\`keyup\\` events\n * can be found here:\n * https://www.w3.org/TR/DOM-Level-3-Events-key/#named-key-attribute-values\n *\n * Note that keys can also be combined, e.g. \\`@HostListener('keydown.shift.a')\\`.\n *\n * The global target names that can be used to prefix an event name are\n * \\`document:\\`, \\`window:\\` and \\`body:\\`.\n *\n * @Annotation\n * @publicApi\n */\nexport declare const HostListener: HostListenerDecorator;\n\n/**\n * Type of the HostListener decorator / constructor function.\n *\n * @publicApi\n */\nexport declare interface HostListenerDecorator {\n\t/**\n\t * Decorator that declares a DOM event to listen for,\n\t * and provides a handler method to run when that event occurs.\n\t *\n\t * Angular invokes the supplied handler method when the host element emits the specified event,\n\t * and updates the bound element with the result.\n\t *\n\t * If the handler method returns false, applies \\`preventDefault\\` on the bound element.\n\t */\n\t(eventName: string, args?: string[]): any;\n\tnew(eventName: string, args?: string[]): any;\n}\n\ndeclare namespace i0 {\n\texport {\n\t\tɵɵinject,\n\t\tɵɵdefineInjectable,\n\t\tɵɵdefineInjector,\n\t\tɵɵInjectableDeclaration,\n\t\tɵNgModuleDef as NgModuleDef,\n\t\tɵɵdefineNgModule,\n\t\tɵɵFactoryDeclaration,\n\t\tɵɵInjectorDeclaration,\n\t\tɵɵNgModuleDeclaration,\n\t\tɵsetClassMetadata as setClassMetadata,\n\t\tɵNgModuleFactory as NgModuleFactory,\n\t\tɵnoSideEffects,\n\t\tITS_JUST_ANGULAR\n\t}\n}\n\n/**\n * Array storing OpCode for dynamically creating \\`i18n\\` translation DOM elements.\n *\n * This array creates a sequence of \\`Text\\` and \\`Comment\\` (as ICU anchor) DOM elements. It consists\n * of a pair of \\`number\\` and \\`string\\` pairs which encode the operations for the creation of the\n * translated block.\n *\n * The number is shifted and encoded according to \\`I18nCreateOpCode\\`\n *\n * Pseudocode:\n * \\`\\`\\`\n * const i18nCreateOpCodes = [\n *   10 << I18nCreateOpCode.SHIFT, \"Text Node add to DOM\",\n *   11 << I18nCreateOpCode.SHIFT | I18nCreateOpCode.COMMENT, \"Comment Node add to DOM\",\n *   12 << I18nCreateOpCode.SHIFT | I18nCreateOpCode.APPEND_LATER, \"Text Node added later\"\n * ];\n *\n * for(var i=0; i<i18nCreateOpCodes.length; i++) {\n *   const opcode = i18NCreateOpCodes[i++];\n *   const index = opcode >> I18nCreateOpCode.SHIFT;\n *   const text = i18NCreateOpCodes[i];\n *   let node: Text|Comment;\n *   if (opcode & I18nCreateOpCode.COMMENT === I18nCreateOpCode.COMMENT) {\n *     node = lView[~index] = document.createComment(text);\n *   } else {\n *     node = lView[index] = document.createText(text);\n *   }\n *   if (opcode & I18nCreateOpCode.APPEND_EAGERLY !== I18nCreateOpCode.APPEND_EAGERLY) {\n *     parentNode.appendChild(node);\n *   }\n * }\n * \\`\\`\\`\n */\ndeclare interface I18nCreateOpCodes extends Array<number | string>, I18nDebug {\n\t__brand__: 'I18nCreateOpCodes';\n}\n\ndeclare interface I18nDebug {\n\t/**\n\t * Human readable representation of the OpCode arrays.\n\t *\n\t * NOTE: This property only exists if \\`ngDevMode\\` is set to \\`true\\` and it is not present in\n\t * production. Its presence is purely to help debug issue in development, and should not be relied\n\t * on in production application.\n\t */\n\tdebug?: string[];\n}\n\n/**\n * Stores a list of nodes which need to be removed.\n *\n * Numbers are indexes into the \\`LView\\`\n * - index > 0: \\`removeRNode(lView[0])\\`\n * - index < 0: \\`removeICU(~lView[0])\\`\n */\ndeclare interface I18nRemoveOpCodes extends Array<number> {\n\t__brand__: 'I18nRemoveOpCodes';\n}\n\n/**\n * Stores DOM operations which need to be applied to update DOM render tree due to changes in\n * expressions.\n *\n * The basic idea is that \\`i18nExp\\` OpCodes capture expression changes and update a change\n * mask bit. (Bit 1 for expression 1, bit 2 for expression 2 etc..., bit 32 for expression 32 and\n * higher.) The OpCodes then compare its own change mask against the expression change mask to\n * determine if the OpCodes should execute.\n *\n * NOTE: 32nd bit is special as it says 32nd or higher. This way if we have more than 32 bindings\n * the code still works, but with lower efficiency. (it is unlikely that a translation would have\n * more than 32 bindings.)\n *\n * These OpCodes can be used by both the i18n block as well as ICU sub-block.\n *\n * ## Example\n *\n * Assume\n * \\`\\`\\`ts\n *   if (rf & RenderFlags.Update) {\n *    i18nExp(ctx.exp1); // If changed set mask bit 1\n *    i18nExp(ctx.exp2); // If changed set mask bit 2\n *    i18nExp(ctx.exp3); // If changed set mask bit 3\n *    i18nExp(ctx.exp4); // If changed set mask bit 4\n *    i18nApply(0);            // Apply all changes by executing the OpCodes.\n *  }\n * \\`\\`\\`\n * We can assume that each call to \\`i18nExp\\` sets an internal \\`changeMask\\` bit depending on the\n * index of \\`i18nExp\\`.\n *\n * ### OpCodes\n * \\`\\`\\`ts\n * <I18nUpdateOpCodes>[\n *   // The following OpCodes represent: \\`<div i18n-title=\"pre{{exp1}}in{{exp2}}post\">\\`\n *   // If \\`changeMask & 0b11\\`\n *   //        has changed then execute update OpCodes.\n *   //        has NOT changed then skip \\`8\\` values and start processing next OpCodes.\n *   0b11, 8,\n *   // Concatenate \\`newValue = 'pre'+lView[bindIndex-4]+'in'+lView[bindIndex-3]+'post';\\`.\n *   'pre', -4, 'in', -3, 'post',\n *   // Update attribute: \\`elementAttribute(1, 'title', sanitizerFn(newValue));\\`\n *   1 << SHIFT_REF | Attr, 'title', sanitizerFn,\n *\n *   // The following OpCodes represent: \\`<div i18n>Hello {{exp3}}!\">\\`\n *   // If \\`changeMask & 0b100\\`\n *   //        has changed then execute update OpCodes.\n *   //        has NOT changed then skip \\`4\\` values and start processing next OpCodes.\n *   0b100, 4,\n *   // Concatenate \\`newValue = 'Hello ' + lView[bindIndex -2] + '!';\\`.\n *   'Hello ', -2, '!',\n *   // Update text: \\`lView[1].textContent = newValue;\\`\n *   1 << SHIFT_REF | Text,\n *\n *   // The following OpCodes represent: \\`<div i18n>{exp4, plural, ... }\">\\`\n *   // If \\`changeMask & 0b1000\\`\n *   //        has changed then execute update OpCodes.\n *   //        has NOT changed then skip \\`2\\` values and start processing next OpCodes.\n *   0b1000, 2,\n *   // Concatenate \\`newValue = lView[bindIndex -1];\\`.\n *   -1,\n *   // Switch ICU: \\`icuSwitchCase(lView[1], 0, newValue);\\`\n *   0 << SHIFT_ICU | 1 << SHIFT_REF | IcuSwitch,\n *\n *   // Note \\`changeMask & -1\\` is always true, so the IcuUpdate will always execute.\n *   -1, 1,\n *   // Update ICU: \\`icuUpdateCase(lView[1], 0);\\`\n *   0 << SHIFT_ICU | 1 << SHIFT_REF | IcuUpdate,\n *\n * ];\n * \\`\\`\\`\n *\n */\ndeclare interface I18nUpdateOpCodes extends Array<string | number | SanitizerFn | null>, I18nDebug {\n\t__brand__: 'I18nUpdateOpCodes';\n}\n\n/**\n * Marks that the next string is comment text need for ICU.\n *\n * See \\`I18nMutateOpCodes\\` documentation.\n */\ndeclare const ICU_MARKER: ICU_MARKER;\n\ndeclare interface ICU_MARKER {\n\tmarker: 'ICU';\n}\n\n/**\n * Array storing OpCode for dynamically creating \\`i18n\\` blocks.\n *\n * Example:\n * \\`\\`\\`ts\n * <I18nCreateOpCode>[\n *   // For adding text nodes\n *   // ---------------------\n *   // Equivalent to:\n *   //   lView[1].appendChild(lView[0] = document.createTextNode('xyz'));\n *   'xyz', 0, 1 << SHIFT_PARENT | 0 << SHIFT_REF | AppendChild,\n *\n *   // For adding element nodes\n *   // ---------------------\n *   // Equivalent to:\n *   //   lView[1].appendChild(lView[0] = document.createElement('div'));\n *   ELEMENT_MARKER, 'div', 0, 1 << SHIFT_PARENT | 0 << SHIFT_REF | AppendChild,\n *\n *   // For adding comment nodes\n *   // ---------------------\n *   // Equivalent to:\n *   //   lView[1].appendChild(lView[0] = document.createComment(''));\n *   ICU_MARKER, '', 0, 1 << SHIFT_PARENT | 0 << SHIFT_REF | AppendChild,\n *\n *   // For moving existing nodes to a different location\n *   // --------------------------------------------------\n *   // Equivalent to:\n *   //   const node = lView[1];\n *   //   lView[2].appendChild(node);\n *   1 << SHIFT_REF | Select, 2 << SHIFT_PARENT | 0 << SHIFT_REF | AppendChild,\n *\n *   // For removing existing nodes\n *   // --------------------------------------------------\n *   //   const node = lView[1];\n *   //   removeChild(tView.data(1), node, lView);\n *   1 << SHIFT_REF | Remove,\n *\n *   // For writing attributes\n *   // --------------------------------------------------\n *   //   const node = lView[1];\n *   //   node.setAttribute('attr', 'value');\n *   1 << SHIFT_REF | Attr, 'attr', 'value'\n * ];\n * \\`\\`\\`\n */\ndeclare interface IcuCreateOpCodes extends Array<number | string | ELEMENT_MARKER | ICU_MARKER | null>, I18nDebug {\n\t__brand__: 'I18nCreateOpCodes';\n}\n\n/**\n * Defines the ICU type of \\`select\\` or \\`plural\\`\n */\ndeclare const enum IcuType {\n\tselect = 0,\n\tplural = 1\n}\n\ndeclare const ID = 20;\n\n/**\n * Providers that were imported from NgModules via the \\`importProvidersFrom\\` function.\n *\n * These providers are meant for use in an application injector (or other environment injectors) and\n * should not be used in component injectors.\n *\n * This type cannot be directly implemented. It's returned from the \\`importProvidersFrom\\` function\n * and serves to prevent the extracted NgModule providers from being used in the wrong contexts.\n *\n * @see \\`importProvidersFrom\\`\n *\n * @publicApi\n * @developerPreview\n */\nexport declare interface ImportedNgModuleProviders {\n\tɵproviders: Provider[];\n}\n\n/**\n * Collects providers from all NgModules and standalone components, including transitively imported\n * ones.\n *\n * Providers extracted via \\`importProvidersFrom\\` are only usable in an application injector or\n * another environment injector (such as a route injector). They should not be used in component\n * providers.\n *\n * More information about standalone components can be found in [this\n * guide](guide/standalone-components).\n *\n * @usageNotes\n * The results of the \\`importProvidersFrom\\` call can be used in the \\`bootstrapApplication\\` call:\n *\n * \\`\\`\\`typescript\n * await bootstrapApplication(RootComponent, {\n *   providers: [\n *     importProvidersFrom(NgModuleOne, NgModuleTwo)\n *   ]\n * });\n * \\`\\`\\`\n *\n * You can also use the \\`importProvidersFrom\\` results in the \\`providers\\` field of a route, when a\n * standalone component is used:\n *\n * \\`\\`\\`typescript\n * export const ROUTES: Route[] = [\n *   {\n *     path: 'foo',\n *     providers: [\n *       importProvidersFrom(NgModuleOne, NgModuleTwo)\n *     ],\n *     component: YourStandaloneComponent\n *   }\n * ];\n * \\`\\`\\`\n *\n * @returns Collected providers from the specified list of types.\n * @publicApi\n * @developerPreview\n */\nexport declare function importProvidersFrom(...sources: ImportProvidersSource[]): ImportedNgModuleProviders;\n\n/**\n * A source of providers for the \\`importProvidersFrom\\` function.\n *\n * @developerPreview\n * @publicApi\n */\nexport declare type ImportProvidersSource = Type<unknown> | ModuleWithProviders<unknown> | Array<ImportProvidersSource>;\n\n/**\n * This array contains information about input properties that\n * need to be set once from attribute data. It's ordered by\n * directive index (relative to element) so it's simple to\n * look up a specific directive's initial input data.\n *\n * Within each sub-array:\n *\n * i+0: attribute name\n * i+1: minified/internal input name\n * i+2: initial value\n *\n * If a directive on a node does not have any input properties\n * that should be set from attributes, its index is set to null\n * to avoid a sparse array.\n *\n * e.g. [null, ['role-min', 'minified-input', 'button']]\n */\ndeclare type InitialInputData = (InitialInputs | null)[];\n\n/**\n * Used by InitialInputData to store input properties\n * that should be set once from attributes.\n *\n * i+0: attribute name\n * i+1: minified/internal input name\n * i+2: initial value\n *\n * e.g. ['role-min', 'minified-input', 'button']\n */\ndeclare type InitialInputs = string[];\n\n/**\n * Type of the Inject metadata.\n *\n * @publicApi\n */\nexport declare interface Inject {\n\t/**\n\t * A [DI token](guide/glossary#di-token) that maps to the dependency to be injected.\n\t */\n\ttoken: any;\n}\n\n/**\n * Inject decorator and metadata.\n *\n * @Annotation\n * @publicApi\n */\nexport declare const Inject: InjectDecorator;\n\n/**\n * @param token A token that represents a dependency that should be injected.\n * @returns the injected value if operation is successful, \\`null\\` otherwise.\n * @throws if called outside of a supported context.\n *\n * @publicApi\n */\nexport declare function inject<T>(token: ProviderToken<T>): T;\n\n/**\n * @param token A token that represents a dependency that should be injected.\n * @param flags Control how injection is executed. The flags correspond to injection strategies that\n *     can be specified with parameter decorators \\`@Host\\`, \\`@Self\\`, \\`@SkipSelf\\`, and \\`@Optional\\`.\n * @returns the injected value if operation is successful, \\`null\\` otherwise.\n * @throws if called outside of a supported context.\n *\n * @publicApi\n * @deprecated prefer an options object instead of \\`InjectFlags\\`\n */\nexport declare function inject<T>(token: ProviderToken<T>, flags?: InjectFlags): T | null;\n\n/**\n * @param token A token that represents a dependency that should be injected.\n * @param options Control how injection is executed. Options correspond to injection strategies\n *     that can be specified with parameter decorators \\`@Host\\`, \\`@Self\\`, \\`@SkipSelf\\`, and\n *     \\`@Optional\\`.\n * @returns the injected value if operation is successful.\n * @throws if called outside of a supported context, or if the token is not found.\n *\n * @publicApi\n */\nexport declare function inject<T>(token: ProviderToken<T>, options: InjectOptions & {\n\toptional?: false;\n}): T;\n\n/**\n * @param token A token that represents a dependency that should be injected.\n * @param options Control how injection is executed. Options correspond to injection strategies\n *     that can be specified with parameter decorators \\`@Host\\`, \\`@Self\\`, \\`@SkipSelf\\`, and\n *     \\`@Optional\\`.\n * @returns the injected value if operation is successful,  \\`null\\` if the token is not\n *     found and optional injection has been requested.\n * @throws if called outside of a supported context, or if the token is not found and optional\n *     injection was not requested.\n *\n * @publicApi\n */\nexport declare function inject<T>(token: ProviderToken<T>, options: InjectOptions): T | null;\n\n/**\n * Type of the Injectable metadata.\n *\n * @publicApi\n */\nexport declare interface Injectable {\n\t/**\n\t * Determines which injectors will provide the injectable.\n\t *\n\t * - \\`Type<any>\\` - associates the injectable with an \\`@NgModule\\` or other \\`InjectorType\\`,\n\t * - 'null' : Equivalent to \\`undefined\\`. The injectable is not provided in any scope automatically\n\t * and must be added to a \\`providers\\` array of an [@NgModule](api/core/NgModule#providers),\n\t * [@Component](api/core/Directive#providers) or [@Directive](api/core/Directive#providers).\n\t *\n\t * The following options specify that this injectable should be provided in one of the following\n\t * injectors:\n\t * - 'root' : The application-level injector in most apps.\n\t * - 'platform' : A special singleton platform injector shared by all\n\t * applications on the page.\n\t * - 'any' : Provides a unique instance in each lazy loaded module while all eagerly loaded\n\t * modules share one instance.\n\t *\n\t */\n\tprovidedIn?: Type<any> | 'root' | 'platform' | 'any' | null;\n}\n\n/**\n * Injectable decorator and metadata.\n *\n * @Annotation\n * @publicApi\n */\nexport declare const Injectable: InjectableDecorator;\n\n/**\n * Type of the Injectable decorator / constructor function.\n *\n * @publicApi\n */\nexport declare interface InjectableDecorator {\n\t/**\n\t * Decorator that marks a class as available to be\n\t * provided and injected as a dependency.\n\t *\n\t * @see [Introduction to Services and DI](guide/architecture-services)\n\t * @see [Dependency Injection Guide](guide/dependency-injection)\n\t *\n\t * @usageNotes\n\t *\n\t * Marking a class with \\`@Injectable\\` ensures that the compiler\n\t * will generate the necessary metadata to create the class's\n\t * dependencies when the class is injected.\n\t *\n\t * The following example shows how a service class is properly\n\t *  marked so that a supporting service can be injected upon creation.\n\t *\n\t * <code-example path=\"core/di/ts/metadata_spec.ts\" region=\"Injectable\"></code-example>\n\t *\n\t */\n\t(): TypeDecorator;\n\t(options?: {\n\t\tprovidedIn: Type<any> | 'root' | 'platform' | 'any' | null;\n\t} & InjectableProvider): TypeDecorator;\n\tnew(): Injectable;\n\tnew(options?: {\n\t\tprovidedIn: Type<any> | 'root' | 'platform' | 'any' | null;\n\t} & InjectableProvider): Injectable;\n}\n\n/**\n * Injectable providers used in \\`@Injectable\\` decorator.\n *\n * @publicApi\n */\nexport declare type InjectableProvider = ValueSansProvider | ExistingSansProvider | StaticClassSansProvider | ConstructorSansProvider | FactorySansProvider | ClassSansProvider;\n\n/**\n * A \\`Type\\` which has a \\`ɵprov: ɵɵInjectableDeclaration\\` static field.\n *\n * \\`InjectableType\\`s contain their own Dependency Injection metadata and are usable in an\n * \\`InjectorDef\\`-based \\`StaticInjector\\`.\n *\n * @publicApi\n */\nexport declare interface InjectableType<T> extends Type<T> {\n\t/**\n\t * Opaque type whose structure is highly version dependent. Do not rely on any properties.\n\t */\n\tɵprov: unknown;\n}\n\n\n/**\n * Type of the Inject decorator / constructor function.\n *\n * @publicApi\n */\nexport declare interface InjectDecorator {\n\t/**\n\t * Parameter decorator on a dependency parameter of a class constructor\n\t * that specifies a custom provider of the dependency.\n\t *\n\t * @usageNotes\n\t * The following example shows a class constructor that specifies a\n\t * custom provider of a dependency using the parameter decorator.\n\t *\n\t * When \\`@Inject()\\` is not present, the injector uses the type annotation of the\n\t * parameter as the provider.\n\t *\n\t * <code-example path=\"core/di/ts/metadata_spec.ts\" region=\"InjectWithoutDecorator\">\n\t * </code-example>\n\t *\n\t * @see [\"Dependency Injection Guide\"](guide/dependency-injection)\n\t *\n\t */\n\t(token: any): any;\n\tnew(token: any): Inject;\n}\n\n/**\n * Injection flags for DI.\n *\n * @publicApi\n * @deprecated use an options object for \\`inject\\` instead.\n */\nexport declare enum InjectFlags {\n\t/** Check self and check parent injector if needed */\n\tDefault = 0,\n\t/**\n\t * Specifies that an injector should retrieve a dependency from any injector until reaching the\n\t * host element of the current component. (Only used with Element Injector)\n\t */\n\tHost = 1,\n\t/** Don't ascend to ancestors of the node requesting injection. */\n\tSelf = 2,\n\t/** Skip the node that is requesting injection. */\n\tSkipSelf = 4,\n\t/** Inject \\`defaultValue\\` instead if token not found. */\n\tOptional = 8\n}\n\n/**\n * Creates a token that can be used in a DI Provider.\n *\n * Use an \\`InjectionToken\\` whenever the type you are injecting is not reified (does not have a\n * runtime representation) such as when injecting an interface, callable type, array or\n * parameterized type.\n *\n * \\`InjectionToken\\` is parameterized on \\`T\\` which is the type of object which will be returned by\n * the \\`Injector\\`. This provides an additional level of type safety.\n *\n * \\`\\`\\`\n * interface MyInterface {...}\n * const myInterface = injector.get(new InjectionToken<MyInterface>('SomeToken'));\n * // myInterface is inferred to be MyInterface.\n * \\`\\`\\`\n *\n * When creating an \\`InjectionToken\\`, you can optionally specify a factory function which returns\n * (possibly by creating) a default value of the parameterized type \\`T\\`. This sets up the\n * \\`InjectionToken\\` using this factory as a provider as if it was defined explicitly in the\n * application's root injector. If the factory function, which takes zero arguments, needs to inject\n * dependencies, it can do so using the \\`inject\\` function.\n * As you can see in the Tree-shakable InjectionToken example below.\n *\n * Additionally, if a \\`factory\\` is specified you can also specify the \\`providedIn\\` option, which\n * overrides the above behavior and marks the token as belonging to a particular \\`@NgModule\\`. As\n * mentioned above, \\`'root'\\` is the default value for \\`providedIn\\`.\n *\n * @usageNotes\n * ### Basic Examples\n *\n * ### Plain InjectionToken\n *\n * {@example core/di/ts/injector_spec.ts region='InjectionToken'}\n *\n * ### Tree-shakable InjectionToken\n *\n * {@example core/di/ts/injector_spec.ts region='ShakableInjectionToken'}\n *\n *\n * @publicApi\n */\nexport declare class InjectionToken<T> {\n\tprotected _desc: string;\n\treadonly ɵprov: unknown;\n\t/**\n\t * @param _desc   Description for the token,\n\t *                used only for debugging purposes,\n\t *                it should but does not need to be unique\n\t * @param options Options for the token's usage, as described above\n\t */\n\tconstructor(_desc: string, options?: {\n\t\tprovidedIn?: Type<any> | 'root' | 'platform' | 'any' | null;\n\t\tfactory: () => T;\n\t});\n\ttoString(): string;\n}\n\n/**\n * Type of the options argument to \\`inject\\`.\n *\n * @publicApi\n */\nexport declare interface InjectOptions {\n\t/**\n\t * Use optional injection, and return \\`null\\` if the requested token is not found.\n\t */\n\toptional?: boolean;\n\t/**\n\t * Start injection at the parent of the current injector.\n\t */\n\tskipSelf?: boolean;\n\t/**\n\t * Only query the current injector for the token, and don't fall back to the parent injector if\n\t * it's not found.\n\t */\n\tself?: boolean;\n\t/**\n\t * Stop injection at the host component's injector. Only relevant when injecting from an element\n\t * injector, and a no-op for environment injectors.\n\t */\n\thost?: boolean;\n}\n\n/**\n * An InjectionToken that gets the current \\`Injector\\` for \\`createInjector()\\`-style injectors.\n *\n * Requesting this token instead of \\`Injector\\` allows \\`StaticInjector\\` to be tree-shaken from a\n * project.\n *\n * @publicApi\n */\nexport declare const INJECTOR: InjectionToken<Injector>;\n\n/**\n * Concrete injectors implement this interface. Injectors are configured\n * with [providers](guide/glossary#provider) that associate\n * dependencies of various types with [injection tokens](guide/glossary#di-token).\n *\n * @see [\"DI Providers\"](guide/dependency-injection-providers).\n * @see \\`StaticProvider\\`\n *\n * @usageNotes\n *\n *  The following example creates a service injector instance.\n *\n * {@example core/di/ts/provider_spec.ts region='ConstructorProvider'}\n *\n * ### Usage example\n *\n * {@example core/di/ts/injector_spec.ts region='Injector'}\n *\n * \\`Injector\\` returns itself when given \\`Injector\\` as a token:\n *\n * {@example core/di/ts/injector_spec.ts region='injectInjector'}\n *\n * @publicApi\n */\nexport declare abstract class Injector {\n\tstatic THROW_IF_NOT_FOUND: {};\n\tstatic NULL: Injector;\n\t/**\n\t * Retrieves an instance from the injector based on the provided token.\n\t * @returns The instance from the injector if defined, otherwise the \\`notFoundValue\\`.\n\t * @throws When the \\`notFoundValue\\` is \\`undefined\\` or \\`Injector.THROW_IF_NOT_FOUND\\`.\n\t */\n\tabstract get<T>(token: ProviderToken<T>, notFoundValue?: T, flags?: InjectFlags): T;\n\t/**\n\t * @deprecated from v4.0.0 use ProviderToken<T>\n\t * @suppress {duplicate}\n\t */\n\tabstract get(token: any, notFoundValue?: any): any;\n\t/**\n\t * @deprecated from v5 use the new signature Injector.create(options)\n\t */\n\tstatic create(providers: StaticProvider[], parent?: Injector): Injector;\n\t/**\n\t * Creates a new injector instance that provides one or more dependencies,\n\t * according to a given type or types of \\`StaticProvider\\`.\n\t *\n\t * @param options An object with the following properties:\n\t * * \\`providers\\`: An array of providers of the [StaticProvider type](api/core/StaticProvider).\n\t * * \\`parent\\`: (optional) A parent injector.\n\t * * \\`name\\`: (optional) A developer-defined identifying name for the new injector.\n\t *\n\t * @returns The new injector instance.\n\t *\n\t */\n\tstatic create(options: {\n\t\tproviders: StaticProvider[];\n\t\tparent?: Injector;\n\t\tname?: string;\n\t}): Injector;\n\t/** @nocollapse */\n\tstatic ɵprov: unknown;\n}\n\ndeclare const INJECTOR_2 = 9;\n\ndeclare type InjectorScope = 'root' | 'platform' | 'environment';\n\n/**\n * A type which has an \\`InjectorDef\\` static field.\n *\n * \\`InjectorTypes\\` can be used to configure a \\`StaticInjector\\`.\n *\n * This is an opaque type whose structure is highly version dependent. Do not rely on any\n * properties.\n *\n * @publicApi\n */\nexport declare interface InjectorType<T> extends Type<T> {\n\tɵfac?: unknown;\n\tɵinj: unknown;\n}\n\n/**\n * Describes the \\`InjectorDef\\` equivalent of a \\`ModuleWithProviders\\`, an \\`InjectorType\\` with an\n * associated array of providers.\n *\n * Objects of this type can be listed in the imports section of an \\`InjectorDef\\`.\n *\n * NOTE: This is a private type and should not be exported\n */\ndeclare interface InjectorTypeWithProviders<T> {\n\tngModule: InjectorType<T>;\n\tproviders?: (Type<any> | ValueProvider | ExistingProvider | FactoryProvider | ConstructorProvider | StaticClassProvider | ClassProvider | any[])[];\n}\n\n/**\n * Type of metadata for an \\`Input\\` property.\n *\n * @publicApi\n */\nexport declare interface Input {\n\t/**\n\t * The name of the DOM property to which the input property is bound.\n\t */\n\tbindingPropertyName?: string;\n}\n\n/**\n * @Annotation\n * @publicApi\n */\nexport declare const Input: InputDecorator;\n\n/**\n * @publicApi\n */\nexport declare interface InputDecorator {\n\t/**\n\t * Decorator that marks a class field as an input property and supplies configuration metadata.\n\t * The input property is bound to a DOM property in the template. During change detection,\n\t * Angular automatically updates the data property with the DOM property's value.\n\t *\n\t * @usageNotes\n\t *\n\t * You can supply an optional name to use in templates when the\n\t * component is instantiated, that maps to the\n\t * name of the bound property. By default, the original\n\t * name of the bound property is used for input binding.\n\t *\n\t * The following example creates a component with two input properties,\n\t * one of which is given a special binding name.\n\t *\n\t * \\`\\`\\`typescript\n\t * @Component({\n\t *   selector: 'bank-account',\n\t *   template: \\`\n\t *     Bank Name: {{bankName}}\n\t *     Account Id: {{id}}\n\t *   \\`\n\t * })\n\t * class BankAccount {\n\t *   // This property is bound using its original name.\n\t *   @Input() bankName: string;\n\t *   // this property value is bound to a different property name\n\t *   // when this component is instantiated in a template.\n\t *   @Input('account-id') id: string;\n\t *\n\t *   // this property is not bound, and is not automatically updated by Angular\n\t *   normalizedBankName: string;\n\t * }\n\t *\n\t * @Component({\n\t *   selector: 'app',\n\t *   template: \\`\n\t *     <bank-account bankName=\"RBC\" account-id=\"4747\"></bank-account>\n\t *   \\`\n\t * })\n\t * class App {}\n\t * \\`\\`\\`\n\t *\n\t * @see [Input and Output properties](guide/inputs-outputs)\n\t */\n\t(bindingPropertyName?: string): any;\n\tnew(bindingPropertyName?: string): any;\n}\n\n/**\n * See \\`TNode.insertBeforeIndex\\`\n */\ndeclare type InsertBeforeIndex = null | number | number[];\n\ndeclare interface InternalNgModuleRef<T> extends NgModuleRef<T> {\n\t_bootstrapComponents: Type<any>[];\n}\n\ndeclare interface InternalViewRef extends ViewRef {\n\tdetachFromAppRef(): void;\n\tattachToAppRef(appRef: ViewRefTracker): void;\n}\n\n\n/**\n * Returns whether Angular is in development mode. After called once,\n * the value is locked and won't change any more.\n *\n * By default, this is true, unless a user calls \\`enableProdMode\\` before calling this.\n *\n * @publicApi\n */\nexport declare function isDevMode(): boolean;\n\n/**\n * Record representing the item change information.\n *\n * @publicApi\n */\nexport declare interface IterableChangeRecord<V> {\n\t/** Current index of the item in \\`Iterable\\` or null if removed. */\n\treadonly currentIndex: number | null;\n\t/** Previous index of the item in \\`Iterable\\` or null if added. */\n\treadonly previousIndex: number | null;\n\t/** The item. */\n\treadonly item: V;\n\t/** Track by identity as computed by the \\`TrackByFunction\\`. */\n\treadonly trackById: any;\n}\n\ndeclare class IterableChangeRecord_<V> implements IterableChangeRecord<V> {\n\titem: V;\n\ttrackById: any;\n\tcurrentIndex: number | null;\n\tpreviousIndex: number | null;\n\tconstructor(item: V, trackById: any);\n}\n\n/**\n * An object describing the changes in the \\`Iterable\\` collection since last time\n * \\`IterableDiffer#diff()\\` was invoked.\n *\n * @publicApi\n */\nexport declare interface IterableChanges<V> {\n\t/**\n\t * Iterate over all changes. \\`IterableChangeRecord\\` will contain information about changes\n\t * to each item.\n\t */\n\tforEachItem(fn: (record: IterableChangeRecord<V>) => void): void;\n\t/**\n\t * Iterate over a set of operations which when applied to the original \\`Iterable\\` will produce the\n\t * new \\`Iterable\\`.\n\t *\n\t * NOTE: These are not necessarily the actual operations which were applied to the original\n\t * \\`Iterable\\`, rather these are a set of computed operations which may not be the same as the\n\t * ones applied.\n\t *\n\t * @param record A change which needs to be applied\n\t * @param previousIndex The \\`IterableChangeRecord#previousIndex\\` of the \\`record\\` refers to the\n\t *        original \\`Iterable\\` location, where as \\`previousIndex\\` refers to the transient location\n\t *        of the item, after applying the operations up to this point.\n\t * @param currentIndex The \\`IterableChangeRecord#currentIndex\\` of the \\`record\\` refers to the\n\t *        original \\`Iterable\\` location, where as \\`currentIndex\\` refers to the transient location\n\t *        of the item, after applying the operations up to this point.\n\t */\n\tforEachOperation(fn: (record: IterableChangeRecord<V>, previousIndex: number | null, currentIndex: number | null) => void): void;\n\t/**\n\t * Iterate over changes in the order of original \\`Iterable\\` showing where the original items\n\t * have moved.\n\t */\n\tforEachPreviousItem(fn: (record: IterableChangeRecord<V>) => void): void;\n\t/** Iterate over all added items. */\n\tforEachAddedItem(fn: (record: IterableChangeRecord<V>) => void): void;\n\t/** Iterate over all moved items. */\n\tforEachMovedItem(fn: (record: IterableChangeRecord<V>) => void): void;\n\t/** Iterate over all removed items. */\n\tforEachRemovedItem(fn: (record: IterableChangeRecord<V>) => void): void;\n\t/**\n\t * Iterate over all items which had their identity (as computed by the \\`TrackByFunction\\`)\n\t * changed.\n\t */\n\tforEachIdentityChange(fn: (record: IterableChangeRecord<V>) => void): void;\n}\n\n/**\n * A strategy for tracking changes over time to an iterable. Used by {@link NgForOf} to\n * respond to changes in an iterable by effecting equivalent changes in the DOM.\n *\n * @publicApi\n */\nexport declare interface IterableDiffer<V> {\n\t/**\n\t * Compute a difference between the previous state and the new \\`object\\` state.\n\t *\n\t * @param object containing the new value.\n\t * @returns an object describing the difference. The return value is only valid until the next\n\t * \\`diff()\\` invocation.\n\t */\n\tdiff(object: NgIterable<V> | undefined | null): IterableChanges<V> | null;\n}\n\n/**\n * Provides a factory for {@link IterableDiffer}.\n *\n * @publicApi\n */\nexport declare interface IterableDifferFactory {\n\tsupports(objects: any): boolean;\n\tcreate<V>(trackByFn?: TrackByFunction<V>): IterableDiffer<V>;\n}\n\n/**\n * A repository of different iterable diffing strategies used by NgFor, NgClass, and others.\n *\n * @publicApi\n */\nexport declare class IterableDiffers {\n\t/** @nocollapse */\n\tstatic ɵprov: unknown;\n\t/**\n\t * @deprecated v4.0.0 - Should be private\n\t */\n\tfactories: IterableDifferFactory[];\n\tconstructor(factories: IterableDifferFactory[]);\n\tstatic create(factories: IterableDifferFactory[], parent?: IterableDiffers): IterableDiffers;\n\t/**\n\t * Takes an array of {@link IterableDifferFactory} and returns a provider used to extend the\n\t * inherited {@link IterableDiffers} instance with the provided factories and return a new\n\t * {@link IterableDiffers} instance.\n\t *\n\t * @usageNotes\n\t * ### Example\n\t *\n\t * The following example shows how to extend an existing list of factories,\n\t * which will only be applied to the injector for this component and its children.\n\t * This step is all that's required to make a new {@link IterableDiffer} available.\n\t *\n\t * \\`\\`\\`\n\t * @Component({\n\t *   viewProviders: [\n\t *     IterableDiffers.extend([new ImmutableListDiffer()])\n\t *   ]\n\t * })\n\t * \\`\\`\\`\n\t */\n\tstatic extend(factories: IterableDifferFactory[]): StaticProvider;\n\tfind(iterable: any): IterableDifferFactory;\n}\n\n/**\n * The existence of this constant (in this particular file) informs the Angular compiler that the\n * current program is actually @angular/core, which needs to be compiled specially.\n */\ndeclare const ITS_JUST_ANGULAR = true;\n\n/**\n * \\`KeyValueArray\\` is an array where even positions contain keys and odd positions contain values.\n *\n * \\`KeyValueArray\\` provides a very efficient way of iterating over its contents. For small\n * sets (~10) the cost of binary searching an \\`KeyValueArray\\` has about the same performance\n * characteristics that of a \\`Map\\` with significantly better memory footprint.\n *\n * If used as a \\`Map\\` the keys are stored in alphabetical order so that they can be binary searched\n * for retrieval.\n *\n * See: \\`keyValueArraySet\\`, \\`keyValueArrayGet\\`, \\`keyValueArrayIndexOf\\`, \\`keyValueArrayDelete\\`.\n */\ndeclare interface KeyValueArray<VALUE> extends Array<VALUE | string> {\n\t__brand__: 'array-map';\n}\n\n/**\n * Record representing the item change information.\n *\n * @publicApi\n */\nexport declare interface KeyValueChangeRecord<K, V> {\n\t/**\n\t * Current key in the Map.\n\t */\n\treadonly key: K;\n\t/**\n\t * Current value for the key or \\`null\\` if removed.\n\t */\n\treadonly currentValue: V | null;\n\t/**\n\t * Previous value for the key or \\`null\\` if added.\n\t */\n\treadonly previousValue: V | null;\n}\n\n/**\n * An object describing the changes in the \\`Map\\` or \\`{[k:string]: string}\\` since last time\n * \\`KeyValueDiffer#diff()\\` was invoked.\n *\n * @publicApi\n */\nexport declare interface KeyValueChanges<K, V> {\n\t/**\n\t * Iterate over all changes. \\`KeyValueChangeRecord\\` will contain information about changes\n\t * to each item.\n\t */\n\tforEachItem(fn: (r: KeyValueChangeRecord<K, V>) => void): void;\n\t/**\n\t * Iterate over changes in the order of original Map showing where the original items\n\t * have moved.\n\t */\n\tforEachPreviousItem(fn: (r: KeyValueChangeRecord<K, V>) => void): void;\n\t/**\n\t * Iterate over all keys for which values have changed.\n\t */\n\tforEachChangedItem(fn: (r: KeyValueChangeRecord<K, V>) => void): void;\n\t/**\n\t * Iterate over all added items.\n\t */\n\tforEachAddedItem(fn: (r: KeyValueChangeRecord<K, V>) => void): void;\n\t/**\n\t * Iterate over all removed items.\n\t */\n\tforEachRemovedItem(fn: (r: KeyValueChangeRecord<K, V>) => void): void;\n}\n\n/**\n * A differ that tracks changes made to an object over time.\n *\n * @publicApi\n */\nexport declare interface KeyValueDiffer<K, V> {\n\t/**\n\t * Compute a difference between the previous state and the new \\`object\\` state.\n\t *\n\t * @param object containing the new value.\n\t * @returns an object describing the difference. The return value is only valid until the next\n\t * \\`diff()\\` invocation.\n\t */\n\tdiff(object: Map<K, V>): KeyValueChanges<K, V> | null;\n\t/**\n\t * Compute a difference between the previous state and the new \\`object\\` state.\n\t *\n\t * @param object containing the new value.\n\t * @returns an object describing the difference. The return value is only valid until the next\n\t * \\`diff()\\` invocation.\n\t */\n\tdiff(object: {\n\t\t[key: string]: V;\n\t}): KeyValueChanges<string, V> | null;\n}\n\n/**\n * Provides a factory for {@link KeyValueDiffer}.\n *\n * @publicApi\n */\nexport declare interface KeyValueDifferFactory {\n\t/**\n\t * Test to see if the differ knows how to diff this kind of object.\n\t */\n\tsupports(objects: any): boolean;\n\t/**\n\t * Create a \\`KeyValueDiffer\\`.\n\t */\n\tcreate<K, V>(): KeyValueDiffer<K, V>;\n}\n\n/**\n * A repository of different Map diffing strategies used by NgClass, NgStyle, and others.\n *\n * @publicApi\n */\nexport declare class KeyValueDiffers {\n\t/** @nocollapse */\n\tstatic ɵprov: unknown;\n\t/**\n\t * @deprecated v4.0.0 - Should be private.\n\t */\n\tfactories: KeyValueDifferFactory[];\n\tconstructor(factories: KeyValueDifferFactory[]);\n\tstatic create<S>(factories: KeyValueDifferFactory[], parent?: KeyValueDiffers): KeyValueDiffers;\n\t/**\n\t * Takes an array of {@link KeyValueDifferFactory} and returns a provider used to extend the\n\t * inherited {@link KeyValueDiffers} instance with the provided factories and return a new\n\t * {@link KeyValueDiffers} instance.\n\t *\n\t * @usageNotes\n\t * ### Example\n\t *\n\t * The following example shows how to extend an existing list of factories,\n\t * which will only be applied to the injector for this component and its children.\n\t * This step is all that's required to make a new {@link KeyValueDiffer} available.\n\t *\n\t * \\`\\`\\`\n\t * @Component({\n\t *   viewProviders: [\n\t *     KeyValueDiffers.extend([new ImmutableMapDiffer()])\n\t *   ]\n\t * })\n\t * \\`\\`\\`\n\t */\n\tstatic extend<S>(factories: KeyValueDifferFactory[]): StaticProvider;\n\tfind(kv: any): KeyValueDifferFactory;\n}\n\n/**\n * The state associated with a container.\n *\n * This is an array so that its structure is closer to LView. This helps\n * when traversing the view tree (which is a mix of containers and component\n * views), so we can jump to viewOrContainer[NEXT] in the same way regardless\n * of type.\n */\ndeclare interface LContainer extends Array<any> {\n\t/**\n\t * The host element of this LContainer.\n\t *\n\t * The host could be an LView if this container is on a component node.\n\t * In that case, the component LView is its HOST.\n\t */\n\treadonly [HOST]: RElement | RComment | LView;\n\t/**\n\t * This is a type field which allows us to differentiate \\`LContainer\\` from \\`StylingContext\\` in an\n\t * efficient way. The value is always set to \\`true\\`\n\t */\n\t[TYPE]: true;\n\t/**\n\t * Flag to signify that this \\`LContainer\\` may have transplanted views which need to be change\n\t * detected. (see: \\`LView[DECLARATION_COMPONENT_VIEW])\\`.\n\t *\n\t * This flag, once set, is never unset for the \\`LContainer\\`.\n\t */\n\t[HAS_TRANSPLANTED_VIEWS]: boolean;\n\t/**\n\t * Access to the parent view is necessary so we can propagate back\n\t * up from inside a container to parent[NEXT].\n\t */\n\t[PARENT]: LView;\n\t/**\n\t * This allows us to jump from a container to a sibling container or component\n\t * view with the same parent, so we can remove listeners efficiently.\n\t */\n\t[NEXT]: LView | LContainer | null;\n\t/**\n\t * The number of direct transplanted views which need a refresh or have descendants themselves\n\t * that need a refresh but have not marked their ancestors as Dirty. This tells us that during\n\t * change detection we should still descend to find those children to refresh, even if the parents\n\t * are not \\`Dirty\\`/\\`CheckAlways\\`.\n\t */\n\t[TRANSPLANTED_VIEWS_TO_REFRESH]: number;\n\t/**\n\t * A collection of views created based on the underlying \\`<ng-template>\\` element but inserted into\n\t * a different \\`LContainer\\`. We need to track views created from a given declaration point since\n\t * queries collect matches from the embedded view declaration point and _not_ the insertion point.\n\t */\n\t[MOVED_VIEWS]: LView[] | null;\n\t/**\n\t * Pointer to the \\`TNode\\` which represents the host of the container.\n\t */\n\t[T_HOST]: TNode;\n\t/** The comment element that serves as an anchor for this LContainer. */\n\treadonly [NATIVE]: RComment;\n\t/**\n\t * Array of \\`ViewRef\\`s used by any \\`ViewContainerRef\\`s that point to this container.\n\t *\n\t * This is lazily initialized by \\`ViewContainerRef\\` when the first view is inserted.\n\t *\n\t * NOTE: This is stored as \\`any[]\\` because render3 should really not be aware of \\`ViewRef\\` and\n\t * doing so creates circular dependency.\n\t */\n\t[VIEW_REFS]: unknown[] | null;\n}\n\n/**\n * Human readable version of the \\`LContainer\\`\n *\n * \\`LContainer\\` is a data structure used internally to keep track of child views. The \\`LContainer\\`\n * is designed for efficiency and so at times it is difficult to read or write tests which assert on\n * its values. For this reason when \\`ngDevMode\\` is true we patch a \\`LContainer.debug\\` property which\n * points to \\`LContainerDebug\\` for easier debugging and test writing. It is the intent of\n * \\`LContainerDebug\\` to be used in tests.\n */\ndeclare interface LContainerDebug {\n\treadonly native: RComment;\n\t/**\n\t * Child \\`LView\\`s.\n\t */\n\treadonly views: LViewDebug[];\n\treadonly parent: LViewDebug | null;\n\treadonly movedViews: LView[] | null;\n\treadonly host: RElement | RComment | LView;\n\treadonly next: LViewDebug | LContainerDebug | null;\n\treadonly hasTransplantedViews: boolean;\n}\n\n/**\n * Provide this token to set the locale of your application.\n * It is used for i18n extraction, by i18n pipes (DatePipe, I18nPluralPipe, CurrencyPipe,\n * DecimalPipe and PercentPipe) and by ICU expressions.\n *\n * See the [i18n guide](guide/i18n-common-locale-id) for more information.\n *\n * @usageNotes\n * ### Example\n *\n * \\`\\`\\`typescript\n * import { LOCALE_ID } from '@angular/core';\n * import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n * import { AppModule } from './app/app.module';\n *\n * platformBrowserDynamic().bootstrapModule(AppModule, {\n *   providers: [{provide: LOCALE_ID, useValue: 'en-US' }]\n * });\n * \\`\\`\\`\n *\n * @publicApi\n */\nexport declare const LOCALE_ID: InjectionToken<string>;\n\n/**\n * Type for a function that extracts a value for a local refs.\n * Example:\n * - \\`<div #nativeDivEl>\\` - \\`nativeDivEl\\` should point to the native \\`<div>\\` element;\n * - \\`<ng-template #tplRef>\\` - \\`tplRef\\` should point to the \\`TemplateRef\\` instance;\n */\ndeclare type LocalRefExtractor = (tNode: TNodeWithLocalRefs, currentView: LView) => any;\n\n/**\n * lQueries represent a collection of individual LQuery objects tracked in a given view.\n */\ndeclare interface LQueries {\n\t/**\n\t * A collection of queries tracked in a given view.\n\t */\n\tqueries: LQuery<any>[];\n\t/**\n\t * A method called when a new embedded view is created. As a result a set of LQueries applicable\n\t * for a new embedded view is instantiated (cloned) from the declaration view.\n\t * @param tView\n\t */\n\tcreateEmbeddedView(tView: TView): LQueries | null;\n\t/**\n\t * A method called when an embedded view is inserted into a container. As a result all impacted\n\t * \\`LQuery\\` objects (and associated \\`QueryList\\`) are marked as dirty.\n\t * @param tView\n\t */\n\tinsertView(tView: TView): void;\n\t/**\n\t * A method called when an embedded view is detached from a container. As a result all impacted\n\t * \\`LQuery\\` objects (and associated \\`QueryList\\`) are marked as dirty.\n\t * @param tView\n\t */\n\tdetachView(tView: TView): void;\n}\n\n/**\n * An interface that represents query-related information specific to a view instance. Most notably\n * it contains:\n * - materialized query matches;\n * - a pointer to a QueryList where materialized query results should be reported.\n */\ndeclare interface LQuery<T> {\n\t/**\n\t * Materialized query matches for a given view only (!). Results are initialized lazily so the\n\t * array of matches is set to \\`null\\` initially.\n\t */\n\tmatches: (T | null)[] | null;\n\t/**\n\t * A QueryList where materialized query results should be reported.\n\t */\n\tqueryList: QueryList<T>;\n\t/**\n\t * Clones an LQuery for an embedded view. A cloned query shares the same \\`QueryList\\` but has a\n\t * separate collection of materialized matches.\n\t */\n\tclone(): LQuery<T>;\n\t/**\n\t * Called when an embedded view, impacting results of this query, is inserted or removed.\n\t */\n\tsetDirty(): void;\n}\n\n/**\n * \\`LView\\` stores all of the information needed to process the instructions as\n * they are invoked from the template. Each embedded view and component view has its\n * own \\`LView\\`. When processing a particular view, we set the \\`viewData\\` to that\n * \\`LView\\`. When that view is done processing, the \\`viewData\\` is set back to\n * whatever the original \\`viewData\\` was before (the parent \\`LView\\`).\n *\n * Keeping separate state for each view facilities view insertion / deletion, so we\n * don't have to edit the data array based on which views are present.\n */\ndeclare interface LView<T = unknown> extends Array<any> {\n\t/**\n\t * Human readable representation of the \\`LView\\`.\n\t *\n\t * NOTE: This property only exists if \\`ngDevMode\\` is set to \\`true\\` and it is not present in\n\t * production. Its presence is purely to help debug issue in development, and should not be relied\n\t * on in production application.\n\t */\n\tdebug?: LViewDebug;\n\t/**\n\t * The node into which this \\`LView\\` is inserted.\n\t */\n\t[HOST]: RElement | null;\n\t/**\n\t * The static data for this view. We need a reference to this so we can easily walk up the\n\t * node tree in DI and get the TView.data array associated with a node (where the\n\t * directive defs are stored).\n\t */\n\treadonly [TVIEW]: TView;\n\t/** Flags for this view. See LViewFlags for more info. */\n\t[FLAGS]: LViewFlags;\n\t/**\n\t * This may store an {@link LView} or {@link LContainer}.\n\t *\n\t * \\`LView\\` - The parent view. This is needed when we exit the view and must restore the previous\n\t * LView. Without this, the render method would have to keep a stack of\n\t * views as it is recursively rendering templates.\n\t *\n\t * \\`LContainer\\` - The current view is part of a container, and is an embedded view.\n\t */\n\t[PARENT]: LView | LContainer | null;\n\t/**\n\t *\n\t * The next sibling LView or LContainer.\n\t *\n\t * Allows us to propagate between sibling view states that aren't in the same\n\t * container. Embedded views already have a node.next, but it is only set for\n\t * views in the same container. We need a way to link component views and views\n\t * across containers as well.\n\t */\n\t[NEXT]: LView | LContainer | null;\n\t/** Queries active for this view - nodes from a view are reported to those queries. */\n\t[QUERIES]: LQueries | null;\n\t/**\n\t * Store the \\`TNode\\` of the location where the current \\`LView\\` is inserted into.\n\t *\n\t * Given:\n\t * \\`\\`\\`\n\t * <div>\n\t *   <ng-template><span></span></ng-template>\n\t * </div>\n\t * \\`\\`\\`\n\t *\n\t * We end up with two \\`TView\\`s.\n\t * - \\`parent\\` \\`TView\\` which contains \\`<div><!-- anchor --></div>\\`\n\t * - \\`child\\` \\`TView\\` which contains \\`<span></span>\\`\n\t *\n\t * Typically the \\`child\\` is inserted into the declaration location of the \\`parent\\`, but it can be\n\t * inserted anywhere. Because it can be inserted anywhere it is not possible to store the\n\t * insertion information in the \\`TView\\` and instead we must store it in the \\`LView[T_HOST]\\`.\n\t *\n\t * So to determine where is our insertion parent we would execute:\n\t * \\`\\`\\`\n\t * const parentLView = lView[PARENT];\n\t * const parentTNode = lView[T_HOST];\n\t * const insertionParent = parentLView[parentTNode.index];\n\t * \\`\\`\\`\n\t *\n\t *\n\t * If \\`null\\`, this is the root view of an application (root component is in this view) and it has\n\t * no parents.\n\t */\n\t[T_HOST]: TNode | null;\n\t/**\n\t * When a view is destroyed, listeners need to be released and outputs need to be\n\t * unsubscribed. This context array stores both listener functions wrapped with\n\t * their context and output subscription instances for a particular view.\n\t *\n\t * These change per LView instance, so they cannot be stored on TView. Instead,\n\t * TView.cleanup saves an index to the necessary context in this array.\n\t *\n\t * After \\`LView\\` is created it is possible to attach additional instance specific functions at the\n\t * end of the \\`lView[CLEANUP]\\` because we know that no more \\`T\\` level cleanup functions will be\n\t * added here.\n\t */\n\t[CLEANUP]: any[] | null;\n\t/**\n\t * - For dynamic views, this is the context with which to render the template (e.g.\n\t *   \\`NgForContext\\`), or \\`{}\\` if not defined explicitly.\n\t * - For root view of the root component it's a reference to the component instance itself.\n\t * - For components, the context is a reference to the component instance itself.\n\t * - For inline views, the context is null.\n\t */\n\t[CONTEXT]: T;\n\t/** An optional Module Injector to be used as fall back after Element Injectors are consulted. */\n\treadonly [INJECTOR_2]: Injector | null;\n\t/** Factory to be used for creating Renderer. */\n\t[RENDERER_FACTORY]: RendererFactory;\n\t/** Renderer to be used for this view. */\n\t[RENDERER]: Renderer;\n\t/** An optional custom sanitizer. */\n\t[SANITIZER]: Sanitizer | null;\n\t/**\n\t * Reference to the first LView or LContainer beneath this LView in\n\t * the hierarchy.\n\t *\n\t * Necessary to store this so views can traverse through their nested views\n\t * to remove listeners and call onDestroy callbacks.\n\t */\n\t[CHILD_HEAD]: LView | LContainer | null;\n\t/**\n\t * The last LView or LContainer beneath this LView in the hierarchy.\n\t *\n\t * The tail allows us to quickly add a new state to the end of the view list\n\t * without having to propagate starting from the first child.\n\t */\n\t[CHILD_TAIL]: LView | LContainer | null;\n\t/**\n\t * View where this view's template was declared.\n\t *\n\t * The template for a dynamically created view may be declared in a different view than\n\t * it is inserted. We already track the \"insertion view\" (view where the template was\n\t * inserted) in LView[PARENT], but we also need access to the \"declaration view\"\n\t * (view where the template was declared). Otherwise, we wouldn't be able to call the\n\t * view's template function with the proper contexts. Context should be inherited from\n\t * the declaration view tree, not the insertion view tree.\n\t *\n\t * Example (AppComponent template):\n\t *\n\t * <ng-template #foo></ng-template>       <-- declared here -->\n\t * <some-comp [tpl]=\"foo\"></some-comp>    <-- inserted inside this component -->\n\t *\n\t * The <ng-template> above is declared in the AppComponent template, but it will be passed into\n\t * SomeComp and inserted there. In this case, the declaration view would be the AppComponent,\n\t * but the insertion view would be SomeComp. When we are removing views, we would want to\n\t * traverse through the insertion view to clean up listeners. When we are calling the\n\t * template function during change detection, we need the declaration view to get inherited\n\t * context.\n\t */\n\t[DECLARATION_VIEW]: LView | null;\n\t/**\n\t * Points to the declaration component view, used to track transplanted \\`LView\\`s.\n\t *\n\t * See: \\`DECLARATION_VIEW\\` which points to the actual \\`LView\\` where it was declared, whereas\n\t * \\`DECLARATION_COMPONENT_VIEW\\` points to the component which may not be same as\n\t * \\`DECLARATION_VIEW\\`.\n\t *\n\t * Example:\n\t * \\`\\`\\`\n\t * <#VIEW #myComp>\n\t *  <div *ngIf=\"true\">\n\t *   <ng-template #myTmpl>...</ng-template>\n\t *  </div>\n\t * </#VIEW>\n\t * \\`\\`\\`\n\t * In the above case \\`DECLARATION_VIEW\\` for \\`myTmpl\\` points to the \\`LView\\` of \\`ngIf\\` whereas\n\t * \\`DECLARATION_COMPONENT_VIEW\\` points to \\`LView\\` of the \\`myComp\\` which owns the template.\n\t *\n\t * The reason for this is that all embedded views are always check-always whereas the component\n\t * view can be check-always or on-push. When we have a transplanted view it is important to\n\t * determine if we have transplanted a view from check-always declaration to on-push insertion\n\t * point. In such a case the transplanted view needs to be added to the \\`LContainer\\` in the\n\t * declared \\`LView\\` and CD during the declared view CD (in addition to the CD at the insertion\n\t * point.) (Any transplanted views which are intra Component are of no interest because the CD\n\t * strategy of declaration and insertion will always be the same, because it is the same\n\t * component.)\n\t *\n\t * Queries already track moved views in \\`LView[DECLARATION_LCONTAINER]\\` and\n\t * \\`LContainer[MOVED_VIEWS]\\`. However the queries also track \\`LView\\`s which moved within the same\n\t * component \\`LView\\`. Transplanted views are a subset of moved views, and we use\n\t * \\`DECLARATION_COMPONENT_VIEW\\` to differentiate them. As in this example.\n\t *\n\t * Example showing intra component \\`LView\\` movement.\n\t * \\`\\`\\`\n\t * <#VIEW #myComp>\n\t *   <div *ngIf=\"condition; then thenBlock else elseBlock\"></div>\n\t *   <ng-template #thenBlock>Content to render when condition is true.</ng-template>\n\t *   <ng-template #elseBlock>Content to render when condition is false.</ng-template>\n\t * </#VIEW>\n\t * \\`\\`\\`\n\t * The \\`thenBlock\\` and \\`elseBlock\\` is moved but not transplanted.\n\t *\n\t * Example showing inter component \\`LView\\` movement (transplanted view).\n\t * \\`\\`\\`\n\t * <#VIEW #myComp>\n\t *   <ng-template #myTmpl>...</ng-template>\n\t *   <insertion-component [template]=\"myTmpl\"></insertion-component>\n\t * </#VIEW>\n\t * \\`\\`\\`\n\t * In the above example \\`myTmpl\\` is passed into a different component. If \\`insertion-component\\`\n\t * instantiates \\`myTmpl\\` and \\`insertion-component\\` is on-push then the \\`LContainer\\` needs to be\n\t * marked as containing transplanted views and those views need to be CD as part of the\n\t * declaration CD.\n\t *\n\t *\n\t * When change detection runs, it iterates over \\`[MOVED_VIEWS]\\` and CDs any child \\`LView\\`s where\n\t * the \\`DECLARATION_COMPONENT_VIEW\\` of the current component and the child \\`LView\\` does not match\n\t * (it has been transplanted across components.)\n\t *\n\t * Note: \\`[DECLARATION_COMPONENT_VIEW]\\` points to itself if the LView is a component view (the\n\t *       simplest / most common case).\n\t *\n\t * see also:\n\t *   - https://hackmd.io/@mhevery/rJUJsvv9H write up of the problem\n\t *   - \\`LContainer[HAS_TRANSPLANTED_VIEWS]\\` which marks which \\`LContainer\\` has transplanted views.\n\t *   - \\`LContainer[TRANSPLANT_HEAD]\\` and \\`LContainer[TRANSPLANT_TAIL]\\` storage for transplanted\n\t *   - \\`LView[DECLARATION_LCONTAINER]\\` similar problem for queries\n\t *   - \\`LContainer[MOVED_VIEWS]\\` similar problem for queries\n\t */\n\t[DECLARATION_COMPONENT_VIEW]: LView;\n\t/**\n\t * A declaration point of embedded views (ones instantiated based on the content of a\n\t * <ng-template>), null for other types of views.\n\t *\n\t * We need to track all embedded views created from a given declaration point so we can prepare\n\t * query matches in a proper order (query matches are ordered based on their declaration point and\n\t * _not_ the insertion point).\n\t */\n\t[DECLARATION_LCONTAINER]: LContainer | null;\n\t/**\n\t * More flags for this view. See PreOrderHookFlags for more info.\n\t */\n\t[PREORDER_HOOK_FLAGS]: PreOrderHookFlags;\n\t/**\n\t * The number of direct transplanted views which need a refresh or have descendants themselves\n\t * that need a refresh but have not marked their ancestors as Dirty. This tells us that during\n\t * change detection we should still descend to find those children to refresh, even if the parents\n\t * are not \\`Dirty\\`/\\`CheckAlways\\`.\n\t */\n\t[TRANSPLANTED_VIEWS_TO_REFRESH]: number;\n\t/** Unique ID of the view. Used for \\`__ngContext__\\` lookups in the \\`LView\\` registry. */\n\t[ID]: number;\n\t/**\n\t * Optional injector assigned to embedded views that takes\n\t * precedence over the element and module injectors.\n\t */\n\treadonly [EMBEDDED_VIEW_INJECTOR]: Injector | null;\n}\n\n/**\n * Human readable version of the \\`LView\\`.\n *\n * \\`LView\\` is a data structure used internally to keep track of views. The \\`LView\\` is designed for\n * efficiency and so at times it is difficult to read or write tests which assert on its values. For\n * this reason when \\`ngDevMode\\` is true we patch a \\`LView.debug\\` property which points to\n * \\`LViewDebug\\` for easier debugging and test writing. It is the intent of \\`LViewDebug\\` to be used\n * in tests.\n */\ndeclare interface LViewDebug<T = unknown> {\n\t/**\n\t * Flags associated with the \\`LView\\` unpacked into a more readable state.\n\t *\n\t * See \\`LViewFlags\\` for the flag meanings.\n\t */\n\treadonly flags: {\n\t\tinitPhaseState: number;\n\t\tcreationMode: boolean;\n\t\tfirstViewPass: boolean;\n\t\tcheckAlways: boolean;\n\t\tdirty: boolean;\n\t\tattached: boolean;\n\t\tdestroyed: boolean;\n\t\tisRoot: boolean;\n\t\tindexWithinInitPhase: number;\n\t};\n\t/**\n\t * Associated TView\n\t */\n\treadonly tView: TView;\n\t/**\n\t * Parent view (or container)\n\t */\n\treadonly parent: LViewDebug | LContainerDebug | null;\n\t/**\n\t * Next sibling to the \\`LView\\`.\n\t */\n\treadonly next: LViewDebug | LContainerDebug | null;\n\t/**\n\t * The context used for evaluation of the \\`LView\\`\n\t *\n\t * (Usually the component)\n\t */\n\treadonly context: T;\n\t/**\n\t * Hierarchical tree of nodes.\n\t */\n\treadonly nodes: DebugNode_2[];\n\t/**\n\t * Template structure (no instance data).\n\t * (Shows how TNodes are connected)\n\t */\n\treadonly template: string;\n\t/**\n\t * HTML representation of the \\`LView\\`.\n\t *\n\t * This is only approximate to actual HTML as child \\`LView\\`s are removed.\n\t */\n\treadonly html: string;\n\t/**\n\t * The host element to which this \\`LView\\` is attached.\n\t */\n\treadonly hostHTML: string | null;\n\t/**\n\t * Child \\`LView\\`s\n\t */\n\treadonly childViews: Array<LViewDebug | LContainerDebug>;\n\t/**\n\t * Sub range of \\`LView\\` containing decls (DOM elements).\n\t */\n\treadonly decls: LViewDebugRange;\n\t/**\n\t * Sub range of \\`LView\\` containing vars (bindings).\n\t */\n\treadonly vars: LViewDebugRange;\n\t/**\n\t * Sub range of \\`LView\\` containing expando (used by DI).\n\t */\n\treadonly expando: LViewDebugRange;\n}\n\n/**\n * \\`LView\\` is subdivided to ranges where the actual data is stored. Some of these ranges such as\n * \\`decls\\` and \\`vars\\` are known at compile time. Other such as \\`i18n\\` and \\`expando\\` are runtime only\n * concepts.\n */\ndeclare interface LViewDebugRange {\n\t/**\n\t * The starting index in \\`LView\\` where the range begins. (Inclusive)\n\t */\n\tstart: number;\n\t/**\n\t * The ending index in \\`LView\\` where the range ends. (Exclusive)\n\t */\n\tend: number;\n\t/**\n\t * The length of the range\n\t */\n\tlength: number;\n\t/**\n\t * The merged content of the range. \\`t\\` contains data from \\`TView.data\\` and \\`l\\` contains \\`LView\\`\n\t * data at an index.\n\t */\n\tcontent: LViewDebugRangeContent[];\n}\n\n/**\n * For convenience the static and instance portions of \\`TView\\` and \\`LView\\` are merged into a single\n * object in \\`LViewRange\\`.\n */\ndeclare interface LViewDebugRangeContent {\n\t/**\n\t * Index into original \\`LView\\` or \\`TView.data\\`.\n\t */\n\tindex: number;\n\t/**\n\t * Value from the \\`TView.data[index]\\` location.\n\t */\n\tt: any;\n\t/**\n\t * Value from the \\`LView[index]\\` location.\n\t */\n\tl: any;\n}\n\n/** Flags associated with an LView (saved in LView[FLAGS]) */\ndeclare const enum LViewFlags {\n\t/** The state of the init phase on the first 2 bits */\n\tInitPhaseStateIncrementer = 1,\n\tInitPhaseStateMask = 3,\n\t/**\n\t * Whether or not the view is in creationMode.\n\t *\n\t * This must be stored in the view rather than using \\`data\\` as a marker so that\n\t * we can properly support embedded views. Otherwise, when exiting a child view\n\t * back into the parent view, \\`data\\` will be defined and \\`creationMode\\` will be\n\t * improperly reported as false.\n\t */\n\tCreationMode = 4,\n\t/**\n\t * Whether or not this LView instance is on its first processing pass.\n\t *\n\t * An LView instance is considered to be on its \"first pass\" until it\n\t * has completed one creation mode run and one update mode run. At this\n\t * time, the flag is turned off.\n\t */\n\tFirstLViewPass = 8,\n\t/** Whether this view has default change detection strategy (checks always) or onPush */\n\tCheckAlways = 16,\n\t/** Whether or not this view is currently dirty (needing check) */\n\tDirty = 32,\n\t/** Whether or not this view is currently attached to change detection tree. */\n\tAttached = 64,\n\t/** Whether or not this view is destroyed. */\n\tDestroyed = 128,\n\t/** Whether or not this view is the root view */\n\tIsRoot = 256,\n\t/**\n\t * Whether this moved LView was needs to be refreshed at the insertion location because the\n\t * declaration was dirty.\n\t */\n\tRefreshTransplantedView = 512,\n\t/** Indicates that the view **or any of its ancestors** have an embedded view injector. */\n\tHasEmbeddedViewInjector = 1024,\n\t/**\n\t * Index of the current init phase on last 21 bits\n\t */\n\tIndexWithinInitPhaseIncrementer = 2048,\n\tIndexWithinInitPhaseShift = 11,\n\tIndexWithinInitPhaseReset = 2047\n}\n\n/**\n * Use this enum at bootstrap as an option of \\`bootstrapModule\\` to define the strategy\n * that the compiler should use in case of missing translations:\n * - Error: throw if you have missing translations.\n * - Warning (default): show a warning in the console and/or shell.\n * - Ignore: do nothing.\n *\n * See the [i18n guide](guide/i18n-common-merge#report-missing-translations) for more information.\n *\n * @usageNotes\n * ### Example\n * \\`\\`\\`typescript\n * import { MissingTranslationStrategy } from '@angular/core';\n * import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n * import { AppModule } from './app/app.module';\n *\n * platformBrowserDynamic().bootstrapModule(AppModule, {\n *   missingTranslation: MissingTranslationStrategy.Error\n * });\n * \\`\\`\\`\n *\n * @publicApi\n */\nexport declare enum MissingTranslationStrategy {\n\tError = 0,\n\tWarning = 1,\n\tIgnore = 2\n}\n\n/**\n * Combination of NgModuleFactory and ComponentFactories.\n *\n * @publicApi\n *\n * @deprecated\n * Ivy JIT mode doesn't require accessing this symbol.\n * See [JIT API changes due to ViewEngine deprecation](guide/deprecations#jit-api-changes) for\n * additional context.\n */\nexport declare class ModuleWithComponentFactories<T> {\n\tngModuleFactory: NgModuleFactory<T>;\n\tcomponentFactories: ComponentFactory<any>[];\n\tconstructor(ngModuleFactory: NgModuleFactory<T>, componentFactories: ComponentFactory<any>[]);\n}\n\n/**\n * A wrapper around an NgModule that associates it with [providers](guide/glossary#provider\n * \"Definition\"). Usage without a generic type is deprecated.\n *\n * @see [Deprecations](guide/deprecations#modulewithproviders-type-without-a-generic)\n *\n * @publicApi\n */\nexport declare interface ModuleWithProviders<T> {\n\tngModule: Type<T>;\n\tproviders?: Provider[];\n}\n\ndeclare const MOVED_VIEWS = 9;\n\ndeclare const NATIVE = 7;\n\ndeclare const NEXT = 4;\n\n/**\n * A type describing supported iterable types.\n *\n * @publicApi\n */\nexport declare type NgIterable<T> = Array<T> | Iterable<T>;\n\n/**\n * Type of the NgModule metadata.\n *\n * @publicApi\n */\nexport declare interface NgModule {\n\t/**\n\t * The set of injectable objects that are available in the injector\n\t * of this module.\n\t *\n\t * @see [Dependency Injection guide](guide/dependency-injection)\n\t * @see [NgModule guide](guide/providers)\n\t *\n\t * @usageNotes\n\t *\n\t * Dependencies whose providers are listed here become available for injection\n\t * into any component, directive, pipe or service that is a child of this injector.\n\t * The NgModule used for bootstrapping uses the root injector, and can provide dependencies\n\t * to any part of the app.\n\t *\n\t * A lazy-loaded module has its own injector, typically a child of the app root injector.\n\t * Lazy-loaded services are scoped to the lazy-loaded module's injector.\n\t * If a lazy-loaded module also provides the \\`UserService\\`, any component created\n\t * within that module's context (such as by router navigation) gets the local instance\n\t * of the service, not the instance in the root injector.\n\t * Components in external modules continue to receive the instance provided by their injectors.\n\t *\n\t * ### Example\n\t *\n\t * The following example defines a class that is injected in\n\t * the HelloWorld NgModule:\n\t *\n\t * \\`\\`\\`\n\t * class Greeter {\n\t *    greet(name:string) {\n\t *      return 'Hello ' + name + '!';\n\t *    }\n\t * }\n\t *\n\t * @NgModule({\n\t *   providers: [\n\t *     Greeter\n\t *   ]\n\t * })\n\t * class HelloWorld {\n\t *   greeter:Greeter;\n\t *\n\t *   constructor(greeter:Greeter) {\n\t *     this.greeter = greeter;\n\t *   }\n\t * }\n\t * \\`\\`\\`\n\t */\n\tproviders?: Provider[];\n\t/**\n\t * The set of components, directives, and pipes ([declarables](guide/glossary#declarable))\n\t * that belong to this module.\n\t *\n\t * @usageNotes\n\t *\n\t * The set of selectors that are available to a template include those declared here, and\n\t * those that are exported from imported NgModules.\n\t *\n\t * Declarables must belong to exactly one module.\n\t * The compiler emits an error if you try to declare the same class in more than one module.\n\t * Be careful not to declare a class that is imported from another module.\n\t *\n\t * ### Example\n\t *\n\t * The following example allows the CommonModule to use the \\`NgFor\\`\n\t * directive.\n\t *\n\t * \\`\\`\\`javascript\n\t * @NgModule({\n\t *   declarations: [NgFor]\n\t * })\n\t * class CommonModule {\n\t * }\n\t * \\`\\`\\`\n\t */\n\tdeclarations?: Array<Type<any> | any[]>;\n\t/**\n\t * The set of NgModules whose exported [declarables](guide/glossary#declarable)\n\t * are available to templates in this module.\n\t *\n\t * @usageNotes\n\t *\n\t * A template can use exported declarables from any\n\t * imported module, including those from modules that are imported indirectly\n\t * and re-exported.\n\t * For example, \\`ModuleA\\` imports \\`ModuleB\\`, and also exports\n\t * it, which makes the declarables from \\`ModuleB\\` available\n\t * wherever \\`ModuleA\\` is imported.\n\t *\n\t * ### Example\n\t *\n\t * The following example allows MainModule to use anything exported by\n\t * \\`CommonModule\\`:\n\t *\n\t * \\`\\`\\`javascript\n\t * @NgModule({\n\t *   imports: [CommonModule]\n\t * })\n\t * class MainModule {\n\t * }\n\t * \\`\\`\\`\n\t *\n\t */\n\timports?: Array<Type<any> | ModuleWithProviders<{}> | any[]>;\n\t/**\n\t * The set of components, directives, and pipes declared in this\n\t * NgModule that can be used in the template of any component that is part of an\n\t * NgModule that imports this NgModule. Exported declarations are the module's public API.\n\t *\n\t * A declarable belongs to one and only one NgModule.\n\t * A module can list another module among its exports, in which case all of that module's\n\t * public declaration are exported.\n\t *\n\t * @usageNotes\n\t *\n\t * Declarations are private by default.\n\t * If this ModuleA does not export UserComponent, then only the components within this\n\t * ModuleA can use UserComponent.\n\t *\n\t * ModuleA can import ModuleB and also export it, making exports from ModuleB\n\t * available to an NgModule that imports ModuleA.\n\t *\n\t * ### Example\n\t *\n\t * The following example exports the \\`NgFor\\` directive from CommonModule.\n\t *\n\t * \\`\\`\\`javascript\n\t * @NgModule({\n\t *   exports: [NgFor]\n\t * })\n\t * class CommonModule {\n\t * }\n\t * \\`\\`\\`\n\t */\n\texports?: Array<Type<any> | any[]>;\n\t/**\n\t * The set of components to compile when this NgModule is defined,\n\t * so that they can be dynamically loaded into the view.\n\t *\n\t * For each component listed here, Angular creates a \\`ComponentFactory\\`\n\t * and stores it in the \\`ComponentFactoryResolver\\`.\n\t *\n\t * Angular automatically adds components in the module's bootstrap\n\t * and route definitions into the \\`entryComponents\\` list. Use this\n\t * option to add components that are bootstrapped\n\t * using one of the imperative techniques, such as \\`ViewContainerRef.createComponent()\\`.\n\t *\n\t * @see [Entry Components](guide/entry-components)\n\t * @deprecated\n\t * Since 9.0.0. With Ivy, this property is no longer necessary.\n\t * (You may need to keep these if building a library that will be consumed by a View Engine\n\t * application.)\n\t */\n\tentryComponents?: Array<Type<any> | any[]>;\n\t/**\n\t * The set of components that are bootstrapped when\n\t * this module is bootstrapped. The components listed here\n\t * are automatically added to \\`entryComponents\\`.\n\t */\n\tbootstrap?: Array<Type<any> | any[]>;\n\t/**\n\t * The set of schemas that declare elements to be allowed in the NgModule.\n\t * Elements and properties that are neither Angular components nor directives\n\t * must be declared in a schema.\n\t *\n\t * Allowed value are \\`NO_ERRORS_SCHEMA\\` and \\`CUSTOM_ELEMENTS_SCHEMA\\`.\n\t *\n\t * @security When using one of \\`NO_ERRORS_SCHEMA\\` or \\`CUSTOM_ELEMENTS_SCHEMA\\`\n\t * you must ensure that allowed elements and properties securely escape inputs.\n\t */\n\tschemas?: Array<SchemaMetadata | any[]>;\n\t/**\n\t * A name or path that uniquely identifies this NgModule in \\`getNgModuleById\\`.\n\t * If left \\`undefined\\`, the NgModule is not registered with \\`getNgModuleById\\`.\n\t */\n\tid?: string;\n\t/**\n\t * When present, this module is ignored by the AOT compiler.\n\t * It remains in distributed code, and the JIT compiler attempts to compile it\n\t * at run time, in the browser.\n\t * To ensure the correct behavior, the app must import \\`@angular/compiler\\`.\n\t */\n\tjit?: true;\n}\n\n/**\n * @Annotation\n * @publicApi\n */\nexport declare const NgModule: NgModuleDecorator;\n\n/**\n * Type of the NgModule decorator / constructor function.\n *\n * @publicApi\n */\nexport declare interface NgModuleDecorator {\n\t/**\n\t * Decorator that marks a class as an NgModule and supplies configuration metadata.\n\t */\n\t(obj?: NgModule): TypeDecorator;\n\tnew(obj?: NgModule): NgModule;\n}\n\n/**\n * @publicApi\n *\n * @deprecated\n * This class was mostly used as a part of ViewEngine-based JIT API and is no longer needed in Ivy\n * JIT mode. See [JIT API changes due to ViewEngine deprecation](guide/deprecations#jit-api-changes)\n * for additional context. Angular provides APIs that accept NgModule classes directly (such as\n * [PlatformRef.bootstrapModule](api/core/PlatformRef#bootstrapModule) and\n * [createNgModule](api/core/createNgModule)), consider switching to those APIs instead of\n * using factory-based ones.\n */\nexport declare abstract class NgModuleFactory<T> {\n\tabstract get moduleType(): Type<T>;\n\tabstract create(parentInjector: Injector | null): NgModuleRef<T>;\n}\n\n/**\n * Represents an instance of an \\`NgModule\\` created by an \\`NgModuleFactory\\`.\n * Provides access to the \\`NgModule\\` instance and related objects.\n *\n * @publicApi\n */\nexport declare abstract class NgModuleRef<T> {\n\t/**\n\t * The injector that contains all of the providers of the \\`NgModule\\`.\n\t */\n\tabstract get injector(): EnvironmentInjector;\n\t/**\n\t * The resolver that can retrieve component factories in a context of this module.\n\t *\n\t * Note: since v13, dynamic component creation via\n\t * [\\`ViewContainerRef.createComponent\\`](api/core/ViewContainerRef#createComponent)\n\t * does **not** require resolving component factory: component class can be used directly.\n\t *\n\t * @deprecated Angular no longer requires Component factories. Please use other APIs where\n\t *     Component class can be used directly.\n\t */\n\tabstract get componentFactoryResolver(): ComponentFactoryResolver;\n\t/**\n\t * The \\`NgModule\\` instance.\n\t */\n\tabstract get instance(): T;\n\t/**\n\t * Destroys the module instance and all of the data structures associated with it.\n\t */\n\tabstract destroy(): void;\n\t/**\n\t * Registers a callback to be executed when the module is destroyed.\n\t */\n\tabstract onDestroy(callback: () => void): void;\n}\n\n/**\n * A token for third-party components that can register themselves with NgProbe.\n *\n * @publicApi\n */\nexport declare class NgProbeToken {\n\tname: string;\n\ttoken: any;\n\tconstructor(name: string, token: any);\n}\n\n/**\n * An injectable service for executing work inside or outside of the Angular zone.\n *\n * The most common use of this service is to optimize performance when starting a work consisting of\n * one or more asynchronous tasks that don't require UI updates or error handling to be handled by\n * Angular. Such tasks can be kicked off via {@link #runOutsideAngular} and if needed, these tasks\n * can reenter the Angular zone via {@link #run}.\n *\n * <!-- TODO: add/fix links to:\n *   - docs explaining zones and the use of zones in Angular and change-detection\n *   - link to runOutsideAngular/run (throughout this file!)\n *   -->\n *\n * @usageNotes\n * ### Example\n *\n * \\`\\`\\`\n * import {Component, NgZone} from '@angular/core';\n * import {NgIf} from '@angular/common';\n *\n * @Component({\n *   selector: 'ng-zone-demo',\n *   template: \\`\n *     <h2>Demo: NgZone</h2>\n *\n *     <p>Progress: {{progress}}%</p>\n *     <p *ngIf=\"progress >= 100\">Done processing {{label}} of Angular zone!</p>\n *\n *     <button (click)=\"processWithinAngularZone()\">Process within Angular zone</button>\n *     <button (click)=\"processOutsideOfAngularZone()\">Process outside of Angular zone</button>\n *   \\`,\n * })\n * export class NgZoneDemo {\n *   progress: number = 0;\n *   label: string;\n *\n *   constructor(private _ngZone: NgZone) {}\n *\n *   // Loop inside the Angular zone\n *   // so the UI DOES refresh after each setTimeout cycle\n *   processWithinAngularZone() {\n *     this.label = 'inside';\n *     this.progress = 0;\n *     this._increaseProgress(() => console.log('Inside Done!'));\n *   }\n *\n *   // Loop outside of the Angular zone\n *   // so the UI DOES NOT refresh after each setTimeout cycle\n *   processOutsideOfAngularZone() {\n *     this.label = 'outside';\n *     this.progress = 0;\n *     this._ngZone.runOutsideAngular(() => {\n *       this._increaseProgress(() => {\n *         // reenter the Angular zone and display done\n *         this._ngZone.run(() => { console.log('Outside Done!'); });\n *       });\n *     });\n *   }\n *\n *   _increaseProgress(doneCallback: () => void) {\n *     this.progress += 1;\n *     console.log(\\`Current progress: \\${this.progress}%\\`);\n *\n *     if (this.progress < 100) {\n *       window.setTimeout(() => this._increaseProgress(doneCallback), 10);\n *     } else {\n *       doneCallback();\n *     }\n *   }\n * }\n * \\`\\`\\`\n *\n * @publicApi\n */\nexport declare class NgZone {\n\treadonly hasPendingMacrotasks: boolean;\n\treadonly hasPendingMicrotasks: boolean;\n\t/**\n\t * Whether there are no outstanding microtasks or macrotasks.\n\t */\n\treadonly isStable: boolean;\n\t/**\n\t * Notifies when code enters Angular Zone. This gets fired first on VM Turn.\n\t */\n\treadonly onUnstable: EventEmitter<any>;\n\t/**\n\t * Notifies when there is no more microtasks enqueued in the current VM Turn.\n\t * This is a hint for Angular to do change detection, which may enqueue more microtasks.\n\t * For this reason this event can fire multiple times per VM Turn.\n\t */\n\treadonly onMicrotaskEmpty: EventEmitter<any>;\n\t/**\n\t * Notifies when the last \\`onMicrotaskEmpty\\` has run and there are no more microtasks, which\n\t * implies we are about to relinquish VM turn.\n\t * This event gets called just once.\n\t */\n\treadonly onStable: EventEmitter<any>;\n\t/**\n\t * Notifies that an error has been delivered.\n\t */\n\treadonly onError: EventEmitter<any>;\n\tconstructor({ enableLongStackTrace, shouldCoalesceEventChangeDetection, shouldCoalesceRunChangeDetection }: {\n\t\tenableLongStackTrace?: boolean | undefined;\n\t\tshouldCoalesceEventChangeDetection?: boolean | undefined;\n\t\tshouldCoalesceRunChangeDetection?: boolean | undefined;\n\t});\n\tstatic isInAngularZone(): boolean;\n\tstatic assertInAngularZone(): void;\n\tstatic assertNotInAngularZone(): void;\n\t/**\n\t * Executes the \\`fn\\` function synchronously within the Angular zone and returns value returned by\n\t * the function.\n\t *\n\t * Running functions via \\`run\\` allows you to reenter Angular zone from a task that was executed\n\t * outside of the Angular zone (typically started via {@link #runOutsideAngular}).\n\t *\n\t * Any future tasks or microtasks scheduled from within this function will continue executing from\n\t * within the Angular zone.\n\t *\n\t * If a synchronous error happens it will be rethrown and not reported via \\`onError\\`.\n\t */\n\trun<T>(fn: (...args: any[]) => T, applyThis?: any, applyArgs?: any[]): T;\n\t/**\n\t * Executes the \\`fn\\` function synchronously within the Angular zone as a task and returns value\n\t * returned by the function.\n\t *\n\t * Running functions via \\`run\\` allows you to reenter Angular zone from a task that was executed\n\t * outside of the Angular zone (typically started via {@link #runOutsideAngular}).\n\t *\n\t * Any future tasks or microtasks scheduled from within this function will continue executing from\n\t * within the Angular zone.\n\t *\n\t * If a synchronous error happens it will be rethrown and not reported via \\`onError\\`.\n\t */\n\trunTask<T>(fn: (...args: any[]) => T, applyThis?: any, applyArgs?: any[], name?: string): T;\n\t/**\n\t * Same as \\`run\\`, except that synchronous errors are caught and forwarded via \\`onError\\` and not\n\t * rethrown.\n\t */\n\trunGuarded<T>(fn: (...args: any[]) => T, applyThis?: any, applyArgs?: any[]): T;\n\t/**\n\t * Executes the \\`fn\\` function synchronously in Angular's parent zone and returns value returned by\n\t * the function.\n\t *\n\t * Running functions via {@link #runOutsideAngular} allows you to escape Angular's zone and do\n\t * work that\n\t * doesn't trigger Angular change-detection or is subject to Angular's error handling.\n\t *\n\t * Any future tasks or microtasks scheduled from within this function will continue executing from\n\t * outside of the Angular zone.\n\t *\n\t * Use {@link #run} to reenter the Angular zone and do work that updates the application model.\n\t */\n\trunOutsideAngular<T>(fn: (...args: any[]) => T): T;\n}\n\n/**\n * Defines a schema that allows any property on any element.\n *\n * This schema allows you to ignore the errors related to any unknown elements or properties in a\n * template. The usage of this schema is generally discouraged because it prevents useful validation\n * and may hide real errors in your template. Consider using the \\`CUSTOM_ELEMENTS_SCHEMA\\` instead.\n *\n * @publicApi\n */\nexport declare const NO_ERRORS_SCHEMA: SchemaMetadata;\n\ndeclare interface NodeInjectorDebug {\n\t/**\n\t * Instance bloom. Does the current injector have a provider with a given bloom mask.\n\t */\n\tbloom: string;\n\t/**\n\t * Cumulative bloom. Do any of the above injectors have a provider with a given bloom mask.\n\t */\n\tcumulativeBloom: string;\n\t/**\n\t * A list of providers associated with this injector.\n\t */\n\tproviders: (Type<unknown> | ɵDirectiveDef<unknown> | ɵComponentDef<unknown>)[];\n\t/**\n\t * A list of providers associated with this injector visible to the view of the component only.\n\t */\n\tviewProviders: Type<unknown>[];\n\t/**\n\t * Location of the parent \\`TNode\\`.\n\t */\n\tparentInjectorIndex: number;\n}\n\n/**\n * @description\n * A lifecycle hook that is called when any data-bound property of a directive changes.\n * Define an \\`ngOnChanges()\\` method to handle the changes.\n *\n * @see \\`DoCheck\\`\n * @see \\`OnInit\\`\n * @see [Lifecycle hooks guide](guide/lifecycle-hooks)\n *\n * @usageNotes\n * The following snippet shows how a component can implement this interface to\n * define an on-changes handler for an input property.\n *\n * {@example core/ts/metadata/lifecycle_hooks_spec.ts region='OnChanges'}\n *\n * @publicApi\n */\nexport declare interface OnChanges {\n\t/**\n\t * A callback method that is invoked immediately after the\n\t * default change detector has checked data-bound properties\n\t * if at least one has changed, and before the view and content\n\t * children are checked.\n\t * @param changes The changed properties.\n\t */\n\tngOnChanges(changes: SimpleChanges): void;\n}\n\n/**\n * A lifecycle hook that is called when a directive, pipe, or service is destroyed.\n * Use for any custom cleanup that needs to occur when the\n * instance is destroyed.\n * @see [Lifecycle hooks guide](guide/lifecycle-hooks)\n *\n * @usageNotes\n * The following snippet shows how a component can implement this interface\n * to define its own custom clean-up method.\n *\n * {@example core/ts/metadata/lifecycle_hooks_spec.ts region='OnDestroy'}\n *\n * @publicApi\n */\nexport declare interface OnDestroy {\n\t/**\n\t * A callback method that performs custom clean-up, invoked immediately\n\t * before a directive, pipe, or service instance is destroyed.\n\t */\n\tngOnDestroy(): void;\n}\n\n/**\n * @description\n * A lifecycle hook that is called after Angular has initialized\n * all data-bound properties of a directive.\n * Define an \\`ngOnInit()\\` method to handle any additional initialization tasks.\n *\n * @see \\`AfterContentInit\\`\n * @see [Lifecycle hooks guide](guide/lifecycle-hooks)\n *\n * @usageNotes\n * The following snippet shows how a component can implement this interface to\n * define its own initialization method.\n *\n * {@example core/ts/metadata/lifecycle_hooks_spec.ts region='OnInit'}\n *\n * @publicApi\n */\nexport declare interface OnInit {\n\t/**\n\t * A callback method that is invoked immediately after the\n\t * default change detector has checked the directive's\n\t * data-bound properties for the first time,\n\t * and before any of the view or content children have been checked.\n\t * It is invoked only once when the directive is instantiated.\n\t */\n\tngOnInit(): void;\n}\n\ndeclare type OpaqueValue = unknown;\n\ndeclare interface OpaqueViewState {\n\t'__brand__': 'Brand for OpaqueViewState that nothing will match';\n}\n\n/**\n * Type of the Optional metadata.\n *\n * @publicApi\n */\nexport declare interface Optional {\n}\n\n/**\n * Optional decorator and metadata.\n *\n * @Annotation\n * @publicApi\n */\nexport declare const Optional: OptionalDecorator;\n\n/**\n * Type of the Optional decorator / constructor function.\n *\n * @publicApi\n */\nexport declare interface OptionalDecorator {\n\t/**\n\t * Parameter decorator to be used on constructor parameters,\n\t * which marks the parameter as being an optional dependency.\n\t * The DI framework provides \\`null\\` if the dependency is not found.\n\t *\n\t * Can be used together with other parameter decorators\n\t * that modify how dependency injection operates.\n\t *\n\t * @usageNotes\n\t *\n\t * The following code allows the possibility of a \\`null\\` result:\n\t *\n\t * <code-example path=\"core/di/ts/metadata_spec.ts\" region=\"Optional\">\n\t * </code-example>\n\t *\n\t * @see [\"Dependency Injection Guide\"](guide/dependency-injection).\n\t */\n\t(): any;\n\tnew(): Optional;\n}\n\n/**\n * Type of the Output metadata.\n *\n * @publicApi\n */\nexport declare interface Output {\n\t/**\n\t * The name of the DOM property to which the output property is bound.\n\t */\n\tbindingPropertyName?: string;\n}\n\n/**\n * @Annotation\n * @publicApi\n */\nexport declare const Output: OutputDecorator;\n\n/**\n * Type of the Output decorator / constructor function.\n *\n * @publicApi\n */\nexport declare interface OutputDecorator {\n\t/**\n\t * Decorator that marks a class field as an output property and supplies configuration metadata.\n\t * The DOM property bound to the output property is automatically updated during change detection.\n\t *\n\t * @usageNotes\n\t *\n\t * You can supply an optional name to use in templates when the\n\t * component is instantiated, that maps to the\n\t * name of the bound property. By default, the original\n\t * name of the bound property is used for output binding.\n\t *\n\t * See \\`Input\\` decorator for an example of providing a binding name.\n\t *\n\t * @see [Input and Output properties](guide/inputs-outputs)\n\t *\n\t */\n\t(bindingPropertyName?: string): any;\n\tnew(bindingPropertyName?: string): any;\n}\n\n/**\n * A [DI token](guide/glossary#di-token \"DI token definition\") that indicates the root directory of\n * the application\n * @publicApi\n */\nexport declare const PACKAGE_ROOT_URL: InjectionToken<string>;\n\ndeclare const PARENT = 3;\n\n/**\n * Type of the Pipe metadata.\n *\n * @publicApi\n */\nexport declare interface Pipe {\n\t/**\n\t * The pipe name to use in template bindings.\n\t * Typically uses [lowerCamelCase](guide/glossary#case-types)\n\t * because the name cannot contain hyphens.\n\t */\n\tname: string;\n\t/**\n\t * When true, the pipe is pure, meaning that the\n\t * \\`transform()\\` method is invoked only when its input arguments\n\t * change. Pipes are pure by default.\n\t *\n\t * If the pipe has internal state (that is, the result\n\t * depends on state other than its arguments), set \\`pure\\` to false.\n\t * In this case, the pipe is invoked on each change-detection cycle,\n\t * even if the arguments have not changed.\n\t */\n\tpure?: boolean;\n\t/**\n\t * Angular pipes marked as \\`standalone\\` do not need to be declared in an NgModule. Such\n\t * pipes don't depend on any \"intermediate context\" of an NgModule (ex. configured providers).\n\t *\n\t * More information about standalone components, directives, and pipes can be found in [this\n\t * guide](guide/standalone-components).\n\t */\n\tstandalone?: boolean;\n}\n\n/**\n * @Annotation\n * @publicApi\n */\nexport declare const Pipe: PipeDecorator;\n\n/**\n * Type of the Pipe decorator / constructor function.\n *\n * @publicApi\n */\nexport declare interface PipeDecorator {\n\t/**\n\t *\n\t * Decorator that marks a class as pipe and supplies configuration metadata.\n\t *\n\t * A pipe class must implement the \\`PipeTransform\\` interface.\n\t * For example, if the name is \"myPipe\", use a template binding expression\n\t * such as the following:\n\t *\n\t * \\`\\`\\`\n\t * {{ exp | myPipe }}\n\t * \\`\\`\\`\n\t *\n\t * The result of the expression is passed to the pipe's \\`transform()\\` method.\n\t *\n\t * A pipe must belong to an NgModule in order for it to be available\n\t * to a template. To make it a member of an NgModule,\n\t * list it in the \\`declarations\\` field of the \\`NgModule\\` metadata.\n\t *\n\t * @see [Style Guide: Pipe Names](guide/styleguide#02-09)\n\t *\n\t */\n\t(obj: Pipe): TypeDecorator;\n\t/**\n\t * See the \\`Pipe\\` decorator.\n\t */\n\tnew(obj: Pipe): Pipe;\n}\n\ndeclare type PipeDefList = ɵPipeDef<any>[];\n\n/**\n * Type used for PipeDefs on component definition.\n *\n * The function is necessary to be able to support forward declarations.\n */\ndeclare type PipeDefListOrFactory = (() => PipeDefList) | PipeDefList;\n\n\n/**\n * An interface that is implemented by pipes in order to perform a transformation.\n * Angular invokes the \\`transform\\` method with the value of a binding\n * as the first argument, and any parameters as the second argument in list form.\n *\n * @usageNotes\n *\n * In the following example, \\`TruncatePipe\\` returns the shortened value with an added ellipses.\n *\n * <code-example path=\"core/ts/pipes/simple_truncate.ts\" header=\"simple_truncate.ts\"></code-example>\n *\n * Invoking \\`{{ 'It was the best of times' | truncate }}\\` in a template will produce \\`It was...\\`.\n *\n * In the following example, \\`TruncatePipe\\` takes parameters that sets the truncated length and the\n * string to append with.\n *\n * <code-example path=\"core/ts/pipes/truncate.ts\" header=\"truncate.ts\"></code-example>\n *\n * Invoking \\`{{ 'It was the best of times' | truncate:4:'....' }}\\` in a template will produce \\`It\n * was the best....\\`.\n *\n * @publicApi\n */\nexport declare interface PipeTransform {\n\ttransform(value: any, ...args: any[]): any;\n}\n\n/**\n * A subclass of \\`Type\\` which has a static \\`ɵpipe\\`:\\`PipeDef\\` field making it\n * consumable for rendering.\n */\ndeclare interface PipeType<T> extends Type<T> {\n\tɵpipe: unknown;\n}\n\n/**\n * A token that indicates an opaque platform ID.\n * @publicApi\n */\nexport declare const PLATFORM_ID: InjectionToken<Object>;\n\n/**\n * A function that is executed when a platform is initialized.\n * @publicApi\n */\nexport declare const PLATFORM_INITIALIZER: InjectionToken<(() => void)[]>;\n\n/**\n * This platform has to be included in any other platform\n *\n * @publicApi\n */\nexport declare const platformCore: (extraProviders?: StaticProvider[] | undefined) => PlatformRef;\n\n/**\n * The Angular platform is the entry point for Angular on a web page.\n * Each page has exactly one platform. Services (such as reflection) which are common\n * to every Angular application running on the page are bound in its scope.\n * A page's platform is initialized implicitly when a platform is created using a platform\n * factory such as \\`PlatformBrowser\\`, or explicitly by calling the \\`createPlatform()\\` function.\n *\n * @publicApi\n */\nexport declare class PlatformRef {\n\tprivate _injector;\n\tprivate _modules;\n\tprivate _destroyListeners;\n\tprivate _destroyed;\n\t/**\n\t * Creates an instance of an \\`@NgModule\\` for the given platform.\n\t *\n\t * @deprecated Passing NgModule factories as the \\`PlatformRef.bootstrapModuleFactory\\` function\n\t *     argument is deprecated. Use the \\`PlatformRef.bootstrapModule\\` API instead.\n\t */\n\tbootstrapModuleFactory<M>(moduleFactory: NgModuleFactory<M>, options?: BootstrapOptions): Promise<NgModuleRef<M>>;\n\t/**\n\t * Creates an instance of an \\`@NgModule\\` for a given platform.\n\t *\n\t * @usageNotes\n\t * ### Simple Example\n\t *\n\t * \\`\\`\\`typescript\n\t * @NgModule({\n\t *   imports: [BrowserModule]\n\t * })\n\t * class MyModule {}\n\t *\n\t * let moduleRef = platformBrowser().bootstrapModule(MyModule);\n\t * \\`\\`\\`\n\t *\n\t */\n\tbootstrapModule<M>(moduleType: Type<M>, compilerOptions?: (CompilerOptions & BootstrapOptions) | Array<CompilerOptions & BootstrapOptions>): Promise<NgModuleRef<M>>;\n\tprivate _moduleDoBootstrap;\n\t/**\n\t * Registers a listener to be called when the platform is destroyed.\n\t */\n\tonDestroy(callback: () => void): void;\n\t/**\n\t * Retrieves the platform {@link Injector}, which is the parent injector for\n\t * every Angular application on the page and provides singleton providers.\n\t */\n\tget injector(): Injector;\n\t/**\n\t * Destroys the current Angular platform and all Angular applications on the page.\n\t * Destroys all modules and listeners registered with the platform.\n\t */\n\tdestroy(): void;\n\t/**\n\t * Indicates whether this instance was destroyed.\n\t */\n\tget destroyed(): boolean;\n\tstatic ɵfac: i0.ɵɵFactoryDeclaration<PlatformRef, never>;\n\tstatic ɵprov: i0.ɵɵInjectableDeclaration<PlatformRef>;\n}\n\ndeclare interface PlatformReflectionCapabilities {\n\tfactory(type: Type<any>): Function;\n\thasLifecycleHook(type: any, lcProperty: string): boolean;\n\t/**\n\t * Return a list of annotations/types for constructor parameters\n\t */\n\tparameters(type: Type<any>): any[][];\n\t/**\n\t * Return a list of annotations declared on the class\n\t */\n\tannotations(type: Type<any>): any[];\n\t/**\n\t * Return a object literal which describes the annotations on Class fields/properties.\n\t */\n\tpropMetadata(typeOrFunc: Type<any>): {\n\t\t[key: string]: any[];\n\t};\n}\n\n/**\n * A boolean-valued function over a value, possibly including context information\n * regarding that value's position in an array.\n *\n * @publicApi\n */\nexport declare interface Predicate<T> {\n\t(value: T): boolean;\n}\n\ndeclare const PREORDER_HOOK_FLAGS = 18;\n\n/** More flags associated with an LView (saved in LView[PREORDER_HOOK_FLAGS]) */\ndeclare const enum PreOrderHookFlags {\n\t/**\n\t The index of the next pre-order hook to be called in the hooks array, on the first 16\n\t bits\n\t */\n\tIndexOfTheNextPreOrderHookMaskMask = 65535,\n\t/**\n\t * The number of init hooks that have already been called, on the last 16 bits\n\t */\n\tNumberOfInitHooksCalledIncrementer = 65536,\n\tNumberOfInitHooksCalledShift = 16,\n\tNumberOfInitHooksCalledMask = 4294901760\n}\n\n/**\n * Describes a function that is used to process provider lists (such as provider\n * overrides).\n */\ndeclare type ProcessProvidersFunction = (providers: Provider[]) => Provider[];\n\n/**\n * List of slots for a projection. A slot can be either based on a parsed CSS selector\n * which will be used to determine nodes which are projected into that slot.\n *\n * When set to \"*\", the slot is reserved and can be used for multi-slot projection\n * using {@link ViewContainerRef#createComponent}. The last slot that specifies the\n * wildcard selector will retrieve all projectable nodes which do not match any selector.\n */\ndeclare type ProjectionSlots = (ɵCssSelectorList | '*')[];\n\n/**\n * This mapping is necessary so we can set input properties and output listeners\n * properly at runtime when property names are minified or aliased.\n *\n * Key: unminified / public input or output name\n * Value: array containing minified / internal name and related directive index\n *\n * The value must be an array to support inputs and outputs with the same name\n * on the same node.\n */\ndeclare type PropertyAliases = {\n\t[key: string]: PropertyAliasValue;\n};\n\n/**\n * Store the runtime input or output names for all the directives.\n *\n * i+0: directive instance index\n * i+1: privateName\n *\n * e.g. [0, 'change-minified']\n */\ndeclare type PropertyAliasValue = (number | string)[];\n\n/**\n * Describes how the \\`Injector\\` should be configured.\n * @see [\"Dependency Injection Guide\"](guide/dependency-injection).\n *\n * @see \\`StaticProvider\\`\n *\n * @publicApi\n */\nexport declare type Provider = TypeProvider | ValueProvider | ClassProvider | ConstructorProvider | ExistingProvider | FactoryProvider | any[];\n\n/**\n * @description\n *\n * Token that can be used to retrieve an instance from an injector or through a query.\n *\n * @publicApi\n */\nexport declare type ProviderToken<T> = Type<T> | AbstractType<T> | InjectionToken<T>;\n\n/**\n * Testability API.\n * \\`declare\\` keyword causes tsickle to generate externs, so these methods are\n * not renamed by Closure Compiler.\n * @publicApi\n */\ndeclare interface PublicTestability {\n\tisStable(): boolean;\n\twhenStable(callback: Function, timeout?: number, updateCallback?: Function): void;\n\tfindProviders(using: any, provider: string, exactMatch: boolean): any[];\n}\n\ndeclare const QUERIES = 19;\n\n/**\n * Type of the Query metadata.\n *\n * @publicApi\n */\nexport declare interface Query {\n\tdescendants: boolean;\n\temitDistinctChangesOnly: boolean;\n\tfirst: boolean;\n\tread: any;\n\tisViewQuery: boolean;\n\tselector: any;\n\tstatic?: boolean;\n}\n\n/**\n * Base class for query metadata.\n *\n * @see \\`ContentChildren\\`.\n * @see \\`ContentChild\\`.\n * @see \\`ViewChildren\\`.\n * @see \\`ViewChild\\`.\n *\n * @publicApi\n */\nexport declare abstract class Query {\n}\n\n/**\n * A set of flags to be used with Queries.\n *\n * NOTE: Ensure changes here are reflected in \\`packages/compiler/src/render3/view/compiler.ts\\`\n */\ndeclare const enum QueryFlags {\n\t/**\n\t * No flags\n\t */\n\tnone = 0,\n\t/**\n\t * Whether or not the query should descend into children.\n\t */\n\tdescendants = 1,\n\t/**\n\t * The query can be computed statically and hence can be assigned eagerly.\n\t *\n\t * NOTE: Backwards compatibility with ViewEngine.\n\t */\n\tisStatic = 2,\n\t/**\n\t * If the \\`QueryList\\` should fire change event only if actual change to query was computed (vs old\n\t * behavior where the change was fired whenever the query was recomputed, even if the recomputed\n\t * query resulted in the same list.)\n\t */\n\temitDistinctChangesOnly = 4\n}\n\n/**\n * An unmodifiable list of items that Angular keeps up to date when the state\n * of the application changes.\n *\n * The type of object that {@link ViewChildren}, {@link ContentChildren}, and {@link QueryList}\n * provide.\n *\n * Implements an iterable interface, therefore it can be used in both ES6\n * javascript \\`for (var i of items)\\` loops as well as in Angular templates with\n * \\`*ngFor=\"let i of myList\"\\`.\n *\n * Changes can be observed by subscribing to the changes \\`Observable\\`.\n *\n * NOTE: In the future this class will implement an \\`Observable\\` interface.\n *\n * @usageNotes\n * ### Example\n * \\`\\`\\`typescript\n * @Component({...})\n * class Container {\n *   @ViewChildren(Item) items:QueryList<Item>;\n * }\n * \\`\\`\\`\n *\n * @publicApi\n */\nexport declare class QueryList<T> implements Iterable<T> {\n\tprivate _emitDistinctChangesOnly;\n\treadonly dirty = true;\n\tprivate _results;\n\tprivate _changesDetected;\n\tprivate _changes;\n\treadonly length: number;\n\treadonly first: T;\n\treadonly last: T;\n\t/**\n\t * Returns \\`Observable\\` of \\`QueryList\\` notifying the subscriber of changes.\n\t */\n\tget changes(): Observable<any>;\n\t/**\n\t * @param emitDistinctChangesOnly Whether \\`QueryList.changes\\` should fire only when actual change\n\t *     has occurred. Or if it should fire when query is recomputed. (recomputing could resolve in\n\t *     the same result)\n\t */\n\tconstructor(_emitDistinctChangesOnly?: boolean);\n\t/**\n\t * Returns the QueryList entry at \\`index\\`.\n\t */\n\tget(index: number): T | undefined;\n\t/**\n\t * See\n\t * [Array.map](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map)\n\t */\n\tmap<U>(fn: (item: T, index: number, array: T[]) => U): U[];\n\t/**\n\t * See\n\t * [Array.filter](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter)\n\t */\n\tfilter(fn: (item: T, index: number, array: T[]) => boolean): T[];\n\t/**\n\t * See\n\t * [Array.find](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find)\n\t */\n\tfind(fn: (item: T, index: number, array: T[]) => boolean): T | undefined;\n\t/**\n\t * See\n\t * [Array.reduce](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce)\n\t */\n\treduce<U>(fn: (prevValue: U, curValue: T, curIndex: number, array: T[]) => U, init: U): U;\n\t/**\n\t * See\n\t * [Array.forEach](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach)\n\t */\n\tforEach(fn: (item: T, index: number, array: T[]) => void): void;\n\t/**\n\t * See\n\t * [Array.some](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some)\n\t */\n\tsome(fn: (value: T, index: number, array: T[]) => boolean): boolean;\n\t/**\n\t * Returns a copy of the internal results list as an Array.\n\t */\n\ttoArray(): T[];\n\ttoString(): string;\n\t/**\n\t * Updates the stored data of the query list, and resets the \\`dirty\\` flag to \\`false\\`, so that\n\t * on change detection, it will not notify of changes to the queries, unless a new change\n\t * occurs.\n\t *\n\t * @param resultsTree The query results to store\n\t * @param identityAccessor Optional function for extracting stable object identity from a value\n\t *    in the array. This function is executed for each element of the query result list while\n\t *    comparing current query list with the new one (provided as a first argument of the \\`reset\\`\n\t *    function) to detect if the lists are different. If the function is not provided, elements\n\t *    are compared as is (without any pre-processing).\n\t */\n\treset(resultsTree: Array<T | any[]>, identityAccessor?: (value: T) => unknown): void;\n\t/**\n\t * Triggers a change event by emitting on the \\`changes\\` {@link EventEmitter}.\n\t */\n\tnotifyOnChanges(): void;\n\t/** internal */\n\tsetDirty(): void;\n\t/** internal */\n\tdestroy(): void;\n\t[Symbol.iterator]: () => Iterator<T>;\n}\n\ndeclare interface R3DeclareComponentFacade extends R3DeclareDirectiveFacade {\n\ttemplate: string;\n\tisInline?: boolean;\n\tstyles?: string[];\n\tdependencies?: R3DeclareTemplateDependencyFacade[];\n\tcomponents?: R3DeclareDirectiveDependencyFacade[];\n\tdirectives?: R3DeclareDirectiveDependencyFacade[];\n\tpipes?: {\n\t\t[pipeName: string]: OpaqueValue | (() => OpaqueValue);\n\t};\n\tviewProviders?: OpaqueValue;\n\tanimations?: OpaqueValue;\n\tchangeDetection?: ChangeDetectionStrategy_2;\n\tencapsulation?: ViewEncapsulation_2;\n\tinterpolation?: [string, string];\n\tpreserveWhitespaces?: boolean;\n}\n\ndeclare interface R3DeclareDependencyMetadataFacade {\n\ttoken: OpaqueValue;\n\tattribute?: boolean;\n\thost?: boolean;\n\toptional?: boolean;\n\tself?: boolean;\n\tskipSelf?: boolean;\n}\n\ndeclare interface R3DeclareDirectiveDependencyFacade {\n\tkind?: 'directive' | 'component';\n\tselector: string;\n\ttype: OpaqueValue | (() => OpaqueValue);\n\tinputs?: string[];\n\toutputs?: string[];\n\texportAs?: string[];\n}\n\ndeclare interface R3DeclareDirectiveFacade {\n\tselector?: string;\n\ttype: Type_2;\n\tinputs?: {\n\t\t[classPropertyName: string]: string | [string, string];\n\t};\n\toutputs?: {\n\t\t[classPropertyName: string]: string;\n\t};\n\thost?: {\n\t\tattributes?: {\n\t\t\t[key: string]: OpaqueValue;\n\t\t};\n\t\tlisteners?: {\n\t\t\t[key: string]: string;\n\t\t};\n\t\tproperties?: {\n\t\t\t[key: string]: string;\n\t\t};\n\t\tclassAttribute?: string;\n\t\tstyleAttribute?: string;\n\t};\n\tqueries?: R3DeclareQueryMetadataFacade[];\n\tviewQueries?: R3DeclareQueryMetadataFacade[];\n\tproviders?: OpaqueValue;\n\texportAs?: string[];\n\tusesInheritance?: boolean;\n\tusesOnChanges?: boolean;\n\tisStandalone?: boolean;\n}\n\ndeclare interface R3DeclareFactoryFacade {\n\ttype: Type_2;\n\tdeps: R3DeclareDependencyMetadataFacade[] | 'invalid' | null;\n\ttarget: ɵɵFactoryTarget;\n}\n\ndeclare interface R3DeclareInjectableFacade {\n\ttype: Type_2;\n\tprovidedIn?: Type_2 | 'root' | 'platform' | 'any' | null;\n\tuseClass?: OpaqueValue;\n\tuseFactory?: OpaqueValue;\n\tuseExisting?: OpaqueValue;\n\tuseValue?: OpaqueValue;\n\tdeps?: R3DeclareDependencyMetadataFacade[];\n}\n\ndeclare interface R3DeclareInjectorFacade {\n\ttype: Type_2;\n\timports?: OpaqueValue[];\n\tproviders?: OpaqueValue[];\n}\n\ndeclare interface R3DeclareNgModuleDependencyFacade {\n\tkind: 'ngmodule';\n\ttype: OpaqueValue | (() => OpaqueValue);\n}\n\ndeclare interface R3DeclareNgModuleFacade {\n\ttype: Type_2;\n\tbootstrap?: OpaqueValue[] | (() => OpaqueValue[]);\n\tdeclarations?: OpaqueValue[] | (() => OpaqueValue[]);\n\timports?: OpaqueValue[] | (() => OpaqueValue[]);\n\texports?: OpaqueValue[] | (() => OpaqueValue[]);\n\tschemas?: OpaqueValue[];\n\tid?: OpaqueValue;\n}\n\ndeclare interface R3DeclarePipeDependencyFacade {\n\tkind?: 'pipe';\n\tname: string;\n\ttype: OpaqueValue | (() => OpaqueValue);\n}\n\ndeclare interface R3DeclarePipeFacade {\n\ttype: Type_2;\n\tname: string;\n\tpure?: boolean;\n\tisStandalone?: boolean;\n}\n\ndeclare interface R3DeclareQueryMetadataFacade {\n\tpropertyName: string;\n\tfirst?: boolean;\n\tpredicate: OpaqueValue | string[];\n\tdescendants?: boolean;\n\tread?: OpaqueValue;\n\tstatic?: boolean;\n\temitDistinctChangesOnly?: boolean;\n}\n\ndeclare type R3DeclareTemplateDependencyFacade = {\n\tkind: string;\n} & (R3DeclareDirectiveDependencyFacade | R3DeclarePipeDependencyFacade | R3DeclareNgModuleDependencyFacade);\n\ndeclare class R3Injector extends EnvironmentInjector {\n\treadonly parent: Injector;\n\treadonly source: string | null;\n\treadonly scopes: Set<InjectorScope>;\n\t/**\n\t * Map of tokens to records which contain the instances of those tokens.\n\t * - \\`null\\` value implies that we don't have the record. Used by tree-shakable injectors\n\t * to prevent further searches.\n\t */\n\tprivate records;\n\t/**\n\t * Set of values instantiated by this injector which contain \\`ngOnDestroy\\` lifecycle hooks.\n\t */\n\tprivate _ngOnDestroyHooks;\n\tprivate _onDestroyHooks;\n\t/**\n\t * Flag indicating that this injector was previously destroyed.\n\t */\n\tget destroyed(): boolean;\n\tprivate _destroyed;\n\tprivate injectorDefTypes;\n\tconstructor(providers: Array<Provider | ImportedNgModuleProviders>, parent: Injector, source: string | null, scopes: Set<InjectorScope>);\n\t/**\n\t * Destroy the injector and release references to every instance or provider associated with it.\n\t *\n\t * Also calls the \\`OnDestroy\\` lifecycle hooks of every instance that was created for which a\n\t * hook was found.\n\t */\n\tdestroy(): void;\n\tonDestroy(callback: () => void): void;\n\trunInContext<ReturnT>(fn: () => ReturnT): ReturnT;\n\tget<T>(token: ProviderToken<T>, notFoundValue?: any, flags?: InjectFlags): T;\n\ttoString(): string;\n\tprivate assertNotDestroyed;\n\t/**\n\t * Process a \\`SingleProvider\\` and add it.\n\t */\n\tprivate processProvider;\n\tprivate hydrate;\n\tprivate injectableDefInScope;\n}\n\ndeclare interface RComment extends RNode {\n\ttextContent: string | null;\n}\n\ndeclare interface RCssStyleDeclaration {\n\tremoveProperty(propertyName: string): string;\n\tsetProperty(propertyName: string, value: string | null, priority?: string): void;\n}\n\ndeclare interface RDomTokenList {\n\tadd(token: string): void;\n\tremove(token: string): void;\n}\n\n/**\n * Creates an object that allows to retrieve component metadata.\n *\n * @usageNotes\n *\n * The example below demonstrates how to use the function and how the fields\n * of the returned object map to the component metadata.\n *\n * \\`\\`\\`typescript\n * @Component({\n *   standalone: true,\n *   selector: 'foo-component',\n *   template: \\`\n *     <ng-content></ng-content>\n *     <ng-content select=\"content-selector-a\"></ng-content>\n *   \\`,\n * })\n * class FooComponent {\n *   @Input('inputName') inputPropName: string;\n *   @Output('outputName') outputPropName = new EventEmitter<void>();\n * }\n *\n * const mirror = reflectComponentType(FooComponent);\n * expect(mirror.type).toBe(FooComponent);\n * expect(mirror.selector).toBe('foo-component');\n * expect(mirror.isStandalone).toBe(true);\n * expect(mirror.inputs).toEqual([{propName: 'inputName', templateName: 'inputPropName'}]);\n * expect(mirror.outputs).toEqual([{propName: 'outputName', templateName: 'outputPropName'}]);\n * expect(mirror.ngContentSelectors).toEqual([\n *   '*',                 // first \\`<ng-content>\\` in a template, the selector defaults to \\`*\\`\n *   'content-selector-a' // second \\`<ng-content>\\` in a template\n * ]);\n * \\`\\`\\`\n *\n * @param component Component class reference.\n * @returns An object that allows to retrieve component metadata.\n *\n * @publicApi\n */\nexport declare function reflectComponentType<C>(component: Type<C>): ComponentMirror<C> | null;\n\n/**\n * \\`Dependency\\` is used by the framework to extend DI.\n * This is internal to Angular and should not be used directly.\n */\ndeclare class ReflectiveDependency {\n\tkey: ReflectiveKey;\n\toptional: boolean;\n\tvisibility: Self | SkipSelf | null;\n\tconstructor(key: ReflectiveKey, optional: boolean, visibility: Self | SkipSelf | null);\n\tstatic fromKey(key: ReflectiveKey): ReflectiveDependency;\n}\n\n/**\n * A ReflectiveDependency injection container used for instantiating objects and resolving\n * dependencies.\n *\n * An \\`Injector\\` is a replacement for a \\`new\\` operator, which can automatically resolve the\n * constructor dependencies.\n *\n * In typical use, application code asks for the dependencies in the constructor and they are\n * resolved by the \\`Injector\\`.\n *\n * @usageNotes\n * ### Example\n *\n * The following example creates an \\`Injector\\` configured to create \\`Engine\\` and \\`Car\\`.\n *\n * \\`\\`\\`typescript\n * @Injectable()\n * class Engine {\n * }\n *\n * @Injectable()\n * class Car {\n *   constructor(public engine:Engine) {}\n * }\n *\n * var injector = ReflectiveInjector.resolveAndCreate([Car, Engine]);\n * var car = injector.get(Car);\n * expect(car instanceof Car).toBe(true);\n * expect(car.engine instanceof Engine).toBe(true);\n * \\`\\`\\`\n *\n * Notice, we don't use the \\`new\\` operator because we explicitly want to have the \\`Injector\\`\n * resolve all of the object's dependencies automatically.\n *\n * TODO: delete in v14.\n *\n * @deprecated from v5 - slow and brings in a lot of code, Use \\`Injector.create\\` instead.\n * @publicApi\n */\nexport declare abstract class ReflectiveInjector implements Injector {\n\t/**\n\t * Turns an array of provider definitions into an array of resolved providers.\n\t *\n\t * A resolution is a process of flattening multiple nested arrays and converting individual\n\t * providers into an array of \\`ResolvedReflectiveProvider\\`s.\n\t *\n\t * @usageNotes\n\t * ### Example\n\t *\n\t * \\`\\`\\`typescript\n\t * @Injectable()\n\t * class Engine {\n\t * }\n\t *\n\t * @Injectable()\n\t * class Car {\n\t *   constructor(public engine:Engine) {}\n\t * }\n\t *\n\t * var providers = ReflectiveInjector.resolve([Car, [[Engine]]]);\n\t *\n\t * expect(providers.length).toEqual(2);\n\t *\n\t * expect(providers[0] instanceof ResolvedReflectiveProvider).toBe(true);\n\t * expect(providers[0].key.displayName).toBe(\"Car\");\n\t * expect(providers[0].dependencies.length).toEqual(1);\n\t * expect(providers[0].factory).toBeDefined();\n\t *\n\t * expect(providers[1].key.displayName).toBe(\"Engine\");\n\t * });\n\t * \\`\\`\\`\n\t *\n\t */\n\tstatic resolve(providers: Provider[]): ResolvedReflectiveProvider[];\n\t/**\n\t * Resolves an array of providers and creates an injector from those providers.\n\t *\n\t * The passed-in providers can be an array of \\`Type\\`, \\`Provider\\`,\n\t * or a recursive array of more providers.\n\t *\n\t * @usageNotes\n\t * ### Example\n\t *\n\t * \\`\\`\\`typescript\n\t * @Injectable()\n\t * class Engine {\n\t * }\n\t *\n\t * @Injectable()\n\t * class Car {\n\t *   constructor(public engine:Engine) {}\n\t * }\n\t *\n\t * var injector = ReflectiveInjector.resolveAndCreate([Car, Engine]);\n\t * expect(injector.get(Car) instanceof Car).toBe(true);\n\t * \\`\\`\\`\n\t */\n\tstatic resolveAndCreate(providers: Provider[], parent?: Injector): ReflectiveInjector;\n\t/**\n\t * Creates an injector from previously resolved providers.\n\t *\n\t * This API is the recommended way to construct injectors in performance-sensitive parts.\n\t *\n\t * @usageNotes\n\t * ### Example\n\t *\n\t * \\`\\`\\`typescript\n\t * @Injectable()\n\t * class Engine {\n\t * }\n\t *\n\t * @Injectable()\n\t * class Car {\n\t *   constructor(public engine:Engine) {}\n\t * }\n\t *\n\t * var providers = ReflectiveInjector.resolve([Car, Engine]);\n\t * var injector = ReflectiveInjector.fromResolvedProviders(providers);\n\t * expect(injector.get(Car) instanceof Car).toBe(true);\n\t * \\`\\`\\`\n\t */\n\tstatic fromResolvedProviders(providers: ResolvedReflectiveProvider[], parent?: Injector): ReflectiveInjector;\n\t/**\n\t * Parent of this injector.\n\t *\n\t * <!-- TODO: Add a link to the section of the user guide talking about hierarchical injection.\n\t * -->\n\t */\n\tabstract get parent(): Injector | null;\n\t/**\n\t * Resolves an array of providers and creates a child injector from those providers.\n\t *\n\t * <!-- TODO: Add a link to the section of the user guide talking about hierarchical injection.\n\t * -->\n\t *\n\t * The passed-in providers can be an array of \\`Type\\`, \\`Provider\\`,\n\t * or a recursive array of more providers.\n\t *\n\t * @usageNotes\n\t * ### Example\n\t *\n\t * \\`\\`\\`typescript\n\t * class ParentProvider {}\n\t * class ChildProvider {}\n\t *\n\t * var parent = ReflectiveInjector.resolveAndCreate([ParentProvider]);\n\t * var child = parent.resolveAndCreateChild([ChildProvider]);\n\t *\n\t * expect(child.get(ParentProvider) instanceof ParentProvider).toBe(true);\n\t * expect(child.get(ChildProvider) instanceof ChildProvider).toBe(true);\n\t * expect(child.get(ParentProvider)).toBe(parent.get(ParentProvider));\n\t * \\`\\`\\`\n\t */\n\tabstract resolveAndCreateChild(providers: Provider[]): ReflectiveInjector;\n\t/**\n\t * Creates a child injector from previously resolved providers.\n\t *\n\t * <!-- TODO: Add a link to the section of the user guide talking about hierarchical injection.\n\t * -->\n\t *\n\t * This API is the recommended way to construct injectors in performance-sensitive parts.\n\t *\n\t * @usageNotes\n\t * ### Example\n\t *\n\t * \\`\\`\\`typescript\n\t * class ParentProvider {}\n\t * class ChildProvider {}\n\t *\n\t * var parentProviders = ReflectiveInjector.resolve([ParentProvider]);\n\t * var childProviders = ReflectiveInjector.resolve([ChildProvider]);\n\t *\n\t * var parent = ReflectiveInjector.fromResolvedProviders(parentProviders);\n\t * var child = parent.createChildFromResolved(childProviders);\n\t *\n\t * expect(child.get(ParentProvider) instanceof ParentProvider).toBe(true);\n\t * expect(child.get(ChildProvider) instanceof ChildProvider).toBe(true);\n\t * expect(child.get(ParentProvider)).toBe(parent.get(ParentProvider));\n\t * \\`\\`\\`\n\t */\n\tabstract createChildFromResolved(providers: ResolvedReflectiveProvider[]): ReflectiveInjector;\n\t/**\n\t * Resolves a provider and instantiates an object in the context of the injector.\n\t *\n\t * The created object does not get cached by the injector.\n\t *\n\t * @usageNotes\n\t * ### Example\n\t *\n\t * \\`\\`\\`typescript\n\t * @Injectable()\n\t * class Engine {\n\t * }\n\t *\n\t * @Injectable()\n\t * class Car {\n\t *   constructor(public engine:Engine) {}\n\t * }\n\t *\n\t * var injector = ReflectiveInjector.resolveAndCreate([Engine]);\n\t *\n\t * var car = injector.resolveAndInstantiate(Car);\n\t * expect(car.engine).toBe(injector.get(Engine));\n\t * expect(car).not.toBe(injector.resolveAndInstantiate(Car));\n\t * \\`\\`\\`\n\t */\n\tabstract resolveAndInstantiate(provider: Provider): any;\n\t/**\n\t * Instantiates an object using a resolved provider in the context of the injector.\n\t *\n\t * The created object does not get cached by the injector.\n\t *\n\t * @usageNotes\n\t * ### Example\n\t *\n\t * \\`\\`\\`typescript\n\t * @Injectable()\n\t * class Engine {\n\t * }\n\t *\n\t * @Injectable()\n\t * class Car {\n\t *   constructor(public engine:Engine) {}\n\t * }\n\t *\n\t * var injector = ReflectiveInjector.resolveAndCreate([Engine]);\n\t * var carProvider = ReflectiveInjector.resolve([Car])[0];\n\t * var car = injector.instantiateResolved(carProvider);\n\t * expect(car.engine).toBe(injector.get(Engine));\n\t * expect(car).not.toBe(injector.instantiateResolved(carProvider));\n\t * \\`\\`\\`\n\t */\n\tabstract instantiateResolved(provider: ResolvedReflectiveProvider): any;\n\tabstract get(token: any, notFoundValue?: any): any;\n}\n\n\n/**\n * A unique object used for retrieving items from the {@link ReflectiveInjector}.\n *\n * Keys have:\n * - a system-wide unique \\`id\\`.\n * - a \\`token\\`.\n *\n * \\`Key\\` is used internally by {@link ReflectiveInjector} because its system-wide unique \\`id\\` allows\n * the\n * injector to store created objects in a more efficient way.\n *\n * \\`Key\\` should not be created directly. {@link ReflectiveInjector} creates keys automatically when\n * resolving\n * providers.\n *\n * @deprecated No replacement\n * @publicApi\n */\nexport declare class ReflectiveKey {\n\ttoken: Object;\n\tid: number;\n\treadonly displayName: string;\n\t/**\n\t * Private\n\t */\n\tconstructor(token: Object, id: number);\n\t/**\n\t * Retrieves a \\`Key\\` for a token.\n\t */\n\tstatic get(token: Object): ReflectiveKey;\n\t/**\n\t * @returns the number of keys registered in the system.\n\t */\n\tstatic get numberOfKeys(): number;\n}\n\n/**\n * Subset of API needed for writing attributes, properties, and setting up\n * listeners on Element.\n */\ndeclare interface RElement extends RNode {\n\tstyle: RCssStyleDeclaration;\n\tclassList: RDomTokenList;\n\tclassName: string;\n\ttagName: string;\n\ttextContent: string | null;\n\tsetAttribute(name: string, value: string | TrustedHTML | TrustedScript | TrustedScriptURL): void;\n\tremoveAttribute(name: string): void;\n\tsetAttributeNS(namespaceURI: string, qualifiedName: string, value: string | TrustedHTML | TrustedScript | TrustedScriptURL): void;\n\taddEventListener(type: string, listener: EventListener, useCapture?: boolean): void;\n\tremoveEventListener(type: string, listener?: EventListener, options?: boolean): void;\n\tsetProperty?(name: string, value: any): void;\n}\n\ndeclare const RENDERER = 11;\n\n/**\n * Procedural style of API needed to create elements and text nodes.\n *\n * In non-native browser environments (e.g. platforms such as web-workers), this is the\n * facade that enables element manipulation. In practice, this is implemented by \\`Renderer2\\`.\n */\ndeclare interface Renderer {\n\tdestroy(): void;\n\tcreateComment(value: string): RComment;\n\tcreateElement(name: string, namespace?: string | null): RElement;\n\tcreateText(value: string): RText;\n\t/**\n\t * This property is allowed to be null / undefined,\n\t * in which case the view engine won't call it.\n\t * This is used as a performance optimization for production mode.\n\t */\n\tdestroyNode?: ((node: RNode) => void) | null;\n\tappendChild(parent: RElement, newChild: RNode): void;\n\tinsertBefore(parent: RNode, newChild: RNode, refChild: RNode | null, isMove?: boolean): void;\n\tremoveChild(parent: RElement, oldChild: RNode, isHostElement?: boolean): void;\n\tselectRootElement(selectorOrNode: string | any, preserveContent?: boolean): RElement;\n\tparentNode(node: RNode): RElement | null;\n\tnextSibling(node: RNode): RNode | null;\n\tsetAttribute(el: RElement, name: string, value: string | TrustedHTML | TrustedScript | TrustedScriptURL, namespace?: string | null): void;\n\tremoveAttribute(el: RElement, name: string, namespace?: string | null): void;\n\taddClass(el: RElement, name: string): void;\n\tremoveClass(el: RElement, name: string): void;\n\tsetStyle(el: RElement, style: string, value: any, flags?: RendererStyleFlags2): void;\n\tremoveStyle(el: RElement, style: string, flags?: RendererStyleFlags2): void;\n\tsetProperty(el: RElement, name: string, value: any): void;\n\tsetValue(node: RText | RComment, value: string): void;\n\tlisten(target: GlobalTargetName | RNode, eventName: string, callback: (event: any) => boolean | void): () => void;\n}\n\n/**\n * Extend this base class to implement custom rendering. By default, Angular\n * renders a template into DOM. You can use custom rendering to intercept\n * rendering calls, or to render to something other than DOM.\n *\n * Create your custom renderer using \\`RendererFactory2\\`.\n *\n * Use a custom renderer to bypass Angular's templating and\n * make custom UI changes that can't be expressed declaratively.\n * For example if you need to set a property or an attribute whose name is\n * not statically known, use the \\`setProperty()\\` or\n * \\`setAttribute()\\` method.\n *\n * @publicApi\n */\nexport declare abstract class Renderer2 {\n\t/**\n\t * Use to store arbitrary developer-defined data on a renderer instance,\n\t * as an object containing key-value pairs.\n\t * This is useful for renderers that delegate to other renderers.\n\t */\n\tabstract get data(): {\n\t\t[key: string]: any;\n\t};\n\t/**\n\t * Implement this callback to destroy the renderer or the host element.\n\t */\n\tabstract destroy(): void;\n\t/**\n\t * Implement this callback to create an instance of the host element.\n\t * @param name An identifying name for the new element, unique within the namespace.\n\t * @param namespace The namespace for the new element.\n\t * @returns The new element.\n\t */\n\tabstract createElement(name: string, namespace?: string | null): any;\n\t/**\n\t * Implement this callback to add a comment to the DOM of the host element.\n\t * @param value The comment text.\n\t * @returns The modified element.\n\t */\n\tabstract createComment(value: string): any;\n\t/**\n\t * Implement this callback to add text to the DOM of the host element.\n\t * @param value The text string.\n\t * @returns The modified element.\n\t */\n\tabstract createText(value: string): any;\n\t/**\n\t * If null or undefined, the view engine won't call it.\n\t * This is used as a performance optimization for production mode.\n\t */\n\tdestroyNode: ((node: any) => void) | null;\n\t/**\n\t * Appends a child to a given parent node in the host element DOM.\n\t * @param parent The parent node.\n\t * @param newChild The new child node.\n\t */\n\tabstract appendChild(parent: any, newChild: any): void;\n\t/**\n\t * Implement this callback to insert a child node at a given position in a parent node\n\t * in the host element DOM.\n\t * @param parent The parent node.\n\t * @param newChild The new child nodes.\n\t * @param refChild The existing child node before which \\`newChild\\` is inserted.\n\t * @param isMove Optional argument which signifies if the current \\`insertBefore\\` is a result of a\n\t *     move. Animation uses this information to trigger move animations. In the past the Animation\n\t *     would always assume that any \\`insertBefore\\` is a move. This is not strictly true because\n\t *     with runtime i18n it is possible to invoke \\`insertBefore\\` as a result of i18n and it should\n\t *     not trigger an animation move.\n\t */\n\tabstract insertBefore(parent: any, newChild: any, refChild: any, isMove?: boolean): void;\n\t/**\n\t * Implement this callback to remove a child node from the host element's DOM.\n\t * @param parent The parent node.\n\t * @param oldChild The child node to remove.\n\t * @param isHostElement Optionally signal to the renderer whether this element is a host element\n\t * or not\n\t */\n\tabstract removeChild(parent: any, oldChild: any, isHostElement?: boolean): void;\n\t/**\n\t * Implement this callback to prepare an element to be bootstrapped\n\t * as a root element, and return the element instance.\n\t * @param selectorOrNode The DOM element.\n\t * @param preserveContent Whether the contents of the root element\n\t * should be preserved, or cleared upon bootstrap (default behavior).\n\t * Use with \\`ViewEncapsulation.ShadowDom\\` to allow simple native\n\t * content projection via \\`<slot>\\` elements.\n\t * @returns The root element.\n\t */\n\tabstract selectRootElement(selectorOrNode: string | any, preserveContent?: boolean): any;\n\t/**\n\t * Implement this callback to get the parent of a given node\n\t * in the host element's DOM.\n\t * @param node The child node to query.\n\t * @returns The parent node, or null if there is no parent.\n\t * For WebWorkers, always returns true.\n\t * This is because the check is synchronous,\n\t * and the caller can't rely on checking for null.\n\t */\n\tabstract parentNode(node: any): any;\n\t/**\n\t * Implement this callback to get the next sibling node of a given node\n\t * in the host element's DOM.\n\t * @returns The sibling node, or null if there is no sibling.\n\t * For WebWorkers, always returns a value.\n\t * This is because the check is synchronous,\n\t * and the caller can't rely on checking for null.\n\t */\n\tabstract nextSibling(node: any): any;\n\t/**\n\t * Implement this callback to set an attribute value for an element in the DOM.\n\t * @param el The element.\n\t * @param name The attribute name.\n\t * @param value The new value.\n\t * @param namespace The namespace.\n\t */\n\tabstract setAttribute(el: any, name: string, value: string, namespace?: string | null): void;\n\t/**\n\t * Implement this callback to remove an attribute from an element in the DOM.\n\t * @param el The element.\n\t * @param name The attribute name.\n\t * @param namespace The namespace.\n\t */\n\tabstract removeAttribute(el: any, name: string, namespace?: string | null): void;\n\t/**\n\t * Implement this callback to add a class to an element in the DOM.\n\t * @param el The element.\n\t * @param name The class name.\n\t */\n\tabstract addClass(el: any, name: string): void;\n\t/**\n\t * Implement this callback to remove a class from an element in the DOM.\n\t * @param el The element.\n\t * @param name The class name.\n\t */\n\tabstract removeClass(el: any, name: string): void;\n\t/**\n\t * Implement this callback to set a CSS style for an element in the DOM.\n\t * @param el The element.\n\t * @param style The name of the style.\n\t * @param value The new value.\n\t * @param flags Flags for style variations. No flags are set by default.\n\t */\n\tabstract setStyle(el: any, style: string, value: any, flags?: RendererStyleFlags2): void;\n\t/**\n\t * Implement this callback to remove the value from a CSS style for an element in the DOM.\n\t * @param el The element.\n\t * @param style The name of the style.\n\t * @param flags Flags for style variations to remove, if set. ???\n\t */\n\tabstract removeStyle(el: any, style: string, flags?: RendererStyleFlags2): void;\n\t/**\n\t * Implement this callback to set the value of a property of an element in the DOM.\n\t * @param el The element.\n\t * @param name The property name.\n\t * @param value The new value.\n\t */\n\tabstract setProperty(el: any, name: string, value: any): void;\n\t/**\n\t * Implement this callback to set the value of a node in the host element.\n\t * @param node The node.\n\t * @param value The new value.\n\t */\n\tabstract setValue(node: any, value: string): void;\n\t/**\n\t * Implement this callback to start an event listener.\n\t * @param target The context in which to listen for events. Can be\n\t * the entire window or document, the body of the document, or a specific\n\t * DOM element.\n\t * @param eventName The event to listen for.\n\t * @param callback A handler function to invoke when the event occurs.\n\t * @returns An \"unlisten\" function for disposing of this handler.\n\t */\n\tabstract listen(target: 'window' | 'document' | 'body' | any, eventName: string, callback: (event: any) => boolean | void): () => void;\n}\n\ndeclare const RENDERER_FACTORY = 10;\n\ndeclare interface RendererFactory {\n\tcreateRenderer(hostElement: RElement | null, rendererType: RendererType2 | null): Renderer;\n\tbegin?(): void;\n\tend?(): void;\n}\n\n/**\n * Creates and initializes a custom renderer that implements the \\`Renderer2\\` base class.\n *\n * @publicApi\n */\nexport declare abstract class RendererFactory2 {\n\t/**\n\t * Creates and initializes a custom renderer for a host DOM element.\n\t * @param hostElement The element to render.\n\t * @param type The base class to implement.\n\t * @returns The new custom renderer instance.\n\t */\n\tabstract createRenderer(hostElement: any, type: RendererType2 | null): Renderer2;\n\t/**\n\t * A callback invoked when rendering has begun.\n\t */\n\tabstract begin?(): void;\n\t/**\n\t * A callback invoked when rendering has completed.\n\t */\n\tabstract end?(): void;\n\t/**\n\t * Use with animations test-only mode. Notifies the test when rendering has completed.\n\t * @returns The asynchronous result of the developer-defined function.\n\t */\n\tabstract whenRenderingDone?(): Promise<any>;\n}\n\n/**\n * Flags for renderer-specific style modifiers.\n * @publicApi\n */\nexport declare enum RendererStyleFlags2 {\n\t/**\n\t * Marks a style as important.\n\t */\n\tImportant = 1,\n\t/**\n\t * Marks a style as using dash case naming (this-is-dash-case).\n\t */\n\tDashCase = 2\n}\n\n/**\n * Used by \\`RendererFactory2\\` to associate custom rendering data and styles\n * with a rendering implementation.\n *  @publicApi\n */\nexport declare interface RendererType2 {\n\t/**\n\t * A unique identifying string for the new renderer, used when creating\n\t * unique styles for encapsulation.\n\t */\n\tid: string;\n\t/**\n\t * The view encapsulation type, which determines how styles are applied to\n\t * DOM elements. One of\n\t * - \\`Emulated\\` (default): Emulate native scoping of styles.\n\t * - \\`Native\\`: Use the native encapsulation mechanism of the renderer.\n\t * - \\`ShadowDom\\`: Use modern [Shadow\n\t * DOM](https://w3c.github.io/webcomponents/spec/shadow/) and\n\t * create a ShadowRoot for component's host element.\n\t * - \\`None\\`: Do not provide any template or style encapsulation.\n\t */\n\tencapsulation: ViewEncapsulation;\n\t/**\n\t * Defines CSS styles to be stored on a renderer instance.\n\t */\n\tstyles: (string | any[])[];\n\t/**\n\t * Defines arbitrary developer-defined data to be stored on a renderer instance.\n\t * This is useful for renderers that delegate to other renderers.\n\t */\n\tdata: {\n\t\t[kind: string]: any;\n\t};\n}\n\n/**\n * An internal resolved representation of a factory function created by resolving \\`Provider\\`.\n * @publicApi\n */\nexport declare class ResolvedReflectiveFactory {\n\t/**\n\t * Factory function which can return an instance of an object represented by a key.\n\t */\n\tfactory: Function;\n\t/**\n\t * Arguments (dependencies) to the \\`factory\\` function.\n\t */\n\tdependencies: ReflectiveDependency[];\n\tconstructor(\n\t\t/**\n\t\t * Factory function which can return an instance of an object represented by a key.\n\t\t */\n\t\tfactory: Function,\n\t\t/**\n\t\t * Arguments (dependencies) to the \\`factory\\` function.\n\t\t */\n\t\tdependencies: ReflectiveDependency[]);\n}\n\n/**\n * An internal resolved representation of a \\`Provider\\` used by the \\`Injector\\`.\n *\n * @usageNotes\n * This is usually created automatically by \\`Injector.resolveAndCreate\\`.\n *\n * It can be created manually, as follows:\n *\n * ### Example\n *\n * \\`\\`\\`typescript\n * var resolvedProviders = Injector.resolve([{ provide: 'message', useValue: 'Hello' }]);\n * var injector = Injector.fromResolvedProviders(resolvedProviders);\n *\n * expect(injector.get('message')).toEqual('Hello');\n * \\`\\`\\`\n *\n * @publicApi\n */\nexport declare interface ResolvedReflectiveProvider {\n\t/**\n\t * A key, usually a \\`Type<any>\\`.\n\t */\n\tkey: ReflectiveKey;\n\t/**\n\t * Factory function which can return an instance of an object represented by a key.\n\t */\n\tresolvedFactories: ResolvedReflectiveFactory[];\n\t/**\n\t * Indicates if the provider is a multi-provider or a regular provider.\n\t */\n\tmultiProvider: boolean;\n}\n\n/**\n * Lazily retrieves the reference value from a forwardRef.\n *\n * Acts as the identity function when given a non-forward-ref value.\n *\n * @usageNotes\n * ### Example\n *\n * {@example core/di/ts/forward_ref/forward_ref_spec.ts region='resolve_forward_ref'}\n *\n * @see \\`forwardRef\\`\n * @publicApi\n */\nexport declare function resolveForwardRef<T>(type: T): T;\n\n/**\n * The goal here is to make sure that the browser DOM API is the Renderer.\n * We do this by defining a subset of DOM API to be the renderer and then\n * use that at runtime for rendering.\n *\n * At runtime we can then use the DOM api directly, in server or web-worker\n * it will be easy to implement such API.\n */\n/** Subset of API needed for appending elements and text nodes. */\ndeclare interface RNode {\n\t/**\n\t * Returns the parent Element, Document, or DocumentFragment\n\t */\n\tparentNode: RNode | null;\n\t/**\n\t * Returns the parent Element if there is one\n\t */\n\tparentElement: RElement | null;\n\t/**\n\t * Gets the Node immediately following this one in the parent's childNodes\n\t */\n\tnextSibling: RNode | null;\n\t/**\n\t * Removes a child from the current node and returns the removed node\n\t * @param oldChild the child node to remove\n\t */\n\tremoveChild(oldChild: RNode): RNode;\n\t/**\n\t * Insert a child node.\n\t *\n\t * Used exclusively for adding View root nodes into ViewAnchor location.\n\t */\n\tinsertBefore(newChild: RNode, refChild: RNode | null, isViewRoot: boolean): void;\n\t/**\n\t * Append a child node.\n\t *\n\t * Used exclusively for building up DOM which are static (ie not View roots)\n\t */\n\tappendChild(newChild: RNode): RNode;\n}\n\ndeclare interface RText extends RNode {\n\ttextContent: string | null;\n}\n\n\n/**\n * The list of error codes used in runtime code of the \\`core\\` package.\n * Reserved error code range: 100-999.\n *\n * Note: the minus sign denotes the fact that a particular code has a detailed guide on\n * angular.io. This extra annotation is needed to avoid introducing a separate set to store\n * error codes which have guides, which might leak into runtime code.\n *\n * Full list of available error guides can be found at https://angular.io/errors.\n */\ndeclare const enum RuntimeErrorCode {\n\tEXPRESSION_CHANGED_AFTER_CHECKED = -100,\n\tRECURSIVE_APPLICATION_REF_TICK = 101,\n\tCYCLIC_DI_DEPENDENCY = -200,\n\tPROVIDER_NOT_FOUND = -201,\n\tINVALID_FACTORY_DEPENDENCY = 202,\n\tMISSING_INJECTION_CONTEXT = -203,\n\tINVALID_INJECTION_TOKEN = 204,\n\tINJECTOR_ALREADY_DESTROYED = 205,\n\tPROVIDER_IN_WRONG_CONTEXT = 207,\n\tMISSING_INJECTION_TOKEN = 208,\n\tINVALID_MULTI_PROVIDER = 209,\n\tMULTIPLE_COMPONENTS_MATCH = -300,\n\tEXPORT_NOT_FOUND = -301,\n\tPIPE_NOT_FOUND = -302,\n\tUNKNOWN_BINDING = 303,\n\tUNKNOWN_ELEMENT = 304,\n\tTEMPLATE_STRUCTURE_ERROR = 305,\n\tINVALID_EVENT_BINDING = 306,\n\tMULTIPLE_PLATFORMS = 400,\n\tPLATFORM_NOT_FOUND = 401,\n\tERROR_HANDLER_NOT_FOUND = 402,\n\tBOOTSTRAP_COMPONENTS_NOT_FOUND = 403,\n\tPLATFORM_ALREADY_DESTROYED = 404,\n\tASYNC_INITIALIZERS_STILL_RUNNING = 405,\n\tAPPLICATION_REF_ALREADY_DESTROYED = 406,\n\tRENDERER_NOT_FOUND = 407,\n\tINVALID_I18N_STRUCTURE = 700,\n\tMISSING_LOCALE_DATA = 701,\n\tIMPORT_PROVIDERS_FROM_STANDALONE = 800,\n\tINVALID_DIFFER_INPUT = 900,\n\tNO_SUPPORTING_DIFFER_FACTORY = 901,\n\tVIEW_ALREADY_ATTACHED = 902,\n\tINVALID_INHERITANCE = 903,\n\tUNSAFE_VALUE_IN_RESOURCE_URL = 904,\n\tUNSAFE_VALUE_IN_SCRIPT = 905,\n\tMISSING_GENERATED_DEF = 906,\n\tTYPE_IS_NOT_STANDALONE = 907,\n\tMISSING_ZONEJS = 908,\n\tUNEXPECTED_ZONE_STATE = 909\n}\n\ndeclare const SANITIZER = 12;\n\n/**\n * Sanitizer is used by the views to sanitize potentially dangerous values.\n *\n * @publicApi\n */\nexport declare abstract class Sanitizer {\n\tabstract sanitize(context: SecurityContext, value: {} | string | null): string | null;\n\t/** @nocollapse */\n\tstatic ɵprov: unknown;\n}\n\n/**\n * Function used to sanitize the value before writing it into the renderer.\n */\ndeclare type SanitizerFn = (value: any, tagName?: string, propName?: string) => string | TrustedHTML | TrustedScript | TrustedScriptURL;\n\n\n/**\n * A schema definition associated with an NgModule.\n *\n * @see \\`@NgModule\\`, \\`CUSTOM_ELEMENTS_SCHEMA\\`, \\`NO_ERRORS_SCHEMA\\`\n *\n * @param name The name of a defined schema.\n *\n * @publicApi\n */\nexport declare interface SchemaMetadata {\n\tname: string;\n}\n\n\n/**\n * A SecurityContext marks a location that has dangerous security implications, e.g. a DOM property\n * like \\`innerHTML\\` that could cause Cross Site Scripting (XSS) security bugs when improperly\n * handled.\n *\n * See DomSanitizer for more details on security in Angular applications.\n *\n * @publicApi\n */\nexport declare enum SecurityContext {\n\tNONE = 0,\n\tHTML = 1,\n\tSTYLE = 2,\n\tSCRIPT = 3,\n\tURL = 4,\n\tRESOURCE_URL = 5\n}\n\n/** Flags used to build up CssSelectors */\ndeclare const enum SelectorFlags {\n\t/** Indicates this is the beginning of a new negative selector */\n\tNOT = 1,\n\t/** Mode for matching attributes */\n\tATTRIBUTE = 2,\n\t/** Mode for matching tag names */\n\tELEMENT = 4,\n\t/** Mode for matching class names */\n\tCLASS = 8\n}\n\n/**\n * Type of the Self metadata.\n *\n * @publicApi\n */\nexport declare interface Self {\n}\n\n/**\n * Self decorator and metadata.\n *\n * @Annotation\n * @publicApi\n */\nexport declare const Self: SelfDecorator;\n\n/**\n * Type of the Self decorator / constructor function.\n *\n * @publicApi\n */\nexport declare interface SelfDecorator {\n\t/**\n\t * Parameter decorator to be used on constructor parameters,\n\t * which tells the DI framework to start dependency resolution from the local injector.\n\t *\n\t * Resolution works upward through the injector hierarchy, so the children\n\t * of this class must configure their own providers or be prepared for a \\`null\\` result.\n\t *\n\t * @usageNotes\n\t *\n\t * In the following example, the dependency can be resolved\n\t * by the local injector when instantiating the class itself, but not\n\t * when instantiating a child.\n\t *\n\t * <code-example path=\"core/di/ts/metadata_spec.ts\" region=\"Self\">\n\t * </code-example>\n\t *\n\t * @see \\`SkipSelf\\`\n\t * @see \\`Optional\\`\n\t *\n\t */\n\t(): any;\n\tnew(): Self;\n}\n\n/**\n * Set the {@link GetTestability} implementation used by the Angular testing framework.\n * @publicApi\n */\nexport declare function setTestabilityGetter(getter: GetTestability): void;\n\n\n/**\n * Represents a basic change from a previous to a new value for a single\n * property on a directive instance. Passed as a value in a\n * {@link SimpleChanges} object to the \\`ngOnChanges\\` hook.\n *\n * @see \\`OnChanges\\`\n *\n * @publicApi\n */\nexport declare class SimpleChange {\n\tpreviousValue: any;\n\tcurrentValue: any;\n\tfirstChange: boolean;\n\tconstructor(previousValue: any, currentValue: any, firstChange: boolean);\n\t/**\n\t * Check whether the new value is the first value assigned.\n\t */\n\tisFirstChange(): boolean;\n}\n\n/**\n * A hashtable of changes represented by {@link SimpleChange} objects stored\n * at the declared property name they belong to on a Directive or Component. This is\n * the type passed to the \\`ngOnChanges\\` hook.\n *\n * @see \\`OnChanges\\`\n *\n * @publicApi\n */\nexport declare interface SimpleChanges {\n\t[propName: string]: SimpleChange;\n}\n\n/**\n * Type of the \\`SkipSelf\\` metadata.\n *\n * @publicApi\n */\nexport declare interface SkipSelf {\n}\n\n/**\n * \\`SkipSelf\\` decorator and metadata.\n *\n * @Annotation\n * @publicApi\n */\nexport declare const SkipSelf: SkipSelfDecorator;\n\n/**\n * Type of the \\`SkipSelf\\` decorator / constructor function.\n *\n * @publicApi\n */\nexport declare interface SkipSelfDecorator {\n\t/**\n\t * Parameter decorator to be used on constructor parameters,\n\t * which tells the DI framework to start dependency resolution from the parent injector.\n\t * Resolution works upward through the injector hierarchy, so the local injector\n\t * is not checked for a provider.\n\t *\n\t * @usageNotes\n\t *\n\t * In the following example, the dependency can be resolved when\n\t * instantiating a child, but not when instantiating the class itself.\n\t *\n\t * <code-example path=\"core/di/ts/metadata_spec.ts\" region=\"SkipSelf\">\n\t * </code-example>\n\t *\n\t * @see [Dependency Injection guide](guide/dependency-injection-in-action#skip).\n\t * @see \\`Self\\`\n\t * @see \\`Optional\\`\n\t *\n\t */\n\t(): any;\n\tnew(): SkipSelf;\n}\n\n/**\n * Configures the \\`Injector\\` to return an instance of \\`useClass\\` for a token.\n * @see [\"Dependency Injection Guide\"](guide/dependency-injection).\n *\n * @usageNotes\n *\n * {@example core/di/ts/provider_spec.ts region='StaticClassProvider'}\n *\n * Note that following two providers are not equal:\n *\n * {@example core/di/ts/provider_spec.ts region='StaticClassProviderDifference'}\n *\n * ### Multi-value example\n *\n * {@example core/di/ts/provider_spec.ts region='MultiProviderAspect'}\n *\n * @publicApi\n */\nexport declare interface StaticClassProvider extends StaticClassSansProvider {\n\t/**\n\t * An injection token. Typically an instance of \\`Type\\` or \\`InjectionToken\\`, but can be \\`any\\`.\n\t */\n\tprovide: any;\n\t/**\n\t * When true, injector returns an array of instances. This is useful to allow multiple\n\t * providers spread across many files to provide configuration information to a common token.\n\t */\n\tmulti?: boolean;\n}\n\n/**\n * Configures the \\`Injector\\` to return an instance of \\`useClass\\` for a token.\n * Base for \\`StaticClassProvider\\` decorator.\n *\n * @publicApi\n */\nexport declare interface StaticClassSansProvider {\n\t/**\n\t * An optional class to instantiate for the \\`token\\`. By default, the \\`provide\\`\n\t * class is instantiated.\n\t */\n\tuseClass: Type<any>;\n\t/**\n\t * A list of \\`token\\`s to be resolved by the injector. The list of values is then\n\t * used as arguments to the \\`useClass\\` constructor.\n\t */\n\tdeps: any[];\n}\n\n/**\n * Describes how an \\`Injector\\` should be configured as static (that is, without reflection).\n * A static provider provides tokens to an injector for various types of dependencies.\n *\n * @see \\`Injector.create()\\`.\n * @see [\"Dependency Injection Guide\"](guide/dependency-injection-providers).\n *\n * @publicApi\n */\nexport declare type StaticProvider = ValueProvider | ExistingProvider | StaticClassProvider | ConstructorProvider | FactoryProvider | any[];\n\ndeclare const T_HOST = 6;\n\n/**\n * A combination of:\n * - Attribute names and values.\n * - Special markers acting as flags to alter attributes processing.\n * - Parsed ngProjectAs selectors.\n */\ndeclare type TAttributes = (string | ɵAttributeMarker | CssSelector)[];\n\n/**\n * Constants that are associated with a view. Includes:\n * - Attribute arrays.\n * - Local definition arrays.\n * - Translated messages (i18n).\n */\ndeclare type TConstants = (TAttributes | string)[];\n\n/**\n * Factory function that returns an array of consts. Consts can be represented as a function in\n * case any additional statements are required to define consts in the list. An example is i18n\n * where additional i18n calls are generated, which should be executed when consts are requested\n * for the first time.\n */\ndeclare type TConstantsFactory = () => TConstants;\n\n/**\n * TConstants type that describes how the \\`consts\\` field is generated on ComponentDef: it can be\n * either an array or a factory function that returns that array.\n */\ndeclare type TConstantsOrFactory = TConstants | TConstantsFactory;\n\n/** Static data for an LContainer */\ndeclare interface TContainerNode extends TNode {\n\t/**\n\t * Index in the data[] array.\n\t *\n\t * If it's -1, this is a dynamically created container node that isn't stored in\n\t * data[] (e.g. when you inject ViewContainerRef) .\n\t */\n\tindex: number;\n\tchild: null;\n\t/**\n\t * Container nodes will have parents unless:\n\t *\n\t * - They are the first node of a component or embedded view\n\t * - They are dynamically created\n\t */\n\tparent: TElementNode | TElementContainerNode | null;\n\ttViews: TView | TView[] | null;\n\tprojection: null;\n\tvalue: null;\n}\n\n/**\n * Static data that corresponds to the instance-specific data array on an LView.\n *\n * Each node's static data is stored in tData at the same index that it's stored\n * in the data array.  Any nodes that do not have static data store a null value in\n * tData to avoid a sparse array.\n *\n * Each pipe's definition is stored here at the same index as its pipe instance in\n * the data array.\n *\n * Each host property's name is stored here at the same index as its value in the\n * data array.\n *\n * Each property binding name is stored here at the same index as its value in\n * the data array. If the binding is an interpolation, the static string values\n * are stored parallel to the dynamic values. Example:\n *\n * id=\"prefix {{ v0 }} a {{ v1 }} b {{ v2 }} suffix\"\n *\n * LView       |   TView.data\n *------------------------\n *  v0 value   |   'a'\n *  v1 value   |   'b'\n *  v2 value   |   id � prefix � suffix\n *\n * Injector bloom filters are also stored here.\n */\ndeclare type TData = (TNode | ɵPipeDef<any> | ɵDirectiveDef<any> | ɵComponentDef<any> | number | TStylingRange | TStylingKey | ProviderToken<any> | TI18n | I18nUpdateOpCodes | TIcu | null | string)[];\n\n/** Static data for an <ng-container> */\ndeclare interface TElementContainerNode extends TNode {\n\t/** Index in the LView[] array. */\n\tindex: number;\n\tchild: TElementNode | TTextNode | TContainerNode | TElementContainerNode | TProjectionNode | null;\n\tparent: TElementNode | TElementContainerNode | null;\n\ttViews: null;\n\tprojection: null;\n}\n\n/** Static data for an element  */\ndeclare interface TElementNode extends TNode {\n\t/** Index in the data[] array */\n\tindex: number;\n\tchild: TElementNode | TTextNode | TElementContainerNode | TContainerNode | TProjectionNode | null;\n\t/**\n\t * Element nodes will have parents unless they are the first node of a component or\n\t * embedded view (which means their parent is in a different view and must be\n\t * retrieved using viewData[HOST_NODE]).\n\t */\n\tparent: TElementNode | TElementContainerNode | null;\n\ttViews: null;\n\t/**\n\t * If this is a component TNode with projection, this will be an array of projected\n\t * TNodes or native nodes (see TNode.projection for more info). If it's a regular element node\n\t * or a component without projection, it will be null.\n\t */\n\tprojection: (TNode | RNode[])[] | null;\n\t/**\n\t * Stores TagName\n\t */\n\tvalue: string;\n}\n\n/**\n * Represents an embedded template that can be used to instantiate embedded views.\n * To instantiate embedded views based on a template, use the \\`ViewContainerRef\\`\n * method \\`createEmbeddedView()\\`.\n *\n * Access a \\`TemplateRef\\` instance by placing a directive on an \\`<ng-template>\\`\n * element (or directive prefixed with \\`*\\`). The \\`TemplateRef\\` for the embedded view\n * is injected into the constructor of the directive,\n * using the \\`TemplateRef\\` token.\n *\n * You can also use a \\`Query\\` to find a \\`TemplateRef\\` associated with\n * a component or a directive.\n *\n * @see \\`ViewContainerRef\\`\n * @see [Navigate the Component Tree with DI](guide/dependency-injection-navtree)\n *\n * @publicApi\n */\nexport declare abstract class TemplateRef<C> {\n\t/**\n\t * The anchor element in the parent view for this embedded view.\n\t *\n\t * The data-binding and injection contexts of embedded views created from this \\`TemplateRef\\`\n\t * inherit from the contexts of this location.\n\t *\n\t * Typically new embedded views are attached to the view container of this location, but in\n\t * advanced use-cases, the view can be attached to a different container while keeping the\n\t * data-binding and injection context from the original location.\n\t *\n\t */\n\tabstract readonly elementRef: ElementRef;\n\t/**\n\t * Instantiates an unattached embedded view based on this template.\n\t * @param context The data-binding context of the embedded view, as declared\n\t * in the \\`<ng-template>\\` usage.\n\t * @param injector Injector to be used within the embedded view.\n\t * @returns The new embedded view object.\n\t */\n\tabstract createEmbeddedView(context: C, injector?: Injector): EmbeddedViewRef<C>;\n}\n\n/**\n * The Testability service provides testing hooks that can be accessed from\n * the browser.\n *\n * Angular applications bootstrapped using an NgModule (via \\`@NgModule.bootstrap\\` field) will also\n * instantiate Testability by default (in both development and production modes).\n *\n * For applications bootstrapped using the \\`bootstrapApplication\\` function, Testability is not\n * included by default. You can include it into your applications by getting the list of necessary\n * providers using the \\`provideProtractorTestingSupport()\\` function and adding them into the\n * \\`options.providers\\` array. Example:\n *\n * \\`\\`\\`typescript\n * import {provideProtractorTestingSupport} from '@angular/platform-browser';\n *\n * await bootstrapApplication(RootComponent, providers: [provideProtractorTestingSupport()]);\n * \\`\\`\\`\n *\n * @publicApi\n */\nexport declare class Testability implements PublicTestability {\n\tprivate _ngZone;\n\tprivate registry;\n\tprivate _pendingCount;\n\tprivate _isZoneStable;\n\tprivate _callbacks;\n\tprivate taskTrackingZone;\n\tconstructor(_ngZone: NgZone, registry: TestabilityRegistry, testabilityGetter: GetTestability);\n\tprivate _watchAngularEvents;\n\t/**\n\t * Increases the number of pending request\n\t * @deprecated pending requests are now tracked with zones.\n\t */\n\tincreasePendingRequestCount(): number;\n\t/**\n\t * Decreases the number of pending request\n\t * @deprecated pending requests are now tracked with zones\n\t */\n\tdecreasePendingRequestCount(): number;\n\t/**\n\t * Whether an associated application is stable\n\t */\n\tisStable(): boolean;\n\tprivate _runCallbacksIfReady;\n\tprivate getPendingTasks;\n\tprivate addCallback;\n\t/**\n\t * Wait for the application to be stable with a timeout. If the timeout is reached before that\n\t * happens, the callback receives a list of the macro tasks that were pending, otherwise null.\n\t *\n\t * @param doneCb The callback to invoke when Angular is stable or the timeout expires\n\t *    whichever comes first.\n\t * @param timeout Optional. The maximum time to wait for Angular to become stable. If not\n\t *    specified, whenStable() will wait forever.\n\t * @param updateCb Optional. If specified, this callback will be invoked whenever the set of\n\t *    pending macrotasks changes. If this callback returns true doneCb will not be invoked\n\t *    and no further updates will be issued.\n\t */\n\twhenStable(doneCb: Function, timeout?: number, updateCb?: Function): void;\n\t/**\n\t * Get the number of pending requests\n\t * @deprecated pending requests are now tracked with zones\n\t */\n\tgetPendingRequestCount(): number;\n\t/**\n\t * Find providers by name\n\t * @param using The root element to search from\n\t * @param provider The name of binding variable\n\t * @param exactMatch Whether using exactMatch\n\t */\n\tfindProviders(using: any, provider: string, exactMatch: boolean): any[];\n\tstatic ɵfac: i0.ɵɵFactoryDeclaration<Testability, never>;\n\tstatic ɵprov: i0.ɵɵInjectableDeclaration<Testability>;\n}\n\n/**\n * A global registry of {@link Testability} instances for specific elements.\n * @publicApi\n */\nexport declare class TestabilityRegistry {\n\t/**\n\t * Registers an application with a testability hook so that it can be tracked\n\t * @param token token of application, root element\n\t * @param testability Testability hook\n\t */\n\tregisterApplication(token: any, testability: Testability): void;\n\t/**\n\t * Unregisters an application.\n\t * @param token token of application, root element\n\t */\n\tunregisterApplication(token: any): void;\n\t/**\n\t * Unregisters all applications\n\t */\n\tunregisterAllApplications(): void;\n\t/**\n\t * Get a testability hook associated with the application\n\t * @param elem root element\n\t */\n\tgetTestability(elem: any): Testability | null;\n\t/**\n\t * Get all registered testabilities\n\t */\n\tgetAllTestabilities(): Testability[];\n\t/**\n\t * Get all registered applications(root elements)\n\t */\n\tgetAllRootElements(): any[];\n\t/**\n\t * Find testability of a node in the Tree\n\t * @param elem node\n\t * @param findInAncestors whether finding testability in ancestors if testability was not found in\n\t * current node\n\t */\n\tfindTestabilityInTree(elem: Node, findInAncestors?: boolean): Testability | null;\n\tstatic ɵfac: i0.ɵɵFactoryDeclaration<TestabilityRegistry, never>;\n\tstatic ɵprov: i0.ɵɵInjectableDeclaration<TestabilityRegistry>;\n}\n\n/**\n * Store information for the i18n translation block.\n */\ndeclare interface TI18n {\n\t/**\n\t * A set of OpCodes which will create the Text Nodes and ICU anchors for the translation blocks.\n\t *\n\t * NOTE: The ICU anchors are filled in with ICU Update OpCode.\n\t */\n\tcreate: I18nCreateOpCodes;\n\t/**\n\t * A set of OpCodes which will be executed on each change detection to determine if any changes to\n\t * DOM are required.\n\t */\n\tupdate: I18nUpdateOpCodes;\n}\n\ndeclare interface TIcu {\n\t/**\n\t * Defines the ICU type of \\`select\\` or \\`plural\\`\n\t */\n\ttype: IcuType;\n\t/**\n\t * Index in \\`LView\\` where the anchor node is stored. \\`<!-- ICU 0:0 -->\\`\n\t */\n\tanchorIdx: number;\n\t/**\n\t * Currently selected ICU case pointer.\n\t *\n\t * \\`lView[currentCaseLViewIndex]\\` stores the currently selected case. This is needed to know how\n\t * to clean up the current case when transitioning no the new case.\n\t *\n\t * If the value stored is:\n\t * \\`null\\`: No current case selected.\n\t *   \\`<0\\`: A flag which means that the ICU just switched and that \\`icuUpdate\\` must be executed\n\t *         regardless of the \\`mask\\`. (After the execution the flag is cleared)\n\t *   \\`>=0\\` A currently selected case index.\n\t */\n\tcurrentCaseLViewIndex: number;\n\t/**\n\t * A list of case values which the current ICU will try to match.\n\t *\n\t * The last value is \\`other\\`\n\t */\n\tcases: any[];\n\t/**\n\t * A set of OpCodes to apply in order to build up the DOM render tree for the ICU\n\t */\n\tcreate: IcuCreateOpCodes[];\n\t/**\n\t * A set of OpCodes to apply in order to destroy the DOM render tree for the ICU.\n\t */\n\tremove: I18nRemoveOpCodes[];\n\t/**\n\t * A set of OpCodes to apply in order to update the DOM render tree for the ICU bindings.\n\t */\n\tupdate: I18nUpdateOpCodes[];\n}\n\n/**\n * Binding data (flyweight) for a particular node that is shared between all templates\n * of a specific type.\n *\n * If a property is:\n *    - PropertyAliases: that property's data was generated and this is it\n *    - Null: that property's data was already generated and nothing was found.\n *    - Undefined: that property's data has not yet been generated\n *\n * see: https://en.wikipedia.org/wiki/Flyweight_pattern for more on the Flyweight pattern\n */\ndeclare interface TNode {\n\t/** The type of the TNode. See TNodeType. */\n\ttype: TNodeType;\n\t/**\n\t * Index of the TNode in TView.data and corresponding native element in LView.\n\t *\n\t * This is necessary to get from any TNode to its corresponding native element when\n\t * traversing the node tree.\n\t *\n\t * If index is -1, this is a dynamically created container node or embedded view node.\n\t */\n\tindex: number;\n\t/**\n\t * Insert before existing DOM node index.\n\t *\n\t * When DOM nodes are being inserted, normally they are being appended as they are created.\n\t * Under i18n case, the translated text nodes are created ahead of time as part of the\n\t * \\`ɵɵi18nStart\\` instruction which means that this \\`TNode\\` can't just be appended and instead\n\t * needs to be inserted using \\`insertBeforeIndex\\` semantics.\n\t *\n\t * Additionally sometimes it is necessary to insert new text nodes as a child of this \\`TNode\\`. In\n\t * such a case the value stores an array of text nodes to insert.\n\t *\n\t * Example:\n\t * \\`\\`\\`\n\t * <div i18n>\n\t *   Hello <span>World</span>!\n\t * </div>\n\t * \\`\\`\\`\n\t * In the above example the \\`ɵɵi18nStart\\` instruction can create \\`Hello \\`, \\`World\\` and \\`!\\` text\n\t * nodes. It can also insert \\`Hello \\` and \\`!\\` text node as a child of \\`<div>\\`, but it can't\n\t * insert \\`World\\` because the \\`<span>\\` node has not yet been created. In such a case the\n\t * \\`<span>\\` \\`TNode\\` will have an array which will direct the \\`<span>\\` to not only insert\n\t * itself in front of \\`!\\` but also to insert the \\`World\\` (created by \\`ɵɵi18nStart\\`) into\n\t * \\`<span>\\` itself.\n\t *\n\t * Pseudo code:\n\t * \\`\\`\\`\n\t *   if (insertBeforeIndex === null) {\n\t *     // append as normal\n\t *   } else if (Array.isArray(insertBeforeIndex)) {\n\t *     // First insert current \\`TNode\\` at correct location\n\t *     const currentNode = lView[this.index];\n\t *     parentNode.insertBefore(currentNode, lView[this.insertBeforeIndex[0]]);\n\t *     // Now append all of the children\n\t *     for(let i=1; i<this.insertBeforeIndex; i++) {\n\t *       currentNode.appendChild(lView[this.insertBeforeIndex[i]]);\n\t *     }\n\t *   } else {\n\t *     parentNode.insertBefore(lView[this.index], lView[this.insertBeforeIndex])\n\t *   }\n\t * \\`\\`\\`\n\t * - null: Append as normal using \\`parentNode.appendChild\\`\n\t * - \\`number\\`: Append using\n\t *      \\`parentNode.insertBefore(lView[this.index], lView[this.insertBeforeIndex])\\`\n\t *\n\t * *Initialization*\n\t *\n\t * Because \\`ɵɵi18nStart\\` executes before nodes are created, on \\`TView.firstCreatePass\\` it is not\n\t * possible for \\`ɵɵi18nStart\\` to set the \\`insertBeforeIndex\\` value as the corresponding \\`TNode\\`\n\t * has not yet been created. For this reason the \\`ɵɵi18nStart\\` creates a \\`TNodeType.Placeholder\\`\n\t * \\`TNode\\` at that location. See \\`TNodeType.Placeholder\\` for more information.\n\t */\n\tinsertBeforeIndex: InsertBeforeIndex;\n\t/**\n\t * The index of the closest injector in this node's LView.\n\t *\n\t * If the index === -1, there is no injector on this node or any ancestor node in this view.\n\t *\n\t * If the index !== -1, it is the index of this node's injector OR the index of a parent\n\t * injector in the same view. We pass the parent injector index down the node tree of a view so\n\t * it's possible to find the parent injector without walking a potentially deep node tree.\n\t * Injector indices are not set across view boundaries because there could be multiple component\n\t * hosts.\n\t *\n\t * If tNode.injectorIndex === tNode.parent.injectorIndex, then the index belongs to a parent\n\t * injector.\n\t */\n\tinjectorIndex: number;\n\t/**\n\t * Stores starting index of the directives.\n\t *\n\t * NOTE: The first directive is always component (if present).\n\t */\n\tdirectiveStart: number;\n\t/**\n\t * Stores final exclusive index of the directives.\n\t *\n\t * The area right behind the \\`directiveStart-directiveEnd\\` range is used to allocate the\n\t * \\`HostBindingFunction\\` \\`vars\\` (or null if no bindings.) Therefore \\`directiveEnd\\` is used to set\n\t * \\`LFrame.bindingRootIndex\\` before \\`HostBindingFunction\\` is executed.\n\t */\n\tdirectiveEnd: number;\n\t/**\n\t * Stores the last directive which had a styling instruction.\n\t *\n\t * Initial value of this is \\`-1\\` which means that no \\`hostBindings\\` styling instruction has\n\t * executed. As \\`hostBindings\\` instructions execute they set the value to the index of the\n\t * \\`DirectiveDef\\` which contained the last \\`hostBindings\\` styling instruction.\n\t *\n\t * Valid values are:\n\t * - \\`-1\\` No \\`hostBindings\\` instruction has executed.\n\t * - \\`directiveStart <= directiveStylingLast < directiveEnd\\`: Points to the \\`DirectiveDef\\` of\n\t * the last styling instruction which executed in the \\`hostBindings\\`.\n\t *\n\t * This data is needed so that styling instructions know which static styling data needs to be\n\t * collected from the \\`DirectiveDef.hostAttrs\\`. A styling instruction needs to collect all data\n\t * since last styling instruction.\n\t */\n\tdirectiveStylingLast: number;\n\t/**\n\t * Stores indexes of property bindings. This field is only set in the ngDevMode and holds\n\t * indexes of property bindings so TestBed can get bound property metadata for a given node.\n\t */\n\tpropertyBindings: number[] | null;\n\t/**\n\t * Stores if Node isComponent, isProjected, hasContentQuery, hasClassInput and hasStyleInput\n\t * etc.\n\t */\n\tflags: TNodeFlags;\n\t/**\n\t * This number stores two values using its bits:\n\t *\n\t * - the index of the first provider on that node (first 16 bits)\n\t * - the count of view providers from the component on this node (last 16 bits)\n\t */\n\tproviderIndexes: TNodeProviderIndexes;\n\t/**\n\t * The value name associated with this node.\n\t * if type:\n\t *   \\`TNodeType.Text\\`: text value\n\t *   \\`TNodeType.Element\\`: tag name\n\t *   \\`TNodeType.ICUContainer\\`: \\`TIcu\\`\n\t */\n\tvalue: any;\n\t/**\n\t * Attributes associated with an element. We need to store attributes to support various\n\t * use-cases (attribute injection, content projection with selectors, directives matching).\n\t * Attributes are stored statically because reading them from the DOM would be way too slow for\n\t * content projection and queries.\n\t *\n\t * Since attrs will always be calculated first, they will never need to be marked undefined by\n\t * other instructions.\n\t *\n\t * For regular attributes a name of an attribute and its value alternate in the array.\n\t * e.g. ['role', 'checkbox']\n\t * This array can contain flags that will indicate \"special attributes\" (attributes with\n\t * namespaces, attributes extracted from bindings and outputs).\n\t */\n\tattrs: TAttributes | null;\n\t/**\n\t * Same as \\`TNode.attrs\\` but contains merged data across all directive host bindings.\n\t *\n\t * We need to keep \\`attrs\\` as unmerged so that it can be used for attribute selectors.\n\t * We merge attrs here so that it can be used in a performant way for initial rendering.\n\t *\n\t * The \\`attrs\\` are merged in first pass in following order:\n\t * - Component's \\`hostAttrs\\`\n\t * - Directives' \\`hostAttrs\\`\n\t * - Template \\`TNode.attrs\\` associated with the current \\`TNode\\`.\n\t */\n\tmergedAttrs: TAttributes | null;\n\t/**\n\t * A set of local names under which a given element is exported in a template and\n\t * visible to queries. An entry in this array can be created for different reasons:\n\t * - an element itself is referenced, ex.: \\`<div #foo>\\`\n\t * - a component is referenced, ex.: \\`<my-cmpt #foo>\\`\n\t * - a directive is referenced, ex.: \\`<my-cmpt #foo=\"directiveExportAs\">\\`.\n\t *\n\t * A given element might have different local names and those names can be associated\n\t * with a directive. We store local names at even indexes while odd indexes are reserved\n\t * for directive index in a view (or \\`-1\\` if there is no associated directive).\n\t *\n\t * Some examples:\n\t * - \\`<div #foo>\\` => \\`[\"foo\", -1]\\`\n\t * - \\`<my-cmpt #foo>\\` => \\`[\"foo\", myCmptIdx]\\`\n\t * - \\`<my-cmpt #foo #bar=\"directiveExportAs\">\\` => \\`[\"foo\", myCmptIdx, \"bar\", directiveIdx]\\`\n\t * - \\`<div #foo #bar=\"directiveExportAs\">\\` => \\`[\"foo\", -1, \"bar\", directiveIdx]\\`\n\t */\n\tlocalNames: (string | number)[] | null;\n\t/** Information about input properties that need to be set once from attribute data. */\n\tinitialInputs: InitialInputData | null | undefined;\n\t/**\n\t * Input data for all directives on this node. \\`null\\` means that there are no directives with\n\t * inputs on this node.\n\t */\n\tinputs: PropertyAliases | null;\n\t/**\n\t * Output data for all directives on this node. \\`null\\` means that there are no directives with\n\t * outputs on this node.\n\t */\n\toutputs: PropertyAliases | null;\n\t/**\n\t * The TView or TViews attached to this node.\n\t *\n\t * If this TNode corresponds to an LContainer with inline views, the container will\n\t * need to store separate static data for each of its view blocks (TView[]). Otherwise,\n\t * nodes in inline views with the same index as nodes in their parent views will overwrite\n\t * each other, as they are in the same template.\n\t *\n\t * Each index in this array corresponds to the static data for a certain\n\t * view. So if you had V(0) and V(1) in a container, you might have:\n\t *\n\t * [\n\t *   [{tagName: 'div', attrs: ...}, null],     // V(0) TView\n\t *   [{tagName: 'button', attrs ...}, null]    // V(1) TView\n\t *\n\t * If this TNode corresponds to an LContainer with a template (e.g. structural\n\t * directive), the template's TView will be stored here.\n\t *\n\t * If this TNode corresponds to an element, tViews will be null .\n\t */\n\ttViews: TView | TView[] | null;\n\t/**\n\t * The next sibling node. Necessary so we can propagate through the root nodes of a view\n\t * to insert them or remove them from the DOM.\n\t */\n\tnext: TNode | null;\n\t/**\n\t * The next projected sibling. Since in Angular content projection works on the node-by-node\n\t * basis the act of projecting nodes might change nodes relationship at the insertion point\n\t * (target view). At the same time we need to keep initial relationship between nodes as\n\t * expressed in content view.\n\t */\n\tprojectionNext: TNode | null;\n\t/**\n\t * First child of the current node.\n\t *\n\t * For component nodes, the child will always be a ContentChild (in same view).\n\t * For embedded view nodes, the child will be in their child view.\n\t */\n\tchild: TNode | null;\n\t/**\n\t * Parent node (in the same view only).\n\t *\n\t * We need a reference to a node's parent so we can append the node to its parent's native\n\t * element at the appropriate time.\n\t *\n\t * If the parent would be in a different view (e.g. component host), this property will be null.\n\t * It's important that we don't try to cross component boundaries when retrieving the parent\n\t * because the parent will change (e.g. index, attrs) depending on where the component was\n\t * used (and thus shouldn't be stored on TNode). In these cases, we retrieve the parent through\n\t * LView.node instead (which will be instance-specific).\n\t *\n\t * If this is an inline view node (V), the parent will be its container.\n\t */\n\tparent: TElementNode | TContainerNode | null;\n\t/**\n\t * List of projected TNodes for a given component host element OR index into the said nodes.\n\t *\n\t * For easier discussion assume this example:\n\t * \\`<parent>\\`'s view definition:\n\t * \\`\\`\\`\n\t * <child id=\"c1\">content1</child>\n\t * <child id=\"c2\"><span>content2</span></child>\n\t * \\`\\`\\`\n\t * \\`<child>\\`'s view definition:\n\t * \\`\\`\\`\n\t * <ng-content id=\"cont1\"></ng-content>\n\t * \\`\\`\\`\n\t *\n\t * If \\`Array.isArray(projection)\\` then \\`TNode\\` is a host element:\n\t * - \\`projection\\` stores the content nodes which are to be projected.\n\t *    - The nodes represent categories defined by the selector: For example:\n\t *      \\`<ng-content/><ng-content select=\"abc\"/>\\` would represent the heads for \\`<ng-content/>\\`\n\t *      and \\`<ng-content select=\"abc\"/>\\` respectively.\n\t *    - The nodes we store in \\`projection\\` are heads only, we used \\`.next\\` to get their\n\t *      siblings.\n\t *    - The nodes \\`.next\\` is sorted/rewritten as part of the projection setup.\n\t *    - \\`projection\\` size is equal to the number of projections \\`<ng-content>\\`. The size of\n\t *      \\`c1\\` will be \\`1\\` because \\`<child>\\` has only one \\`<ng-content>\\`.\n\t * - we store \\`projection\\` with the host (\\`c1\\`, \\`c2\\`) rather than the \\`<ng-content>\\` (\\`cont1\\`)\n\t *   because the same component (\\`<child>\\`) can be used in multiple locations (\\`c1\\`, \\`c2\\`) and\n\t * as a result have different set of nodes to project.\n\t * - without \\`projection\\` it would be difficult to efficiently traverse nodes to be projected.\n\t *\n\t * If \\`typeof projection == 'number'\\` then \\`TNode\\` is a \\`<ng-content>\\` element:\n\t * - \\`projection\\` is an index of the host's \\`projection\\`Nodes.\n\t *   - This would return the first head node to project:\n\t *     \\`getHost(currentTNode).projection[currentTNode.projection]\\`.\n\t * - When projecting nodes the parent node retrieved may be a \\`<ng-content>\\` node, in which case\n\t *   the process is recursive in nature.\n\t *\n\t * If \\`projection\\` is of type \\`RNode[][]\\` than we have a collection of native nodes passed as\n\t * projectable nodes during dynamic component creation.\n\t */\n\tprojection: (TNode | RNode[])[] | number | null;\n\t/**\n\t * A collection of all \\`style\\` static values for an element (including from host).\n\t *\n\t * This field will be populated if and when:\n\t *\n\t * - There are one or more initial \\`style\\`s on an element (e.g. \\`<div style=\"width:200px;\">\\`)\n\t * - There are one or more initial \\`style\\`s on a directive/component host\n\t *   (e.g. \\`@Directive({host: {style: \"width:200px;\" } }\\`)\n\t */\n\tstyles: string | null;\n\t/**\n\t * A collection of all \\`style\\` static values for an element excluding host sources.\n\t *\n\t * Populated when there are one or more initial \\`style\\`s on an element\n\t * (e.g. \\`<div style=\"width:200px;\">\\`)\n\t * Must be stored separately from \\`tNode.styles\\` to facilitate setting directive\n\t * inputs that shadow the \\`style\\` property. If we used \\`tNode.styles\\` as is for shadowed inputs,\n\t * we would feed host styles back into directives as \"inputs\". If we used \\`tNode.attrs\\`, we\n\t * would have to concatenate the attributes on every template pass. Instead, we process once on\n\t * first create pass and store here.\n\t */\n\tstylesWithoutHost: string | null;\n\t/**\n\t * A \\`KeyValueArray\\` version of residual \\`styles\\`.\n\t *\n\t * When there are styling instructions than each instruction stores the static styling\n\t * which is of lower priority than itself. This means that there may be a higher priority\n\t * styling than the instruction.\n\t *\n\t * Imagine:\n\t * \\`\\`\\`\n\t * <div style=\"color: highest;\" my-dir>\n\t *\n\t * @Directive({\n\t *   host: {\n\t *     style: 'color: lowest; ',\n\t *     '[styles.color]': 'exp' // ɵɵstyleProp('color', ctx.exp);\n\t *   }\n\t * })\n\t * \\`\\`\\`\n\t *\n\t * In the above case:\n\t * - \\`color: lowest\\` is stored with \\`ɵɵstyleProp('color', ctx.exp);\\` instruction\n\t * -  \\`color: highest\\` is the residual and is stored here.\n\t *\n\t * - \\`undefined': not initialized.\n\t * - \\`null\\`: initialized but \\`styles\\` is \\`null\\`\n\t * - \\`KeyValueArray\\`: parsed version of \\`styles\\`.\n\t */\n\tresidualStyles: KeyValueArray<any> | undefined | null;\n\t/**\n\t * A collection of all class static values for an element (including from host).\n\t *\n\t * This field will be populated if and when:\n\t *\n\t * - There are one or more initial classes on an element (e.g. \\`<div class=\"one two three\">\\`)\n\t * - There are one or more initial classes on an directive/component host\n\t *   (e.g. \\`@Directive({host: {class: \"SOME_CLASS\" } }\\`)\n\t */\n\tclasses: string | null;\n\t/**\n\t * A collection of all class static values for an element excluding host sources.\n\t *\n\t * Populated when there are one or more initial classes on an element\n\t * (e.g. \\`<div class=\"SOME_CLASS\">\\`)\n\t * Must be stored separately from \\`tNode.classes\\` to facilitate setting directive\n\t * inputs that shadow the \\`class\\` property. If we used \\`tNode.classes\\` as is for shadowed\n\t * inputs, we would feed host classes back into directives as \"inputs\". If we used\n\t * \\`tNode.attrs\\`, we would have to concatenate the attributes on every template pass. Instead,\n\t * we process once on first create pass and store here.\n\t */\n\tclassesWithoutHost: string | null;\n\t/**\n\t * A \\`KeyValueArray\\` version of residual \\`classes\\`.\n\t *\n\t * Same as \\`TNode.residualStyles\\` but for classes.\n\t *\n\t * - \\`undefined': not initialized.\n\t * - \\`null\\`: initialized but \\`classes\\` is \\`null\\`\n\t * - \\`KeyValueArray\\`: parsed version of \\`classes\\`.\n\t */\n\tresidualClasses: KeyValueArray<any> | undefined | null;\n\t/**\n\t * Stores the head/tail index of the class bindings.\n\t *\n\t * - If no bindings, the head and tail will both be 0.\n\t * - If there are template bindings, stores the head/tail of the class bindings in the template.\n\t * - If no template bindings but there are host bindings, the head value will point to the last\n\t *   host binding for \"class\" (not the head of the linked list), tail will be 0.\n\t *\n\t * See: \\`style_binding_list.ts\\` for details.\n\t *\n\t * This is used by \\`insertTStylingBinding\\` to know where the next styling binding should be\n\t * inserted so that they can be sorted in priority order.\n\t */\n\tclassBindings: TStylingRange;\n\t/**\n\t * Stores the head/tail index of the class bindings.\n\t *\n\t * - If no bindings, the head and tail will both be 0.\n\t * - If there are template bindings, stores the head/tail of the style bindings in the template.\n\t * - If no template bindings but there are host bindings, the head value will point to the last\n\t *   host binding for \"style\" (not the head of the linked list), tail will be 0.\n\t *\n\t * See: \\`style_binding_list.ts\\` for details.\n\t *\n\t * This is used by \\`insertTStylingBinding\\` to know where the next styling binding should be\n\t * inserted so that they can be sorted in priority order.\n\t */\n\tstyleBindings: TStylingRange;\n}\n\n/**\n * Corresponds to the TNode.flags property.\n */\ndeclare const enum TNodeFlags {\n\t/** Bit #1 - This bit is set if the node is a host for any directive (including a component) */\n\tisDirectiveHost = 1,\n\t/**\n\t * Bit #2 - This bit is set if the node is a host for a component.\n\t *\n\t * Setting this bit implies that the \\`isDirectiveHost\\` bit is set as well.\n\t * */\n\tisComponentHost = 2,\n\t/** Bit #3 - This bit is set if the node has been projected */\n\tisProjected = 4,\n\t/** Bit #4 - This bit is set if any directive on this node has content queries */\n\thasContentQuery = 8,\n\t/** Bit #5 - This bit is set if the node has any \"class\" inputs */\n\thasClassInput = 16,\n\t/** Bit #6 - This bit is set if the node has any \"style\" inputs */\n\thasStyleInput = 32,\n\t/** Bit #7 This bit is set if the node has been detached by i18n */\n\tisDetached = 64,\n\t/**\n\t * Bit #8 - This bit is set if the node has directives with host bindings.\n\t *\n\t * This flags allows us to guard host-binding logic and invoke it only on nodes\n\t * that actually have directives with host bindings.\n\t */\n\thasHostBindings = 128\n}\n\n/**\n * Corresponds to the TNode.providerIndexes property.\n */\ndeclare const enum TNodeProviderIndexes {\n\t/** The index of the first provider on this node is encoded on the least significant bits. */\n\tProvidersStartIndexMask = 1048575,\n\t/**\n\t * The count of view providers from the component on this node is\n\t * encoded on the 20 most significant bits.\n\t */\n\tCptViewProvidersCountShift = 20,\n\tCptViewProvidersCountShifter = 1048576\n}\n\n/**\n * TNodeType corresponds to the {@link TNode} \\`type\\` property.\n *\n * NOTE: type IDs are such that we use each bit to denote a type. This is done so that we can easily\n * check if the \\`TNode\\` is of more than one type.\n *\n * \\`if (tNode.type === TNodeType.Text || tNode.type === TNode.Element)\\`\n * can be written as:\n * \\`if (tNode.type & (TNodeType.Text | TNodeType.Element))\\`\n *\n * However any given \\`TNode\\` can only be of one type.\n */\ndeclare const enum TNodeType {\n\t/**\n\t * The TNode contains information about a DOM element aka {@link RText}.\n\t */\n\tText = 1,\n\t/**\n\t * The TNode contains information about a DOM element aka {@link RElement}.\n\t */\n\tElement = 2,\n\t/**\n\t * The TNode contains information about an {@link LContainer} for embedded views.\n\t */\n\tContainer = 4,\n\t/**\n\t * The TNode contains information about an \\`<ng-container>\\` element {@link RNode}.\n\t */\n\tElementContainer = 8,\n\t/**\n\t * The TNode contains information about an \\`<ng-content>\\` projection\n\t */\n\tProjection = 16,\n\t/**\n\t * The TNode contains information about an ICU comment used in \\`i18n\\`.\n\t */\n\tIcu = 32,\n\t/**\n\t * Special node type representing a placeholder for future \\`TNode\\` at this location.\n\t *\n\t * I18n translation blocks are created before the element nodes which they contain. (I18n blocks\n\t * can span over many elements.) Because i18n \\`TNode\\`s (representing text) are created first they\n\t * often may need to point to element \\`TNode\\`s which are not yet created. In such a case we create\n\t * a \\`Placeholder\\` \\`TNode\\`. This allows the i18n to structurally link the \\`TNode\\`s together\n\t * without knowing any information about the future nodes which will be at that location.\n\t *\n\t * On \\`firstCreatePass\\` When element instruction executes it will try to create a \\`TNode\\` at that\n\t * location. Seeing a \\`Placeholder\\` \\`TNode\\` already there tells the system that it should reuse\n\t * existing \\`TNode\\` (rather than create a new one) and just update the missing information.\n\t */\n\tPlaceholder = 64,\n\tAnyRNode = 3,\n\tAnyContainer = 12\n}\n\n/**\n * Type representing a set of TNodes that can have local refs (\\`#foo\\`) placed on them.\n */\ndeclare type TNodeWithLocalRefs = TContainerNode | TElementNode | TElementContainerNode;\n\n/** Static data for an LProjectionNode  */\ndeclare interface TProjectionNode extends TNode {\n\t/** Index in the data[] array */\n\tchild: null;\n\t/**\n\t * Projection nodes will have parents unless they are the first node of a component\n\t * or embedded view (which means their parent is in a different view and must be\n\t * retrieved using LView.node).\n\t */\n\tparent: TElementNode | TElementContainerNode | null;\n\ttViews: null;\n\t/** Index of the projection node. (See TNode.projection for more info.) */\n\tprojection: number;\n\tvalue: null;\n}\n\n/**\n * TQueries represent a collection of individual TQuery objects tracked in a given view. Most of the\n * methods on this interface are simple proxy methods to the corresponding functionality on TQuery.\n */\ndeclare interface TQueries {\n\t/**\n\t * Adds a new TQuery to a collection of queries tracked in a given view.\n\t * @param tQuery\n\t */\n\ttrack(tQuery: TQuery): void;\n\t/**\n\t * Returns a TQuery instance for at the given index  in the queries array.\n\t * @param index\n\t */\n\tgetByIndex(index: number): TQuery;\n\t/**\n\t * Returns the number of queries tracked in a given view.\n\t */\n\tlength: number;\n\t/**\n\t * A proxy method that iterates over all the TQueries in a given TView and calls the corresponding\n\t * \\`elementStart\\` on each and every TQuery.\n\t * @param tView\n\t * @param tNode\n\t */\n\telementStart(tView: TView, tNode: TNode): void;\n\t/**\n\t * A proxy method that iterates over all the TQueries in a given TView and calls the corresponding\n\t * \\`elementEnd\\` on each and every TQuery.\n\t * @param tNode\n\t */\n\telementEnd(tNode: TNode): void;\n\t/**\n\t * A proxy method that iterates over all the TQueries in a given TView and calls the corresponding\n\t * \\`template\\` on each and every TQuery.\n\t * @param tView\n\t * @param tNode\n\t */\n\ttemplate(tView: TView, tNode: TNode): void;\n\t/**\n\t * A proxy method that iterates over all the TQueries in a given TView and calls the corresponding\n\t * \\`embeddedTView\\` on each and every TQuery.\n\t * @param tNode\n\t */\n\tembeddedTView(tNode: TNode): TQueries | null;\n}\n\n/**\n * TQuery objects represent all the query-related data that remain the same from one view instance\n * to another and can be determined on the very first template pass. Most notably TQuery holds all\n * the matches for a given view.\n */\ndeclare interface TQuery {\n\t/**\n\t * Query metadata extracted from query annotations.\n\t */\n\tmetadata: TQueryMetadata;\n\t/**\n\t * Index of a query in a declaration view in case of queries propagated to en embedded view, -1\n\t * for queries declared in a given view. We are storing this index so we can find a parent query\n\t * to clone for an embedded view (when an embedded view is created).\n\t */\n\tindexInDeclarationView: number;\n\t/**\n\t * Matches collected on the first template pass. Each match is a pair of:\n\t * - TNode index;\n\t * - match index;\n\t *\n\t * A TNode index can be either:\n\t * - a positive number (the most common case) to indicate a matching TNode;\n\t * - a negative number to indicate that a given query is crossing a <ng-template> element and\n\t * results from views created based on TemplateRef should be inserted at this place.\n\t *\n\t * A match index is a number used to find an actual value (for a given node) when query results\n\t * are materialized. This index can have one of the following values:\n\t * - -2 - indicates that we need to read a special token (TemplateRef, ViewContainerRef etc.);\n\t * - -1 - indicates that we need to read a default value based on the node type (TemplateRef for\n\t * ng-template and ElementRef for other elements);\n\t * - a positive number - index of an injectable to be read from the element injector.\n\t */\n\tmatches: number[] | null;\n\t/**\n\t * A flag indicating if a given query crosses an <ng-template> element. This flag exists for\n\t * performance reasons: we can notice that queries not crossing any <ng-template> elements will\n\t * have matches from a given view only (and adapt processing accordingly).\n\t */\n\tcrossesNgTemplate: boolean;\n\t/**\n\t * A method call when a given query is crossing an element (or element container). This is where a\n\t * given TNode is matched against a query predicate.\n\t * @param tView\n\t * @param tNode\n\t */\n\telementStart(tView: TView, tNode: TNode): void;\n\t/**\n\t * A method called when processing the elementEnd instruction - this is mostly useful to determine\n\t * if a given content query should match any nodes past this point.\n\t * @param tNode\n\t */\n\telementEnd(tNode: TNode): void;\n\t/**\n\t * A method called when processing the template instruction. This is where a\n\t * given TContainerNode is matched against a query predicate.\n\t * @param tView\n\t * @param tNode\n\t */\n\ttemplate(tView: TView, tNode: TNode): void;\n\t/**\n\t * A query-related method called when an embedded TView is created based on the content of a\n\t * <ng-template> element. We call this method to determine if a given query should be propagated\n\t * to the embedded view and if so - return a cloned TQuery for this embedded view.\n\t * @param tNode\n\t * @param childQueryIndex\n\t */\n\tembeddedTView(tNode: TNode, childQueryIndex: number): TQuery | null;\n}\n\n/**\n * An object representing query metadata extracted from query annotations.\n */\ndeclare interface TQueryMetadata {\n\tpredicate: ProviderToken<unknown> | string[];\n\tread: any;\n\tflags: QueryFlags;\n}\n\n/**\n * A function optionally passed into the \\`NgForOf\\` directive to customize how \\`NgForOf\\` uniquely\n * identifies items in an iterable.\n *\n * \\`NgForOf\\` needs to uniquely identify items in the iterable to correctly perform DOM updates\n * when items in the iterable are reordered, new items are added, or existing items are removed.\n *\n *\n * In all of these scenarios it is usually desirable to only update the DOM elements associated\n * with the items affected by the change. This behavior is important to:\n *\n * - preserve any DOM-specific UI state (like cursor position, focus, text selection) when the\n *   iterable is modified\n * - enable animation of item addition, removal, and iterable reordering\n * - preserve the value of the \\`<select>\\` element when nested \\`<option>\\` elements are dynamically\n *   populated using \\`NgForOf\\` and the bound iterable is updated\n *\n * A common use for custom \\`trackBy\\` functions is when the model that \\`NgForOf\\` iterates over\n * contains a property with a unique identifier. For example, given a model:\n *\n * \\`\\`\\`ts\n * class User {\n *   id: number;\n *   name: string;\n *   ...\n * }\n * \\`\\`\\`\n * a custom \\`trackBy\\` function could look like the following:\n * \\`\\`\\`ts\n * function userTrackBy(index, user) {\n *   return user.id;\n * }\n * \\`\\`\\`\n *\n * A custom \\`trackBy\\` function must have several properties:\n *\n * - be [idempotent](https://en.wikipedia.org/wiki/Idempotence) (be without side effects, and always\n * return the same value for a given input)\n * - return unique value for all unique inputs\n * - be fast\n *\n * @see [\\`NgForOf#ngForTrackBy\\`](api/common/NgForOf#ngForTrackBy)\n * @publicApi\n */\nexport declare interface TrackByFunction<T> {\n\t/**\n\t * @param index The index of the item within the iterable.\n\t * @param item The item in the iterable.\n\t */\n\t<U extends T>(index: number, item: T & U): any;\n}\n\n/**\n * Use this token at bootstrap to provide the content of your translation file (\\`xtb\\`,\n * \\`xlf\\` or \\`xlf2\\`) when you want to translate your application in another language.\n *\n * See the [i18n guide](guide/i18n-common-merge) for more information.\n *\n * @usageNotes\n * ### Example\n *\n * \\`\\`\\`typescript\n * import { TRANSLATIONS } from '@angular/core';\n * import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n * import { AppModule } from './app/app.module';\n *\n * // content of your translation file\n * const translations = '....';\n *\n * platformBrowserDynamic().bootstrapModule(AppModule, {\n *   providers: [{provide: TRANSLATIONS, useValue: translations }]\n * });\n * \\`\\`\\`\n *\n * @publicApi\n */\nexport declare const TRANSLATIONS: InjectionToken<string>;\n\n/**\n * Provide this token at bootstrap to set the format of your {@link TRANSLATIONS}: \\`xtb\\`,\n * \\`xlf\\` or \\`xlf2\\`.\n *\n * See the [i18n guide](guide/i18n-common-merge) for more information.\n *\n * @usageNotes\n * ### Example\n *\n * \\`\\`\\`typescript\n * import { TRANSLATIONS_FORMAT } from '@angular/core';\n * import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n * import { AppModule } from './app/app.module';\n *\n * platformBrowserDynamic().bootstrapModule(AppModule, {\n *   providers: [{provide: TRANSLATIONS_FORMAT, useValue: 'xlf' }]\n * });\n * \\`\\`\\`\n *\n * @publicApi\n */\nexport declare const TRANSLATIONS_FORMAT: InjectionToken<string>;\n\ndeclare const TRANSPLANTED_VIEWS_TO_REFRESH = 5;\n\n\n/**\n * @fileoverview\n * While Angular only uses Trusted Types internally for the time being,\n * references to Trusted Types could leak into our core.d.ts, which would force\n * anyone compiling against @angular/core to provide the @types/trusted-types\n * package in their compilation unit.\n *\n * Until https://github.com/microsoft/TypeScript/issues/30024 is resolved, we\n * will keep Angular's public API surface free of references to Trusted Types.\n * For internal and semi-private APIs that need to reference Trusted Types, the\n * minimal type definitions for the Trusted Types API provided by this module\n * should be used instead. They are marked as \"declare\" to prevent them from\n * being renamed by compiler optimization.\n *\n * Adapted from\n * https://github.com/DefinitelyTyped/DefinitelyTyped/blob/master/types/trusted-types/index.d.ts\n * but restricted to the API surface used within Angular.\n */\ndeclare interface TrustedHTML {\n\t__brand__: 'TrustedHTML';\n}\n\ndeclare interface TrustedScript {\n\t__brand__: 'TrustedScript';\n}\n\ndeclare interface TrustedScriptURL {\n\t__brand__: 'TrustedScriptURL';\n}\n\n/**\n * Value stored in the \\`TData\\` which is needed to re-concatenate the styling.\n *\n * See: \\`TStylingKeyPrimitive\\` and \\`TStylingStatic\\`\n */\ndeclare type TStylingKey = TStylingKeyPrimitive | TStylingStatic;\n\n/**\n * The primitive portion (\\`TStylingStatic\\` removed) of the value stored in the \\`TData\\` which is\n * needed to re-concatenate the styling.\n *\n * - \\`string\\`: Stores the property name. Used with \\`ɵɵstyleProp\\`/\\`ɵɵclassProp\\` instruction.\n * - \\`null\\`: Represents map, so there is no name. Used with \\`ɵɵstyleMap\\`/\\`ɵɵclassMap\\`.\n * - \\`false\\`: Represents an ignore case. This happens when \\`ɵɵstyleProp\\`/\\`ɵɵclassProp\\` instruction\n *   is combined with directive which shadows its input \\`@Input('class')\\`. That way the binding\n *   should not participate in the styling resolution.\n */\ndeclare type TStylingKeyPrimitive = string | null | false;\n\n/**\n * This is a branded number which contains previous and next index.\n *\n * When we come across styling instructions we need to store the \\`TStylingKey\\` in the correct\n * order so that we can re-concatenate the styling value in the desired priority.\n *\n * The insertion can happen either at the:\n * - end of template as in the case of coming across additional styling instruction in the template\n * - in front of the template in the case of coming across additional instruction in the\n *   \\`hostBindings\\`.\n *\n * We use \\`TStylingRange\\` to store the previous and next index into the \\`TData\\` where the template\n * bindings can be found.\n *\n * - bit 0 is used to mark that the previous index has a duplicate for current value.\n * - bit 1 is used to mark that the next index has a duplicate for the current value.\n * - bits 2-16 are used to encode the next/tail of the template.\n * - bits 17-32 are used to encode the previous/head of template.\n *\n * NODE: *duplicate* false implies that it is statically known that this binding will not collide\n * with other bindings and therefore there is no need to check other bindings. For example the\n * bindings in \\`<div [style.color]=\"exp\" [style.width]=\"exp\">\\` will never collide and will have\n * their bits set accordingly. Previous duplicate means that we may need to check previous if the\n * current binding is \\`null\\`. Next duplicate means that we may need to check next bindings if the\n * current binding is not \\`null\\`.\n *\n * NOTE: \\`0\\` has special significance and represents \\`null\\` as in no additional pointer.\n */\ndeclare interface TStylingRange {\n\t__brand__: 'TStylingRange';\n}\n\n/**\n * Store the static values for the styling binding.\n *\n * The \\`TStylingStatic\\` is just \\`KeyValueArray\\` where key \\`\"\"\\` (stored at location 0) contains the\n * \\`TStylingKey\\` (stored at location 1). In other words this wraps the \\`TStylingKey\\` such that the\n * \\`\"\"\\` contains the wrapped value.\n *\n * When instructions are resolving styling they may need to look forward or backwards in the linked\n * list to resolve the value. For this reason we have to make sure that he linked list also contains\n * the static values. However the list only has space for one item per styling instruction. For this\n * reason we store the static values here as part of the \\`TStylingKey\\`. This means that the\n * resolution function when looking for a value needs to first look at the binding value, and than\n * at \\`TStylingKey\\` (if it exists).\n *\n * Imagine we have:\n *\n * \\`\\`\\`\n * <div class=\"TEMPLATE\" my-dir>\n *\n * @Directive({\n *   host: {\n *     class: 'DIR',\n *     '[class.dynamic]': 'exp' // ɵɵclassProp('dynamic', ctx.exp);\n *   }\n * })\n * \\`\\`\\`\n *\n * In the above case the linked list will contain one item:\n *\n * \\`\\`\\`\n *   // assume binding location: 10 for \\`ɵɵclassProp('dynamic', ctx.exp);\\`\n *   tData[10] = <TStylingStatic>[\n *     '': 'dynamic', // This is the wrapped value of \\`TStylingKey\\`\n *     'DIR': true,   // This is the default static value of directive binding.\n *   ];\n *   tData[10 + 1] = 0; // We don't have prev/next.\n *\n *   lView[10] = undefined;     // assume \\`ctx.exp\\` is \\`undefined\\`\n *   lView[10 + 1] = undefined; // Just normalized \\`lView[10]\\`\n * \\`\\`\\`\n *\n * So when the function is resolving styling value, it first needs to look into the linked list\n * (there is none) and than into the static \\`TStylingStatic\\` too see if there is a default value for\n * \\`dynamic\\` (there is not). Therefore it is safe to remove it.\n *\n * If setting \\`true\\` case:\n * \\`\\`\\`\n *   lView[10] = true;     // assume \\`ctx.exp\\` is \\`true\\`\n *   lView[10 + 1] = true; // Just normalized \\`lView[10]\\`\n * \\`\\`\\`\n * So when the function is resolving styling value, it first needs to look into the linked list\n * (there is none) and than into \\`TNode.residualClass\\` (TNode.residualStyle) which contains\n * \\`\\`\\`\n *   tNode.residualClass = [\n *     'TEMPLATE': true,\n *   ];\n * \\`\\`\\`\n *\n * This means that it is safe to add class.\n */\ndeclare interface TStylingStatic extends KeyValueArray<any> {\n}\n\n/** Static data for a text node */\ndeclare interface TTextNode extends TNode {\n\t/** Index in the data[] array */\n\tindex: number;\n\tchild: null;\n\t/**\n\t * Text nodes will have parents unless they are the first node of a component or\n\t * embedded view (which means their parent is in a different view and must be\n\t * retrieved using LView.node).\n\t */\n\tparent: TElementNode | TElementContainerNode | null;\n\ttViews: null;\n\tprojection: null;\n}\n\ndeclare const TVIEW = 1;\n\n/**\n * The static data for an LView (shared between all templates of a\n * given type).\n *\n * Stored on the \\`ComponentDef.tView\\`.\n */\ndeclare interface TView {\n\t/**\n\t * Type of \\`TView\\` (\\`Root\\`|\\`Component\\`|\\`Embedded\\`).\n\t */\n\ttype: TViewType;\n\t/**\n\t * This is a blueprint used to generate LView instances for this TView. Copying this\n\t * blueprint is faster than creating a new LView from scratch.\n\t */\n\tblueprint: LView;\n\t/**\n\t * The template function used to refresh the view of dynamically created views\n\t * and components. Will be null for inline views.\n\t */\n\ttemplate: ComponentTemplate<{}> | null;\n\t/**\n\t * A function containing query-related instructions.\n\t */\n\tviewQuery: ViewQueriesFunction<{}> | null;\n\t/**\n\t * A \\`TNode\\` representing the declaration location of this \\`TView\\` (not part of this TView).\n\t */\n\tdeclTNode: TNode | null;\n\t/** Whether or not this template has been processed in creation mode. */\n\tfirstCreatePass: boolean;\n\t/**\n\t *  Whether or not this template has been processed in update mode (e.g. change detected)\n\t *\n\t * \\`firstUpdatePass\\` is used by styling to set up \\`TData\\` to contain metadata about the styling\n\t * instructions. (Mainly to build up a linked list of styling priority order.)\n\t *\n\t * Typically this function gets cleared after first execution. If exception is thrown then this\n\t * flag can remain turned un until there is first successful (no exception) pass. This means that\n\t * individual styling instructions keep track of if they have already been added to the linked\n\t * list to prevent double adding.\n\t */\n\tfirstUpdatePass: boolean;\n\t/** Static data equivalent of LView.data[]. Contains TNodes, PipeDefInternal or TI18n. */\n\tdata: TData;\n\t/**\n\t * The binding start index is the index at which the data array\n\t * starts to store bindings only. Saving this value ensures that we\n\t * will begin reading bindings at the correct point in the array when\n\t * we are in update mode.\n\t *\n\t * -1 means that it has not been initialized.\n\t */\n\tbindingStartIndex: number;\n\t/**\n\t * The index where the \"expando\" section of \\`LView\\` begins. The expando\n\t * section contains injectors, directive instances, and host binding values.\n\t * Unlike the \"decls\" and \"vars\" sections of \\`LView\\`, the length of this\n\t * section cannot be calculated at compile-time because directives are matched\n\t * at runtime to preserve locality.\n\t *\n\t * We store this start index so we know where to start checking host bindings\n\t * in \\`setHostBindings\\`.\n\t */\n\texpandoStartIndex: number;\n\t/**\n\t * Whether or not there are any static view queries tracked on this view.\n\t *\n\t * We store this so we know whether or not we should do a view query\n\t * refresh after creation mode to collect static query results.\n\t */\n\tstaticViewQueries: boolean;\n\t/**\n\t * Whether or not there are any static content queries tracked on this view.\n\t *\n\t * We store this so we know whether or not we should do a content query\n\t * refresh after creation mode to collect static query results.\n\t */\n\tstaticContentQueries: boolean;\n\t/**\n\t * A reference to the first child node located in the view.\n\t */\n\tfirstChild: TNode | null;\n\t/**\n\t * Stores the OpCodes to be replayed during change-detection to process the \\`HostBindings\\`\n\t *\n\t * See \\`HostBindingOpCodes\\` for encoding details.\n\t */\n\thostBindingOpCodes: HostBindingOpCodes | null;\n\t/**\n\t * Full registry of directives and components that may be found in this view.\n\t *\n\t * It's necessary to keep a copy of the full def list on the TView so it's possible\n\t * to render template functions without a host component.\n\t */\n\tdirectiveRegistry: DirectiveDefList | null;\n\t/**\n\t * Full registry of pipes that may be found in this view.\n\t *\n\t * The property is either an array of \\`PipeDefs\\`s or a function which returns the array of\n\t * \\`PipeDefs\\`s. The function is necessary to be able to support forward declarations.\n\t *\n\t * It's necessary to keep a copy of the full def list on the TView so it's possible\n\t * to render template functions without a host component.\n\t */\n\tpipeRegistry: PipeDefList | null;\n\t/**\n\t * Array of ngOnInit, ngOnChanges and ngDoCheck hooks that should be executed for this view in\n\t * creation mode.\n\t *\n\t * This array has a flat structure and contains TNode indices, directive indices (where an\n\t * instance can be found in \\`LView\\`) and hook functions. TNode index is followed by the directive\n\t * index and a hook function. If there are multiple hooks for a given TNode, the TNode index is\n\t * not repeated and the next lifecycle hook information is stored right after the previous hook\n\t * function. This is done so that at runtime the system can efficiently iterate over all of the\n\t * functions to invoke without having to make any decisions/lookups.\n\t */\n\tpreOrderHooks: HookData | null;\n\t/**\n\t * Array of ngOnChanges and ngDoCheck hooks that should be executed for this view in update mode.\n\t *\n\t * This array has the same structure as the \\`preOrderHooks\\` one.\n\t */\n\tpreOrderCheckHooks: HookData | null;\n\t/**\n\t * Array of ngAfterContentInit and ngAfterContentChecked hooks that should be executed\n\t * for this view in creation mode.\n\t *\n\t * Even indices: Directive index\n\t * Odd indices: Hook function\n\t */\n\tcontentHooks: HookData | null;\n\t/**\n\t * Array of ngAfterContentChecked hooks that should be executed for this view in update\n\t * mode.\n\t *\n\t * Even indices: Directive index\n\t * Odd indices: Hook function\n\t */\n\tcontentCheckHooks: HookData | null;\n\t/**\n\t * Array of ngAfterViewInit and ngAfterViewChecked hooks that should be executed for\n\t * this view in creation mode.\n\t *\n\t * Even indices: Directive index\n\t * Odd indices: Hook function\n\t */\n\tviewHooks: HookData | null;\n\t/**\n\t * Array of ngAfterViewChecked hooks that should be executed for this view in\n\t * update mode.\n\t *\n\t * Even indices: Directive index\n\t * Odd indices: Hook function\n\t */\n\tviewCheckHooks: HookData | null;\n\t/**\n\t * Array of ngOnDestroy hooks that should be executed when this view is destroyed.\n\t *\n\t * Even indices: Directive index\n\t * Odd indices: Hook function\n\t */\n\tdestroyHooks: DestroyHookData | null;\n\t/**\n\t * When a view is destroyed, listeners need to be released and outputs need to be\n\t * unsubscribed. This cleanup array stores both listener data (in chunks of 4)\n\t * and output data (in chunks of 2) for a particular view. Combining the arrays\n\t * saves on memory (70 bytes per array) and on a few bytes of code size (for two\n\t * separate for loops).\n\t *\n\t * If it's a native DOM listener or output subscription being stored:\n\t * 1st index is: event name  \\`name = tView.cleanup[i+0]\\`\n\t * 2nd index is: index of native element or a function that retrieves global target (window,\n\t *               document or body) reference based on the native element:\n\t *    \\`typeof idxOrTargetGetter === 'function'\\`: global target getter function\n\t *    \\`typeof idxOrTargetGetter === 'number'\\`: index of native element\n\t *\n\t * 3rd index is: index of listener function \\`listener = lView[CLEANUP][tView.cleanup[i+2]]\\`\n\t * 4th index is: \\`useCaptureOrIndx = tView.cleanup[i+3]\\`\n\t *    \\`typeof useCaptureOrIndx == 'boolean' : useCapture boolean\n\t *    \\`typeof useCaptureOrIndx == 'number':\n\t *         \\`useCaptureOrIndx >= 0\\` \\`removeListener = LView[CLEANUP][useCaptureOrIndx]\\`\n\t *         \\`useCaptureOrIndx <  0\\` \\`subscription = LView[CLEANUP][-useCaptureOrIndx]\\`\n\t *\n\t * If it's an output subscription or query list destroy hook:\n\t * 1st index is: output unsubscribe function / query list destroy function\n\t * 2nd index is: index of function context in LView.cleanupInstances[]\n\t *               \\`tView.cleanup[i+0].call(lView[CLEANUP][tView.cleanup[i+1]])\\`\n\t */\n\tcleanup: any[] | null;\n\t/**\n\t * A list of element indices for child components that will need to be\n\t * refreshed when the current view has finished its check. These indices have\n\t * already been adjusted for the HEADER_OFFSET.\n\t *\n\t */\n\tcomponents: number[] | null;\n\t/**\n\t * A collection of queries tracked in a given view.\n\t */\n\tqueries: TQueries | null;\n\t/**\n\t * An array of indices pointing to directives with content queries alongside with the\n\t * corresponding query index. Each entry in this array is a tuple of:\n\t * - index of the first content query index declared by a given directive;\n\t * - index of a directive.\n\t *\n\t * We are storing those indexes so we can refresh content queries as part of a view refresh\n\t * process.\n\t */\n\tcontentQueries: number[] | null;\n\t/**\n\t * Set of schemas that declare elements to be allowed inside the view.\n\t */\n\tschemas: SchemaMetadata[] | null;\n\t/**\n\t * Array of constants for the view. Includes attribute arrays, local definition arrays etc.\n\t * Used for directive matching, attribute bindings, local definitions and more.\n\t */\n\tconsts: TConstants | null;\n\t/**\n\t * Indicates that there was an error before we managed to complete the first create pass of the\n\t * view. This means that the view is likely corrupted and we should try to recover it.\n\t */\n\tincompleteFirstPass: boolean;\n}\n\n/**\n * Explicitly marks \\`TView\\` as a specific type in \\`ngDevMode\\`\n *\n * It is useful to know conceptually what time of \\`TView\\` we are dealing with when\n * debugging an application (even if the runtime does not need it.) For this reason\n * we store this information in the \\`ngDevMode\\` \\`TView\\` and than use it for\n * better debugging experience.\n */\ndeclare const enum TViewType {\n\t/**\n\t * Root \\`TView\\` is the used to bootstrap components into. It is used in conjunction with\n\t * \\`LView\\` which takes an existing DOM node not owned by Angular and wraps it in \\`TView\\`/\\`LView\\`\n\t * so that other components can be loaded into it.\n\t */\n\tRoot = 0,\n\t/**\n\t * \\`TView\\` associated with a Component. This would be the \\`TView\\` directly associated with the\n\t * component view (as opposed an \\`Embedded\\` \\`TView\\` which would be a child of \\`Component\\` \\`TView\\`)\n\t */\n\tComponent = 1,\n\t/**\n\t * \\`TView\\` associated with a template. Such as \\`*ngIf\\`, \\`<ng-template>\\` etc... A \\`Component\\`\n\t * can have zero or more \\`Embedded\\` \\`TView\\`s.\n\t */\n\tEmbedded = 2\n}\n\n/**\n * Special location which allows easy identification of type. If we have an array which was\n * retrieved from the \\`LView\\` and that array has \\`true\\` at \\`TYPE\\` location, we know it is\n * \\`LContainer\\`.\n */\ndeclare const TYPE = 1;\n\n/**\n * @description\n *\n * Represents a type that a Component or other object is instances of.\n *\n * An example of a \\`Type\\` is \\`MyCustomComponent\\` class, which in JavaScript is represented by\n * the \\`MyCustomComponent\\` constructor function.\n *\n * @publicApi\n */\nexport declare const Type: FunctionConstructor;\n\nexport declare interface Type<T> extends Function {\n\tnew(...args: any[]): T;\n}\n\ndeclare type Type_2 = Function;\n\n/**\n * An interface implemented by all Angular type decorators, which allows them to be used as\n * decorators as well as Angular syntax.\n *\n * \\`\\`\\`\n * @ng.Component({...})\n * class MyClass {...}\n * \\`\\`\\`\n *\n * @publicApi\n */\nexport declare interface TypeDecorator {\n\t/**\n\t * Invoke as decorator.\n\t */\n\t<T extends Type<any>>(type: T): T;\n\t(target: Object, propertyKey?: string | symbol, parameterIndex?: number): void;\n}\n\ndeclare type TypeOrFactory<T> = T | (() => T);\n\n/**\n * Configures the \\`Injector\\` to return an instance of \\`Type\\` when \\`Type' is used as the token.\n *\n * Create an instance by invoking the \\`new\\` operator and supplying additional arguments.\n * This form is a short form of \\`TypeProvider\\`;\n *\n * For more details, see the [\"Dependency Injection Guide\"](guide/dependency-injection).\n *\n * @usageNotes\n *\n * {@example core/di/ts/provider_spec.ts region='TypeProvider'}\n *\n * @publicApi\n */\nexport declare interface TypeProvider extends Type<any> {\n}\n\n/**\n * Configures the \\`Injector\\` to return a value for a token.\n * @see [\"Dependency Injection Guide\"](guide/dependency-injection).\n *\n * @usageNotes\n *\n * ### Example\n *\n * {@example core/di/ts/provider_spec.ts region='ValueProvider'}\n *\n * ### Multi-value example\n *\n * {@example core/di/ts/provider_spec.ts region='MultiProviderAspect'}\n *\n * @publicApi\n */\nexport declare interface ValueProvider extends ValueSansProvider {\n\t/**\n\t * An injection token. Typically an instance of \\`Type\\` or \\`InjectionToken\\`, but can be \\`any\\`.\n\t */\n\tprovide: any;\n\t/**\n\t * When true, injector returns an array of instances. This is useful to allow multiple\n\t * providers spread across many files to provide configuration information to a common token.\n\t */\n\tmulti?: boolean;\n}\n\n/**\n * Configures the \\`Injector\\` to return a value for a token.\n * Base for \\`ValueProvider\\` decorator.\n *\n * @publicApi\n */\nexport declare interface ValueSansProvider {\n\t/**\n\t * The value to inject.\n\t */\n\tuseValue: any;\n}\n\n/**\n * @publicApi\n */\nexport declare const VERSION: Version;\n\n\n/**\n * @description Represents the version of Angular\n *\n * @publicApi\n */\nexport declare class Version {\n\tfull: string;\n\treadonly major: string;\n\treadonly minor: string;\n\treadonly patch: string;\n\tconstructor(full: string);\n}\n\ndeclare const VIEW_REFS = 8;\n\n/**\n * Type of the ViewChild metadata.\n *\n * @publicApi\n */\nexport declare type ViewChild = Query;\n\n/**\n * ViewChild decorator and metadata.\n *\n * @Annotation\n * @publicApi\n */\nexport declare const ViewChild: ViewChildDecorator;\n\n/**\n * Type of the ViewChild decorator / constructor function.\n *\n * @see \\`ViewChild\\`.\n * @publicApi\n */\nexport declare interface ViewChildDecorator {\n\t/**\n\t * @description\n\t * Property decorator that configures a view query.\n\t * The change detector looks for the first element or the directive matching the selector\n\t * in the view DOM. If the view DOM changes, and a new child matches the selector,\n\t * the property is updated.\n\t *\n\t * View queries are set before the \\`ngAfterViewInit\\` callback is called.\n\t *\n\t * **Metadata Properties**:\n\t *\n\t * * **selector** - The directive type or the name used for querying.\n\t * * **read** - Used to read a different token from the queried elements.\n\t * * **static** - True to resolve query results before change detection runs,\n\t * false to resolve after change detection. Defaults to false.\n\t *\n\t *\n\t * The following selectors are supported.\n\t *   * Any class with the \\`@Component\\` or \\`@Directive\\` decorator\n\t *   * A template reference variable as a string (e.g. query \\`<my-component #cmp></my-component>\\`\n\t * with \\`@ViewChild('cmp')\\`)\n\t *   * Any provider defined in the child component tree of the current component (e.g.\n\t * \\`@ViewChild(SomeService) someService: SomeService\\`)\n\t *   * Any provider defined through a string token (e.g. \\`@ViewChild('someToken') someTokenVal:\n\t * any\\`)\n\t *   * A \\`TemplateRef\\` (e.g. query \\`<ng-template></ng-template>\\` with \\`@ViewChild(TemplateRef)\n\t * template;\\`)\n\t *\n\t * The following values are supported by \\`read\\`:\n\t *   * Any class with the \\`@Component\\` or \\`@Directive\\` decorator\n\t *   * Any provider defined on the injector of the component that is matched by the \\`selector\\` of\n\t * this query\n\t *   * Any provider defined through a string token (e.g. \\`{provide: 'token', useValue: 'val'}\\`)\n\t *   * \\`TemplateRef\\`, \\`ElementRef\\`, and \\`ViewContainerRef\\`\n\t *\n\t * @usageNotes\n\t *\n\t * {@example core/di/ts/viewChild/view_child_example.ts region='Component'}\n\t *\n\t * ### Example 2\n\t *\n\t * {@example core/di/ts/viewChild/view_child_howto.ts region='HowTo'}\n\t *\n\t * @Annotation\n\t */\n\t(selector: ProviderToken<unknown> | Function | string, opts?: {\n\t\tread?: any;\n\t\tstatic?: boolean;\n\t}): any;\n\tnew(selector: ProviderToken<unknown> | Function | string, opts?: {\n\t\tread?: any;\n\t\tstatic?: boolean;\n\t}): ViewChild;\n}\n\n/**\n * Type of the ViewChildren metadata.\n *\n * @publicApi\n */\nexport declare type ViewChildren = Query;\n\n/**\n * ViewChildren decorator and metadata.\n *\n * @Annotation\n * @publicApi\n */\nexport declare const ViewChildren: ViewChildrenDecorator;\n\n/**\n * Type of the ViewChildren decorator / constructor function.\n *\n * @see \\`ViewChildren\\`.\n *\n * @publicApi\n */\nexport declare interface ViewChildrenDecorator {\n\t/**\n\t * @description\n\t * Property decorator that configures a view query.\n\t *\n\t * Use to get the \\`QueryList\\` of elements or directives from the view DOM.\n\t * Any time a child element is added, removed, or moved, the query list will be updated,\n\t * and the changes observable of the query list will emit a new value.\n\t *\n\t * View queries are set before the \\`ngAfterViewInit\\` callback is called.\n\t *\n\t * **Metadata Properties**:\n\t *\n\t * * **selector** - The directive type or the name used for querying.\n\t * * **read** - Used to read a different token from the queried elements.\n\t * * **emitDistinctChangesOnly** - The \\` QueryList#changes\\` observable will emit new values only\n\t *   if the QueryList result has changed. When \\`false\\` the \\`changes\\` observable might emit even\n\t *   if the QueryList has not changed.\n\t *   ** Note: *** This config option is **deprecated**, it will be permanently set to \\`true\\` and\n\t * removed in future versions of Angular.\n\t *\n\t * The following selectors are supported.\n\t *   * Any class with the \\`@Component\\` or \\`@Directive\\` decorator\n\t *   * A template reference variable as a string (e.g. query \\`<my-component #cmp></my-component>\\`\n\t * with \\`@ViewChildren('cmp')\\`)\n\t *   * Any provider defined in the child component tree of the current component (e.g.\n\t * \\`@ViewChildren(SomeService) someService!: SomeService\\`)\n\t *   * Any provider defined through a string token (e.g. \\`@ViewChildren('someToken')\n\t * someTokenVal!: any\\`)\n\t *   * A \\`TemplateRef\\` (e.g. query \\`<ng-template></ng-template>\\` with \\`@ViewChildren(TemplateRef)\n\t * template;\\`)\n\t *\n\t * In addition, multiple string selectors can be separated with a comma (e.g.\n\t * \\`@ViewChildren('cmp1,cmp2')\\`)\n\t *\n\t * The following values are supported by \\`read\\`:\n\t *   * Any class with the \\`@Component\\` or \\`@Directive\\` decorator\n\t *   * Any provider defined on the injector of the component that is matched by the \\`selector\\` of\n\t * this query\n\t *   * Any provider defined through a string token (e.g. \\`{provide: 'token', useValue: 'val'}\\`)\n\t *   * \\`TemplateRef\\`, \\`ElementRef\\`, and \\`ViewContainerRef\\`\n\t *\n\t * @usageNotes\n\t *\n\t * {@example core/di/ts/viewChildren/view_children_howto.ts region='HowTo'}\n\t *\n\t * ### Another example\n\t *\n\t * {@example core/di/ts/viewChildren/view_children_example.ts region='Component'}\n\t *\n\t * @Annotation\n\t */\n\t(selector: ProviderToken<unknown> | Function | string, opts?: {\n\t\tread?: any;\n\t\temitDistinctChangesOnly?: boolean;\n\t}): any;\n\tnew(selector: ProviderToken<unknown> | Function | string, opts?: {\n\t\tread?: any;\n\t\temitDistinctChangesOnly?: boolean;\n\t}): ViewChildren;\n}\n\n/**\n * Represents a container where one or more views can be attached to a component.\n *\n * Can contain *host views* (created by instantiating a\n * component with the \\`createComponent()\\` method), and *embedded views*\n * (created by instantiating a \\`TemplateRef\\` with the \\`createEmbeddedView()\\` method).\n *\n * A view container instance can contain other view containers,\n * creating a [view hierarchy](guide/glossary#view-tree).\n *\n * @see \\`ComponentRef\\`\n * @see \\`EmbeddedViewRef\\`\n *\n * @publicApi\n */\nexport declare abstract class ViewContainerRef {\n\t/**\n\t * Anchor element that specifies the location of this container in the containing view.\n\t * Each view container can have only one anchor element, and each anchor element\n\t * can have only a single view container.\n\t *\n\t * Root elements of views attached to this container become siblings of the anchor element in\n\t * the rendered view.\n\t *\n\t * Access the \\`ViewContainerRef\\` of an element by placing a \\`Directive\\` injected\n\t * with \\`ViewContainerRef\\` on the element, or use a \\`ViewChild\\` query.\n\t *\n\t * <!-- TODO: rename to anchorElement -->\n\t */\n\tabstract get element(): ElementRef;\n\t/**\n\t * The [dependency injector](guide/glossary#injector) for this view container.\n\t */\n\tabstract get injector(): Injector;\n\t/** @deprecated No replacement */\n\tabstract get parentInjector(): Injector;\n\t/**\n\t * Destroys all views in this container.\n\t */\n\tabstract clear(): void;\n\t/**\n\t * Retrieves a view from this container.\n\t * @param index The 0-based index of the view to retrieve.\n\t * @returns The \\`ViewRef\\` instance, or null if the index is out of range.\n\t */\n\tabstract get(index: number): ViewRef | null;\n\t/**\n\t * Reports how many views are currently attached to this container.\n\t * @returns The number of views.\n\t */\n\tabstract get length(): number;\n\t/**\n\t * Instantiates an embedded view and inserts it\n\t * into this container.\n\t * @param templateRef The HTML template that defines the view.\n\t * @param context The data-binding context of the embedded view, as declared\n\t * in the \\`<ng-template>\\` usage.\n\t * @param options Extra configuration for the created view. Includes:\n\t *  * index: The 0-based index at which to insert the new view into this container.\n\t *           If not specified, appends the new view as the last entry.\n\t *  * injector: Injector to be used within the embedded view.\n\t *\n\t * @returns The \\`ViewRef\\` instance for the newly created view.\n\t */\n\tabstract createEmbeddedView<C>(templateRef: TemplateRef<C>, context?: C, options?: {\n\t\tindex?: number;\n\t\tinjector?: Injector;\n\t}): EmbeddedViewRef<C>;\n\t/**\n\t * Instantiates an embedded view and inserts it\n\t * into this container.\n\t * @param templateRef The HTML template that defines the view.\n\t * @param context The data-binding context of the embedded view, as declared\n\t * in the \\`<ng-template>\\` usage.\n\t * @param index The 0-based index at which to insert the new view into this container.\n\t * If not specified, appends the new view as the last entry.\n\t *\n\t * @returns The \\`ViewRef\\` instance for the newly created view.\n\t */\n\tabstract createEmbeddedView<C>(templateRef: TemplateRef<C>, context?: C, index?: number): EmbeddedViewRef<C>;\n\t/**\n\t * Instantiates a single component and inserts its host view into this container.\n\t *\n\t * @param componentType Component Type to use.\n\t * @param options An object that contains extra parameters:\n\t *  * index: the index at which to insert the new component's host view into this container.\n\t *           If not specified, appends the new view as the last entry.\n\t *  * injector: the injector to use as the parent for the new component.\n\t *  * ngModuleRef: an NgModuleRef of the component's NgModule, you should almost always provide\n\t *                 this to ensure that all expected providers are available for the component\n\t *                 instantiation.\n\t *  * environmentInjector: an EnvironmentInjector which will provide the component's environment.\n\t *                 you should almost always provide this to ensure that all expected providers\n\t *                 are available for the component instantiation. This option is intended to\n\t *                 replace the \\`ngModuleRef\\` parameter.\n\t *  * projectableNodes: list of DOM nodes that should be projected through\n\t *                      [\\`<ng-content>\\`](api/core/ng-content) of the new component instance.\n\t *\n\t * @returns The new \\`ComponentRef\\` which contains the component instance and the host view.\n\t */\n\tabstract createComponent<C>(componentType: Type<C>, options?: {\n\t\tindex?: number;\n\t\tinjector?: Injector;\n\t\tngModuleRef?: NgModuleRef<unknown>;\n\t\tenvironmentInjector?: EnvironmentInjector | NgModuleRef<unknown>;\n\t\tprojectableNodes?: Node[][];\n\t}): ComponentRef<C>;\n\t/**\n\t * Instantiates a single component and inserts its host view into this container.\n\t *\n\t * @param componentFactory Component factory to use.\n\t * @param index The index at which to insert the new component's host view into this container.\n\t * If not specified, appends the new view as the last entry.\n\t * @param injector The injector to use as the parent for the new component.\n\t * @param projectableNodes List of DOM nodes that should be projected through\n\t *     [\\`<ng-content>\\`](api/core/ng-content) of the new component instance.\n\t * @param ngModuleRef An instance of the NgModuleRef that represent an NgModule.\n\t * This information is used to retrieve corresponding NgModule injector.\n\t *\n\t * @returns The new \\`ComponentRef\\` which contains the component instance and the host view.\n\t *\n\t * @deprecated Angular no longer requires component factories to dynamically create components.\n\t *     Use different signature of the \\`createComponent\\` method, which allows passing\n\t *     Component class directly.\n\t */\n\tabstract createComponent<C>(componentFactory: ComponentFactory<C>, index?: number, injector?: Injector, projectableNodes?: any[][], environmentInjector?: EnvironmentInjector | NgModuleRef<any>): ComponentRef<C>;\n\t/**\n\t * Inserts a view into this container.\n\t * @param viewRef The view to insert.\n\t * @param index The 0-based index at which to insert the view.\n\t * If not specified, appends the new view as the last entry.\n\t * @returns The inserted \\`ViewRef\\` instance.\n\t *\n\t */\n\tabstract insert(viewRef: ViewRef, index?: number): ViewRef;\n\t/**\n\t * Moves a view to a new location in this container.\n\t * @param viewRef The view to move.\n\t * @param index The 0-based index of the new location.\n\t * @returns The moved \\`ViewRef\\` instance.\n\t */\n\tabstract move(viewRef: ViewRef, currentIndex: number): ViewRef;\n\t/**\n\t * Returns the index of a view within the current container.\n\t * @param viewRef The view to query.\n\t * @returns The 0-based index of the view's position in this container,\n\t * or \\`-1\\` if this container doesn't contain the view.\n\t */\n\tabstract indexOf(viewRef: ViewRef): number;\n\t/**\n\t * Destroys a view attached to this container\n\t * @param index The 0-based index of the view to destroy.\n\t * If not specified, the last view in the container is removed.\n\t */\n\tabstract remove(index?: number): void;\n\t/**\n\t * Detaches a view from this container without destroying it.\n\t * Use along with \\`insert()\\` to move a view within the current container.\n\t * @param index The 0-based index of the view to detach.\n\t * If not specified, the last view in the container is detached.\n\t */\n\tabstract detach(index?: number): ViewRef | null;\n}\n\n\n/**\n * Defines the CSS styles encapsulation policies for the {@link Component} decorator's\n * \\`encapsulation\\` option.\n *\n * See {@link Component#encapsulation encapsulation}.\n *\n * @usageNotes\n * ### Example\n *\n * {@example core/ts/metadata/encapsulation.ts region='longform'}\n *\n * @publicApi\n */\nexport declare enum ViewEncapsulation {\n\t/**\n\t * Emulates a native Shadow DOM encapsulation behavior by adding a specific attribute to the\n\t * component's host element and applying the same attribute to all the CSS selectors provided\n\t * via {@link Component#styles styles} or {@link Component#styleUrls styleUrls}.\n\t *\n\t * This is the default option.\n\t */\n\tEmulated = 0,\n\t/**\n\t * Doesn't provide any sort of CSS style encapsulation, meaning that all the styles provided\n\t * via {@link Component#styles styles} or {@link Component#styleUrls styleUrls} are applicable\n\t * to any HTML element of the application regardless of their host Component.\n\t */\n\tNone = 2,\n\t/**\n\t * Uses the browser's native Shadow DOM API to encapsulate CSS styles, meaning that it creates\n\t * a ShadowRoot for the component's host element which is then used to encapsulate\n\t * all the Component's styling.\n\t */\n\tShadowDom = 3\n}\n\ndeclare enum ViewEncapsulation_2 {\n\tEmulated = 0,\n\tNone = 2,\n\tShadowDom = 3\n}\n\ndeclare interface viewEngine_ChangeDetectorRef_interface extends ChangeDetectorRef {\n}\n\n/**\n * Definition of what a view queries function should look like.\n */\ndeclare type ViewQueriesFunction<T> = <U extends T>(rf: ɵRenderFlags, ctx: U) => void;\n\n/**\n * Represents an Angular [view](guide/glossary#view \"Definition\").\n *\n * @see {@link ChangeDetectorRef#usage-notes Change detection usage}\n *\n * @publicApi\n */\nexport declare abstract class ViewRef extends ChangeDetectorRef {\n\t/**\n\t * Destroys this view and all of the data structures associated with it.\n\t */\n\tabstract destroy(): void;\n\t/**\n\t * Reports whether this view has been destroyed.\n\t * @returns True after the \\`destroy()\\` method has been called, false otherwise.\n\t */\n\tabstract get destroyed(): boolean;\n\t/**\n\t * A lifecycle hook that provides additional developer-defined cleanup\n\t * functionality for views.\n\t * @param callback A handler function that cleans up developer-defined data\n\t * associated with a view. Called when the \\`destroy()\\` method is invoked.\n\t */\n\tabstract onDestroy(callback: Function): any /** TODO #9100 */;\n}\n\n/**\n * Interface for tracking root \\`ViewRef\\`s in \\`ApplicationRef\\`.\n *\n * NOTE: Importing \\`ApplicationRef\\` here directly creates circular dependency, which is why we have\n * a subset of the \\`ApplicationRef\\` interface \\`ViewRefTracker\\` here.\n */\ndeclare interface ViewRefTracker {\n\tdetachView(viewRef: ViewRef): void;\n}\n\n/**\n * Sanitizes the given unsafe, untrusted HTML fragment, and returns HTML text that is safe to add to\n * the DOM in a browser environment.\n */\nexport declare function ɵ_sanitizeHtml(defaultDoc: any, unsafeHtmlInput: string): TrustedHTML | string;\n\n\nexport declare function ɵ_sanitizeUrl(url: string): string;\n\n/**\n * Internal token to indicate whether having multiple bootstrapped platform should be allowed (only\n * one bootstrapped platform is allowed by default). This token helps to support SSR scenarios.\n */\nexport declare const ɵALLOW_MULTIPLE_PLATFORMS: InjectionToken<boolean>;\n\nexport declare function ɵallowSanitizationBypassAndThrow(value: any, type: ɵBypassType.Html): value is ɵSafeHtml;\n\nexport declare function ɵallowSanitizationBypassAndThrow(value: any, type: ɵBypassType.ResourceUrl): value is ɵSafeResourceUrl;\n\nexport declare function ɵallowSanitizationBypassAndThrow(value: any, type: ɵBypassType.Script): value is ɵSafeScript;\n\nexport declare function ɵallowSanitizationBypassAndThrow(value: any, type: ɵBypassType.Style): value is ɵSafeStyle;\n\nexport declare function ɵallowSanitizationBypassAndThrow(value: any, type: ɵBypassType.Url): value is ɵSafeUrl;\n\nexport declare function ɵallowSanitizationBypassAndThrow(value: any, type: ɵBypassType): boolean;\n\n/**\n * Providers that generate a random \\`APP_ID_TOKEN\\`.\n * @publicApi\n */\nexport declare const ɵAPP_ID_RANDOM_PROVIDER: {\n\tprovide: InjectionToken<string>;\n\tuseFactory: typeof _appIdRandomProviderFactory;\n\tdeps: any[];\n};\n\n/**\n * A set of marker values to be used in the attributes arrays. These markers indicate that some\n * items are not regular attributes and the processing should be adapted accordingly.\n */\nexport declare const enum ɵAttributeMarker {\n\t/**\n\t * An implicit marker which indicates that the value in the array are of \\`attributeKey\\`,\n\t * \\`attributeValue\\` format.\n\t *\n\t * NOTE: This is implicit as it is the type when no marker is present in array. We indicate that\n\t * it should not be present at runtime by the negative number.\n\t */\n\tImplicitAttributes = -1,\n\t/**\n\t * Marker indicates that the following 3 values in the attributes array are:\n\t * namespaceUri, attributeName, attributeValue\n\t * in that order.\n\t */\n\tNamespaceURI = 0,\n\t/**\n\t * Signals class declaration.\n\t *\n\t * Each value following \\`Classes\\` designates a class name to include on the element.\n\t * ## Example:\n\t *\n\t * Given:\n\t * \\`\\`\\`\n\t * <div class=\"foo bar baz\">...<d/vi>\n\t * \\`\\`\\`\n\t *\n\t * the generated code is:\n\t * \\`\\`\\`\n\t * var _c1 = [AttributeMarker.Classes, 'foo', 'bar', 'baz'];\n\t * \\`\\`\\`\n\t */\n\tClasses = 1,\n\t/**\n\t * Signals style declaration.\n\t *\n\t * Each pair of values following \\`Styles\\` designates a style name and value to include on the\n\t * element.\n\t * ## Example:\n\t *\n\t * Given:\n\t * \\`\\`\\`\n\t * <div style=\"width:100px; height:200px; color:red\">...</div>\n\t * \\`\\`\\`\n\t *\n\t * the generated code is:\n\t * \\`\\`\\`\n\t * var _c1 = [AttributeMarker.Styles, 'width', '100px', 'height'. '200px', 'color', 'red'];\n\t * \\`\\`\\`\n\t */\n\tStyles = 2,\n\t/**\n\t * Signals that the following attribute names were extracted from input or output bindings.\n\t *\n\t * For example, given the following HTML:\n\t *\n\t * \\`\\`\\`\n\t * <div moo=\"car\" [foo]=\"exp\" (bar)=\"doSth()\">\n\t * \\`\\`\\`\n\t *\n\t * the generated code is:\n\t *\n\t * \\`\\`\\`\n\t * var _c1 = ['moo', 'car', AttributeMarker.Bindings, 'foo', 'bar'];\n\t * \\`\\`\\`\n\t */\n\tBindings = 3,\n\t/**\n\t * Signals that the following attribute names were hoisted from an inline-template declaration.\n\t *\n\t * For example, given the following HTML:\n\t *\n\t * \\`\\`\\`\n\t * <div *ngFor=\"let value of values; trackBy:trackBy\" dirA [dirB]=\"value\">\n\t * \\`\\`\\`\n\t *\n\t * the generated code for the \\`template()\\` instruction would include:\n\t *\n\t * \\`\\`\\`\n\t * ['dirA', '', AttributeMarker.Bindings, 'dirB', AttributeMarker.Template, 'ngFor', 'ngForOf',\n\t * 'ngForTrackBy', 'let-value']\n\t * \\`\\`\\`\n\t *\n\t * while the generated code for the \\`element()\\` instruction inside the template function would\n\t * include:\n\t *\n\t * \\`\\`\\`\n\t * ['dirA', '', AttributeMarker.Bindings, 'dirB']\n\t * \\`\\`\\`\n\t */\n\tTemplate = 4,\n\t/**\n\t * Signals that the following attribute is \\`ngProjectAs\\` and its value is a parsed\n\t * \\`CssSelector\\`.\n\t *\n\t * For example, given the following HTML:\n\t *\n\t * \\`\\`\\`\n\t * <h1 attr=\"value\" ngProjectAs=\"[title]\">\n\t * \\`\\`\\`\n\t *\n\t * the generated code for the \\`element()\\` instruction would include:\n\t *\n\t * \\`\\`\\`\n\t * ['attr', 'value', AttributeMarker.ProjectAs, ['', 'title', '']]\n\t * \\`\\`\\`\n\t */\n\tProjectAs = 5,\n\t/**\n\t * Signals that the following attribute will be translated by runtime i18n\n\t *\n\t * For example, given the following HTML:\n\t *\n\t * \\`\\`\\`\n\t * <div moo=\"car\" foo=\"value\" i18n-foo [bar]=\"binding\" i18n-bar>\n\t * \\`\\`\\`\n\t *\n\t * the generated code is:\n\t *\n\t * \\`\\`\\`\n\t * var _c1 = ['moo', 'car', AttributeMarker.I18n, 'foo', 'bar'];\n\t */\n\tI18n = 6\n}\n\n/**\n * Mark \\`html\\` string as trusted.\n *\n * This function wraps the trusted string in \\`String\\` and brands it in a way which makes it\n * recognizable to {@link htmlSanitizer} to be trusted implicitly.\n *\n * @param trustedHtml \\`html\\` string which needs to be implicitly trusted.\n * @returns a \\`html\\` which has been branded to be implicitly trusted.\n */\nexport declare function ɵbypassSanitizationTrustHtml(trustedHtml: string): ɵSafeHtml;\n\n/**\n * Mark \\`url\\` string as trusted.\n *\n * This function wraps the trusted string in \\`String\\` and brands it in a way which makes it\n * recognizable to {@link resourceUrlSanitizer} to be trusted implicitly.\n *\n * @param trustedResourceUrl \\`url\\` string which needs to be implicitly trusted.\n * @returns a \\`url\\` which has been branded to be implicitly trusted.\n */\nexport declare function ɵbypassSanitizationTrustResourceUrl(trustedResourceUrl: string): ɵSafeResourceUrl;\n\n/**\n * Mark \\`script\\` string as trusted.\n *\n * This function wraps the trusted string in \\`String\\` and brands it in a way which makes it\n * recognizable to {@link scriptSanitizer} to be trusted implicitly.\n *\n * @param trustedScript \\`script\\` string which needs to be implicitly trusted.\n * @returns a \\`script\\` which has been branded to be implicitly trusted.\n */\nexport declare function ɵbypassSanitizationTrustScript(trustedScript: string): ɵSafeScript;\n\n/**\n * Mark \\`style\\` string as trusted.\n *\n * This function wraps the trusted string in \\`String\\` and brands it in a way which makes it\n * recognizable to {@link styleSanitizer} to be trusted implicitly.\n *\n * @param trustedStyle \\`style\\` string which needs to be implicitly trusted.\n * @returns a \\`style\\` hich has been branded to be implicitly trusted.\n */\nexport declare function ɵbypassSanitizationTrustStyle(trustedStyle: string): ɵSafeStyle;\n\n/**\n * Mark \\`url\\` string as trusted.\n *\n * This function wraps the trusted string in \\`String\\` and brands it in a way which makes it\n * recognizable to {@link urlSanitizer} to be trusted implicitly.\n *\n * @param trustedUrl \\`url\\` string which needs to be implicitly trusted.\n * @returns a \\`url\\`  which has been branded to be implicitly trusted.\n */\nexport declare function ɵbypassSanitizationTrustUrl(trustedUrl: string): ɵSafeUrl;\n\n\nexport declare const enum ɵBypassType {\n\tUrl = \"URL\",\n\tHtml = \"HTML\",\n\tResourceUrl = \"ResourceURL\",\n\tScript = \"Script\",\n\tStyle = \"Style\"\n}\n\n/**\n * Defines the possible states of the default change detector.\n * @see \\`ChangeDetectorRef\\`\n */\nexport declare enum ɵChangeDetectorStatus {\n\t/**\n\t * A state in which, after calling \\`detectChanges()\\`, the change detector\n\t * state becomes \\`Checked\\`, and must be explicitly invoked or reactivated.\n\t */\n\tCheckOnce = 0,\n\t/**\n\t * A state in which change detection is skipped until the change detector mode\n\t * becomes \\`CheckOnce\\`.\n\t */\n\tChecked = 1,\n\t/**\n\t * A state in which change detection continues automatically until explicitly\n\t * deactivated.\n\t */\n\tCheckAlways = 2,\n\t/**\n\t * A state in which a change detector sub tree is not a part of the main tree and\n\t * should be skipped.\n\t */\n\tDetached = 3,\n\t/**\n\t * Indicates that the change detector encountered an error checking a binding\n\t * or calling a directive lifecycle method and is now in an inconsistent state. Change\n\t * detectors in this state do not detect changes.\n\t */\n\tErrored = 4,\n\t/**\n\t * Indicates that the change detector has been destroyed.\n\t */\n\tDestroyed = 5\n}\n\nexport declare function ɵclearResolutionOfComponentResourcesQueue(): Map<Type<any>, Component>;\n\n\n/** Coerces a value (typically a string) to a boolean. */\nexport declare function ɵcoerceToBoolean(value: unknown): boolean;\n\n/**\n * Compile an Angular component according to its decorator metadata, and patch the resulting\n * component def (ɵcmp) onto the component type.\n *\n * Compilation may be asynchronous (due to the need to resolve URLs for the component template or\n * other resources, for example). In the event that compilation is not immediate, \\`compileComponent\\`\n * will enqueue resource resolution into a global queue and will fail to return the \\`ɵcmp\\`\n * until the global queue has been resolved with a call to \\`resolveComponentResources\\`.\n */\nexport declare function ɵcompileComponent(type: Type<any>, metadata: Component): void;\n\n/**\n * Compile an Angular directive according to its decorator metadata, and patch the resulting\n * directive def onto the component type.\n *\n * In the event that compilation is not immediate, \\`compileDirective\\` will return a \\`Promise\\` which\n * will resolve when compilation completes and the directive becomes usable.\n */\nexport declare function ɵcompileDirective(type: Type<any>, directive: Directive | null): void;\n\n/**\n * Compiles a module in JIT mode.\n *\n * This function automatically gets called when a class has a \\`@NgModule\\` decorator.\n */\nexport declare function ɵcompileNgModule(moduleType: Type<any>, ngModule?: NgModule): void;\n\n/**\n * Compiles and adds the \\`ɵmod\\`, \\`ɵfac\\` and \\`ɵinj\\` properties to the module class.\n *\n * It's possible to compile a module via this API which will allow duplicate declarations in its\n * root.\n */\nexport declare function ɵcompileNgModuleDefs(moduleType: ɵNgModuleType, ngModule: NgModule, allowDuplicateDeclarationsInRoot?: boolean): void;\n\nexport declare function ɵcompileNgModuleFactory<M>(injector: Injector, options: CompilerOptions, moduleType: Type<M>): Promise<NgModuleFactory<M>>;\n\nexport declare function ɵcompilePipe(type: Type<any>, meta: Pipe): void;\n\n/**\n * Runtime link information for Components.\n *\n * This is an internal data structure used by the render to link\n * components into templates.\n *\n * NOTE: Always use \\`defineComponent\\` function to create this object,\n * never create the object directly since the shape of this object\n * can change between versions.\n *\n * See: {@link defineComponent}\n */\nexport declare interface ɵComponentDef<T> extends ɵDirectiveDef<T> {\n\t/**\n\t * Unique ID for the component. Used in view encapsulation and\n\t * to keep track of the injector in standalone components.\n\t */\n\treadonly id: string;\n\t/**\n\t * The View template of the component.\n\t */\n\treadonly template: ComponentTemplate<T>;\n\t/** Constants associated with the component's view. */\n\treadonly consts: TConstantsOrFactory | null;\n\t/**\n\t * An array of \\`ngContent[selector]\\` values that were found in the template.\n\t */\n\treadonly ngContentSelectors?: string[];\n\t/**\n\t * A set of styles that the component needs to be present for component to render correctly.\n\t */\n\treadonly styles: string[];\n\t/**\n\t * The number of nodes, local refs, and pipes in this component template.\n\t *\n\t * Used to calculate the length of the component's LView array, so we\n\t * can pre-fill the array and set the binding start index.\n\t */\n\treadonly decls: number;\n\t/**\n\t * The number of bindings in this component template (including pure fn bindings).\n\t *\n\t * Used to calculate the length of the component's LView array, so we\n\t * can pre-fill the array and set the host binding start index.\n\t */\n\treadonly vars: number;\n\t/**\n\t * Query-related instructions for a component.\n\t */\n\tviewQuery: ViewQueriesFunction<T> | null;\n\t/**\n\t * The view encapsulation type, which determines how styles are applied to\n\t * DOM elements. One of\n\t * - \\`Emulated\\` (default): Emulate native scoping of styles.\n\t * - \\`Native\\`: Use the native encapsulation mechanism of the renderer.\n\t * - \\`ShadowDom\\`: Use modern [ShadowDOM](https://w3c.github.io/webcomponents/spec/shadow/) and\n\t *   create a ShadowRoot for component's host element.\n\t * - \\`None\\`: Do not provide any template or style encapsulation.\n\t */\n\treadonly encapsulation: ViewEncapsulation;\n\t/**\n\t * Defines arbitrary developer-defined data to be stored on a renderer instance.\n\t * This is useful for renderers that delegate to other renderers.\n\t */\n\treadonly data: {\n\t\t[kind: string]: any;\n\t};\n\t/** Whether or not this component's ChangeDetectionStrategy is OnPush */\n\treadonly onPush: boolean;\n\t/**\n\t * Registry of directives and components that may be found in this view.\n\t *\n\t * The property is either an array of \\`DirectiveDef\\`s or a function which returns the array of\n\t * \\`DirectiveDef\\`s. The function is necessary to be able to support forward declarations.\n\t */\n\tdirectiveDefs: DirectiveDefListOrFactory | null;\n\t/**\n\t * Registry of pipes that may be found in this view.\n\t *\n\t * The property is either an array of \\`PipeDefs\\`s or a function which returns the array of\n\t * \\`PipeDefs\\`s. The function is necessary to be able to support forward declarations.\n\t */\n\tpipeDefs: PipeDefListOrFactory | null;\n\t/**\n\t * Unfiltered list of all dependencies of a component, or \\`null\\` if none.\n\t */\n\tdependencies: TypeOrFactory<DependencyTypeList> | null;\n\t/**\n\t * The set of schemas that declare elements to be allowed in the component's template.\n\t */\n\tschemas: SchemaMetadata[] | null;\n\t/**\n\t * Ivy runtime uses this place to store the computed tView for the component. This gets filled on\n\t * the first run of component.\n\t */\n\ttView: TView | null;\n\t/**\n\t * A function added by the {@link ɵɵStandaloneFeature} and used by the framework to create\n\t * standalone injectors.\n\t */\n\tgetStandaloneInjector: ((parentInjector: EnvironmentInjector) => EnvironmentInjector | null) | null;\n\t/**\n\t * Used to store the result of \\`noSideEffects\\` function so that it is not removed by closure\n\t * compiler. The property should never be read.\n\t */\n\treadonly _?: unknown;\n}\n\n/**\n * A subclass of \\`Type\\` which has a static \\`ɵcmp\\`:\\`ComponentDef\\` field making it\n * consumable for rendering.\n */\nexport declare interface ɵComponentType<T> extends Type<T> {\n\tɵcmp: unknown;\n}\n\nexport declare class ɵConsole {\n\tlog(message: string): void;\n\twarn(message: string): void;\n\tstatic ɵfac: i0.ɵɵFactoryDeclaration<ɵConsole, never>;\n\tstatic ɵprov: i0.ɵɵInjectableDeclaration<ɵConsole>;\n}\n\n/**\n * Create a new \\`Injector\\` which is configured using a \\`defType\\` of \\`InjectorType<any>\\`s.\n *\n * @publicApi\n */\nexport declare function ɵcreateInjector(defType: any, parent?: Injector | null, additionalProviders?: StaticProvider[] | null, name?: string): Injector;\n\n/**\n * A list of CssSelectors.\n *\n * A directive or component can have multiple selectors. This type is used for\n * directive defs so any of the selectors in the list will match that directive.\n *\n * Original: 'form, [ngForm]'\n * Parsed: [['form'], ['', 'ngForm', '']]\n */\nexport declare type ɵCssSelectorList = CssSelector[];\n\n/**\n * Index of each value in currency data (used to describe CURRENCIES_EN in currencies.ts)\n */\nexport declare const enum ɵCurrencyIndex {\n\tSymbol = 0,\n\tSymbolNarrow = 1,\n\tNbOfDigits = 2\n}\n\n/**\n * The locale id that the application is using by default (for translations and ICU expressions).\n */\nexport declare const ɵDEFAULT_LOCALE_ID = \"en-US\";\n\nexport declare const ɵdefaultIterableDiffers: IterableDiffers;\n\nexport declare const ɵdefaultKeyValueDiffers: KeyValueDiffers;\n\n\n/**\n * Synchronously perform change detection on a component (and possibly its sub-components).\n *\n * This function triggers change detection in a synchronous way on a component.\n *\n * @param component The component which the change detection should be performed on.\n */\nexport declare function ɵdetectChanges(component: {}): void;\n\n\nexport declare function ɵdevModeEqual(a: any, b: any): boolean;\n\n/**\n * Runtime link information for Directives.\n *\n * This is an internal data structure used by the render to link\n * directives into templates.\n *\n * NOTE: Always use \\`defineDirective\\` function to create this object,\n * never create the object directly since the shape of this object\n * can change between versions.\n *\n * @param Selector type metadata specifying the selector of the directive or component\n *\n * See: {@link defineDirective}\n */\nexport declare interface ɵDirectiveDef<T> {\n\t/**\n\t * A dictionary mapping the inputs' minified property names to their public API names, which\n\t * are their aliases if any, or their original unminified property names\n\t * (as in \\`@Input('alias') propertyName: any;\\`).\n\t */\n\treadonly inputs: {\n\t\t[P in keyof T]: string;\n\t};\n\t/**\n\t * @deprecated This is only here because \\`NgOnChanges\\` incorrectly uses declared name instead of\n\t * public or minified name.\n\t */\n\treadonly declaredInputs: {\n\t\t[P in keyof T]: string;\n\t};\n\t/**\n\t * A dictionary mapping the outputs' minified property names to their public API names, which\n\t * are their aliases if any, or their original unminified property names\n\t * (as in \\`@Output('alias') propertyName: any;\\`).\n\t */\n\treadonly outputs: {\n\t\t[P in keyof T]: string;\n\t};\n\t/**\n\t * Function to create and refresh content queries associated with a given directive.\n\t */\n\tcontentQueries: ContentQueriesFunction<T> | null;\n\t/**\n\t * Query-related instructions for a directive. Note that while directives don't have a\n\t * view and as such view queries won't necessarily do anything, there might be\n\t * components that extend the directive.\n\t */\n\tviewQuery: ViewQueriesFunction<T> | null;\n\t/**\n\t * Refreshes host bindings on the associated directive.\n\t */\n\treadonly hostBindings: HostBindingsFunction<T> | null;\n\t/**\n\t * The number of bindings in this directive \\`hostBindings\\` (including pure fn bindings).\n\t *\n\t * Used to calculate the length of the component's LView array, so we\n\t * can pre-fill the array and set the host binding start index.\n\t */\n\treadonly hostVars: number;\n\t/**\n\t * Assign static attribute values to a host element.\n\t *\n\t * This property will assign static attribute values as well as class and style\n\t * values to a host element. Since attribute values can consist of different types of values, the\n\t * \\`hostAttrs\\` array must include the values in the following format:\n\t *\n\t * attrs = [\n\t *   // static attributes (like \\`title\\`, \\`name\\`, \\`id\\`...)\n\t *   attr1, value1, attr2, value,\n\t *\n\t *   // a single namespace value (like \\`x:id\\`)\n\t *   NAMESPACE_MARKER, namespaceUri1, name1, value1,\n\t *\n\t *   // another single namespace value (like \\`x:name\\`)\n\t *   NAMESPACE_MARKER, namespaceUri2, name2, value2,\n\t *\n\t *   // a series of CSS classes that will be applied to the element (no spaces)\n\t *   CLASSES_MARKER, class1, class2, class3,\n\t *\n\t *   // a series of CSS styles (property + value) that will be applied to the element\n\t *   STYLES_MARKER, prop1, value1, prop2, value2\n\t * ]\n\t *\n\t * All non-class and non-style attributes must be defined at the start of the list\n\t * first before all class and style values are set. When there is a change in value\n\t * type (like when classes and styles are introduced) a marker must be used to separate\n\t * the entries. The marker values themselves are set via entries found in the\n\t * [AttributeMarker] enum.\n\t */\n\treadonly hostAttrs: TAttributes | null;\n\t/** Token representing the directive. Used by DI. */\n\treadonly type: Type<T>;\n\t/** Function that resolves providers and publishes them into the DI system. */\n\tprovidersResolver: (<U extends T>(def: ɵDirectiveDef<U>, processProvidersFn?: ProcessProvidersFunction) => void) | null;\n\t/** The selectors that will be used to match nodes to this directive. */\n\treadonly selectors: ɵCssSelectorList;\n\t/**\n\t * Name under which the directive is exported (for use with local references in template)\n\t */\n\treadonly exportAs: string[] | null;\n\t/**\n\t * Whether this directive (or component) is standalone.\n\t */\n\treadonly standalone: boolean;\n\t/**\n\t * Factory function used to create a new directive instance. Will be null initially.\n\t * Populated when the factory is first requested by directive instantiation logic.\n\t */\n\treadonly factory: FactoryFn<T> | null;\n\t/**\n\t * The features applied to this directive\n\t */\n\treadonly features: DirectiveDefFeature[] | null;\n\tsetInput: (<U extends T>(this: ɵDirectiveDef<U>, instance: U, value: any, publicName: string, privateName: string) => void) | null;\n}\n\n/**\n * A subclass of \\`Type\\` which has a static \\`ɵdir\\`:\\`DirectiveDef\\` field making it\n * consumable for rendering.\n */\nexport declare interface ɵDirectiveType<T> extends Type<T> {\n\tɵdir: unknown;\n\tɵfac: unknown;\n}\n\n/**\n * Index of each type of locale data from the extra locale data array\n */\nexport declare const enum ɵExtraLocaleDataIndex {\n\tExtraDayPeriodFormats = 0,\n\tExtraDayPeriodStandalone = 1,\n\tExtraDayPeriodsRules = 2\n}\n\n/**\n * Finds the locale data for a given locale.\n *\n * @param locale The locale code.\n * @returns The locale data.\n * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n-overview)\n */\nexport declare function ɵfindLocaleData(locale: string): any;\n\n/**\n * Loops over queued module definitions, if a given module definition has all of its\n * declarations resolved, it dequeues that module definition and sets the scope on\n * its declarations.\n */\nexport declare function ɵflushModuleScopingQueueAsMuchAsPossible(): void;\n\n/**\n * Called to format a runtime error.\n * See additional info on the \\`message\\` argument type in the \\`RuntimeError\\` class description.\n */\nexport declare function ɵformatRuntimeError<T extends number = RuntimeErrorCode>(code: T, message: null | false | string): string;\n\nexport declare function ɵgetDebugNodeR2(_nativeNode: any): DebugNode | null;\n\n/**\n * Retrieves directive instances associated with a given DOM node. Does not include\n * component instances.\n *\n * @usageNotes\n * Given the following DOM structure:\n *\n * \\`\\`\\`html\n * <app-root>\n *   <button my-button></button>\n *   <my-comp></my-comp>\n * </app-root>\n * \\`\\`\\`\n *\n * Calling \\`getDirectives\\` on \\`<button>\\` will return an array with an instance of the \\`MyButton\\`\n * directive that is associated with the DOM node.\n *\n * Calling \\`getDirectives\\` on \\`<my-comp>\\` will return an empty array.\n *\n * @param node DOM node for which to get the directives.\n * @returns Array of directives associated with the node.\n *\n * @publicApi\n * @globalApi ng\n */\nexport declare function ɵgetDirectives(node: Node): {}[];\n\n/**\n * Retrieves the host element of a component or directive instance.\n * The host element is the DOM element that matched the selector of the directive.\n *\n * @param componentOrDirective Component or directive instance for which the host\n *     element should be retrieved.\n * @returns Host element of the target.\n *\n * @publicApi\n * @globalApi ng\n */\nexport declare function ɵgetHostElement(componentOrDirective: {}): Element;\n\n/**\n * Read the injectable def (\\`ɵprov\\`) for \\`type\\` in a way which is immune to accidentally reading\n * inherited value.\n *\n * @param type A type which may have its own (non-inherited) \\`ɵprov\\`.\n */\nexport declare function ɵgetInjectableDef<T>(type: any): ɵɵInjectableDeclaration<T> | null;\n\n/**\n * Returns the matching \\`LContext\\` data for a given DOM node, directive or component instance.\n *\n * This function will examine the provided DOM element, component, or directive instance\\'s\n * monkey-patched property to derive the \\`LContext\\` data. Once called then the monkey-patched\n * value will be that of the newly created \\`LContext\\`.\n *\n * If the monkey-patched value is the \\`LView\\` instance then the context value for that\n * target will be created and the monkey-patch reference will be updated. Therefore when this\n * function is called it may mutate the provided element\\'s, component\\'s or any of the associated\n * directive\\'s monkey-patch values.\n *\n * If the monkey-patch value is not detected then the code will walk up the DOM until an element\n * is found which contains a monkey-patch reference. When that occurs then the provided element\n * will be updated with a new context (which is then returned). If the monkey-patch value is not\n * detected for a component/directive instance then it will throw an error (all components and\n * directives should be automatically monkey-patched by ivy).\n *\n * @param target Component, Directive or DOM Node.\n */\nexport declare function ɵgetLContext(target: any): ɵLContext | null;\n\n/**\n * Retrieves the default currency code for the given locale.\n *\n * The default is defined as the first currency which is still in use.\n *\n * @param locale The code of the locale whose currency code we want.\n * @returns The code of the default currency for the given locale.\n *\n */\nexport declare function ɵgetLocaleCurrencyCode(locale: string): string | null;\n\n/**\n * Retrieves the plural function used by ICU expressions to determine the plural case to use\n * for a given locale.\n * @param locale A locale code for the locale format rules to use.\n * @returns The plural function for the locale.\n * @see \\`NgPlural\\`\n * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n-overview)\n */\nexport declare function ɵgetLocalePluralCase(locale: string): (value: number) => number;\n\nexport declare function ɵgetSanitizationBypassType(value: any): ɵBypassType | null;\n\n/**\n * Gets the current value of the strict mode.\n */\nexport declare function ɵgetUnknownElementStrictMode(): boolean;\n\n/**\n * Gets the current value of the strict mode.\n */\nexport declare function ɵgetUnknownPropertyStrictMode(): boolean;\n\n\nexport declare const ɵglobal: any;\n\n/** Returns a ChangeDetectorRef (a.k.a. a ViewRef) */\nexport declare function ɵinjectChangeDetectorRef(flags: InjectFlags): ChangeDetectorRef;\n\n/**\n * An internal token whose presence in an injector indicates that the injector should treat itself\n * as a root scoped injector when processing requests for unknown tokens which may indicate\n * they are provided in the root scope.\n */\nexport declare const ɵINJECTOR_SCOPE: InjectionToken<InjectorScope | null>;\n\n/**\n * Internal create application API that implements the core application creation logic and optional\n * bootstrap logic.\n *\n * Platforms (such as \\`platform-browser\\`) may require different set of application and platform\n * providers for an application to function correctly. As a result, platforms may use this function\n * internally and supply the necessary providers during the bootstrap, while exposing\n * platform-specific APIs as a part of their public API.\n *\n * @returns A promise that returns an \\`ApplicationRef\\` instance once resolved.\n */\nexport declare function ɵinternalCreateApplication(config: {\n\trootComponent?: Type<unknown>;\n\tappProviders?: Array<Provider | ImportedNgModuleProviders>;\n\tplatformProviders?: Provider[];\n}): Promise<ApplicationRef>;\n\nexport declare function ɵisBoundToModule<C>(cf: ComponentFactory<C>): boolean;\n\n/**\n * Reports whether a given strategy is currently the default for change detection.\n * @param changeDetectionStrategy The strategy to check.\n * @returns True if the given strategy is the current default, false otherwise.\n * @see \\`ChangeDetectorStatus\\`\n * @see \\`ChangeDetectorRef\\`\n */\nexport declare function ɵisDefaultChangeDetectionStrategy(changeDetectionStrategy: ChangeDetectionStrategy): boolean;\n\nexport declare function ɵisInjectable(type: any): boolean;\n\nexport declare function ɵisListLikeIterable(obj: any): boolean;\n\n/**\n * Determine if the argument is an Observable\n *\n * Strictly this tests that the \\`obj\\` is \\`Subscribable\\`, since \\`Observable\\`\n * types need additional methods, such as \\`lift()\\`. But it is adequate for our\n * needs since within the Angular framework code we only ever need to use the\n * \\`subscribe()\\` method, and RxJS has mechanisms to wrap \\`Subscribable\\` objects\n * into \\`Observable\\` as needed.\n */\nexport declare const ɵisObservable: (obj: any | Observable<any>) => obj is Observable<any>;\n\n/**\n * Determine if the argument is shaped like a Promise\n */\nexport declare function ɵisPromise<T = any>(obj: any): obj is Promise<T>;\n\nexport declare function ɵisStandalone<T>(type: Type<T>): boolean;\n\n/**\n * Determine if the argument is a Subscribable\n */\nexport declare function ɵisSubscribable(obj: any | Subscribable<any>): obj is Subscribable<any>;\n\nexport declare const ɵivyEnabled = true;\n\n/**\n * The internal view context which is specific to a given DOM element, directive or\n * component instance. Each value in here (besides the LView and element node details)\n * can be present, null or undefined. If undefined then it implies the value has not been\n * looked up yet, otherwise, if null, then a lookup was executed and nothing was found.\n *\n * Each value will get filled when the respective value is examined within the getContext\n * function. The component, element and each directive instance will share the same instance\n * of the context.\n */\nexport declare class ɵLContext {\n\t/**\n\t * ID of the component's parent view data.\n\t */\n\tprivate lViewId;\n\t/**\n\t * The index instance of the node.\n\t */\n\tnodeIndex: number;\n\t/**\n\t * The instance of the DOM node that is attached to the lNode.\n\t */\n\tnative: RNode;\n\t/**\n\t * The instance of the Component node.\n\t */\n\tcomponent: {} | null | undefined;\n\t/**\n\t * The list of active directives that exist on this element.\n\t */\n\tdirectives: any[] | null | undefined;\n\t/**\n\t * The map of local references (local reference name => element or directive instance) that\n\t * exist on this element.\n\t */\n\tlocalRefs: {\n\t\t[key: string]: any;\n\t} | null | undefined;\n\t/** Component's parent view data. */\n\tget lView(): LView | null;\n\tconstructor(\n\t\t/**\n\t\t * ID of the component's parent view data.\n\t\t */\n\t\tlViewId: number,\n\t\t/**\n\t\t * The index instance of the node.\n\t\t */\n\t\tnodeIndex: number,\n\t\t/**\n\t\t * The instance of the DOM node that is attached to the lNode.\n\t\t */\n\t\tnative: RNode);\n}\n\n/**\n * Used to enable lifecycle hooks on the root component.\n *\n * Include this feature when calling \\`renderComponent\\` if the root component\n * you are rendering has lifecycle hooks defined. Otherwise, the hooks won't\n * be called properly.\n *\n * Example:\n *\n * \\`\\`\\`\n * renderComponent(AppComponent, {hostFeatures: [LifecycleHooksFeature]});\n * \\`\\`\\`\n */\nexport declare function ɵLifecycleHooksFeature(): void;\n\n/**\n * Index of each type of locale data from the locale data array\n */\nexport declare enum ɵLocaleDataIndex {\n\tLocaleId = 0,\n\tDayPeriodsFormat = 1,\n\tDayPeriodsStandalone = 2,\n\tDaysFormat = 3,\n\tDaysStandalone = 4,\n\tMonthsFormat = 5,\n\tMonthsStandalone = 6,\n\tEras = 7,\n\tFirstDayOfWeek = 8,\n\tWeekendRange = 9,\n\tDateFormat = 10,\n\tTimeFormat = 11,\n\tDateTimeFormat = 12,\n\tNumberSymbols = 13,\n\tNumberFormats = 14,\n\tCurrencyCode = 15,\n\tCurrencySymbol = 16,\n\tCurrencyName = 17,\n\tCurrencies = 18,\n\tDirectionality = 19,\n\tPluralCase = 20,\n\tExtraData = 21\n}\n\n/**\n * @suppress {globalThis}\n */\nexport declare function ɵmakeDecorator<T>(name: string, props?: (...args: any[]) => any, parentClass?: any, additionalProcessing?: (type: Type<T>) => void, typeFn?: (type: Type<T>, ...args: any[]) => void): {\n\tnew(...args: any[]): any;\n\t(...args: any[]): any;\n\t(...args: any[]): (cls: any) => any;\n};\n\n\nexport declare const ɵNG_COMP_DEF: string;\n\nexport declare const ɵNG_DIR_DEF: string;\n\n/**\n * If a directive is diPublic, bloomAdd sets a property on the type with this constant as\n * the key and the directive's unique ID as the value. This allows us to map directives to their\n * bloom filter bit for DI.\n */\nexport declare const ɵNG_ELEMENT_ID: string;\n\nexport declare const ɵNG_INJ_DEF: string;\n\nexport declare const ɵNG_MOD_DEF: string;\n\nexport declare const ɵNG_PIPE_DEF: string;\n\nexport declare const ɵNG_PROV_DEF: string;\n\n/**\n * Runtime link information for NgModules.\n *\n * This is the internal data structure used by the runtime to assemble components, directives,\n * pipes, and injectors.\n *\n * NOTE: Always use \\`ɵɵdefineNgModule\\` function to create this object,\n * never create the object directly since the shape of this object\n * can change between versions.\n */\nexport declare interface ɵNgModuleDef<T> {\n\t/** Token representing the module. Used by DI. */\n\ttype: T;\n\t/** List of components to bootstrap. */\n\tbootstrap: Type<any>[] | (() => Type<any>[]);\n\t/** List of components, directives, and pipes declared by this module. */\n\tdeclarations: Type<any>[] | (() => Type<any>[]);\n\t/** List of modules or \\`ModuleWithProviders\\` imported by this module. */\n\timports: Type<any>[] | (() => Type<any>[]);\n\t/**\n\t * List of modules, \\`ModuleWithProviders\\`, components, directives, or pipes exported by this\n\t * module.\n\t */\n\texports: Type<any>[] | (() => Type<any>[]);\n\t/**\n\t * Cached value of computed \\`transitiveCompileScopes\\` for this module.\n\t *\n\t * This should never be read directly, but accessed via \\`transitiveScopesFor\\`.\n\t */\n\ttransitiveCompileScopes: ɵNgModuleTransitiveScopes | null;\n\t/** The set of schemas that declare elements to be allowed in the NgModule. */\n\tschemas: SchemaMetadata[] | null;\n\t/** Unique ID for the module with which it should be registered.  */\n\tid: string | null;\n}\n\nexport declare class ɵNgModuleFactory<T> extends NgModuleFactory<T> {\n\tmoduleType: Type<T>;\n\tconstructor(moduleType: Type<T>);\n\tcreate(parentInjector: Injector | null): NgModuleRef<T>;\n}\n\n/**\n * Represents the expansion of an \\`NgModule\\` into its scopes.\n *\n * A scope is a set of directives and pipes that are visible in a particular context. Each\n * \\`NgModule\\` has two scopes. The \\`compilation\\` scope is the set of directives and pipes that will\n * be recognized in the templates of components declared by the module. The \\`exported\\` scope is the\n * set of directives and pipes exported by a module (that is, module B's exported scope gets added\n * to module A's compilation scope when module A imports B).\n */\nexport declare interface ɵNgModuleTransitiveScopes {\n\tcompilation: {\n\t\tdirectives: Set<any>;\n\t\tpipes: Set<any>;\n\t};\n\texported: {\n\t\tdirectives: Set<any>;\n\t\tpipes: Set<any>;\n\t};\n\tschemas: SchemaMetadata[] | null;\n}\n\nexport declare interface ɵNgModuleType<T = any> extends Type<T> {\n\tɵmod: ɵNgModuleDef<T>;\n}\n\n\nexport declare interface ɵNO_CHANGE {\n\t__brand__: 'NO_CHANGE';\n}\n\n/** A special value which designates that a value has not changed. */\nexport declare const ɵNO_CHANGE: ɵNO_CHANGE;\n\n/**\n * Provides a noop implementation of \\`NgZone\\` which does nothing. This zone requires explicit calls\n * to framework to perform rendering.\n */\nexport declare class ɵNoopNgZone implements NgZone {\n\treadonly hasPendingMicrotasks: boolean;\n\treadonly hasPendingMacrotasks: boolean;\n\treadonly isStable: boolean;\n\treadonly onUnstable: EventEmitter<any>;\n\treadonly onMicrotaskEmpty: EventEmitter<any>;\n\treadonly onStable: EventEmitter<any>;\n\treadonly onError: EventEmitter<any>;\n\trun<T>(fn: (...args: any[]) => T, applyThis?: any, applyArgs?: any): T;\n\trunGuarded<T>(fn: (...args: any[]) => any, applyThis?: any, applyArgs?: any): T;\n\trunOutsideAngular<T>(fn: (...args: any[]) => T): T;\n\trunTask<T>(fn: (...args: any[]) => T, applyThis?: any, applyArgs?: any, name?: string): T;\n}\n\n\n/**\n * Convince closure compiler that the wrapped function has no side-effects.\n *\n * Closure compiler always assumes that \\`toString\\` has no side-effects. We use this quirk to\n * allow us to execute a function but have closure compiler mark the call as no-side-effects.\n * It is important that the return value for the \\`noSideEffects\\` function be assigned\n * to something which is retained otherwise the call to \\`noSideEffects\\` will be removed by closure\n * compiler.\n */\nexport declare function ɵnoSideEffects<T>(fn: () => T): T;\n\n\nexport declare const ɵNOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR: {};\n\n/**\n * Patch the definition of a component with directives and pipes from the compilation scope of\n * a given module.\n */\nexport declare function ɵpatchComponentDefWithScope<C>(componentDef: ɵComponentDef<C>, transitiveScopes: ɵNgModuleTransitiveScopes): void;\n\n/**\n * Runtime link information for Pipes.\n *\n * This is an internal data structure used by the renderer to link\n * pipes into templates.\n *\n * NOTE: Always use \\`definePipe\\` function to create this object,\n * never create the object directly since the shape of this object\n * can change between versions.\n *\n * See: {@link definePipe}\n */\nexport declare interface ɵPipeDef<T> {\n\t/** Token representing the pipe. */\n\ttype: Type<T>;\n\t/**\n\t * Pipe name.\n\t *\n\t * Used to resolve pipe in templates.\n\t */\n\treadonly name: string;\n\t/**\n\t * Factory function used to create a new pipe instance. Will be null initially.\n\t * Populated when the factory is first requested by pipe instantiation logic.\n\t */\n\tfactory: FactoryFn<T> | null;\n\t/**\n\t * Whether or not the pipe is pure.\n\t *\n\t * Pure pipes result only depends on the pipe input and not on internal\n\t * state of the pipe.\n\t */\n\treadonly pure: boolean;\n\t/**\n\t * Whether this pipe is standalone.\n\t */\n\treadonly standalone: boolean;\n\tonDestroy: (() => void) | null;\n}\n\n/**\n * Profiler function which the runtime will invoke before and after user code.\n */\nexport declare interface ɵProfiler {\n\t(event: ɵProfilerEvent, instance: {} | null, hookOrListener?: (e?: any) => any): void;\n}\n\n\n/**\n * Profiler events is an enum used by the profiler to distinguish between different calls of user\n * code invoked throughout the application lifecycle.\n */\nexport declare const enum ɵProfilerEvent {\n\t/**\n\t * Corresponds to the point in time before the runtime has called the template function of a\n\t * component with \\`RenderFlags.Create\\`.\n\t */\n\tTemplateCreateStart = 0,\n\t/**\n\t * Corresponds to the point in time after the runtime has called the template function of a\n\t * component with \\`RenderFlags.Create\\`.\n\t */\n\tTemplateCreateEnd = 1,\n\t/**\n\t * Corresponds to the point in time before the runtime has called the template function of a\n\t * component with \\`RenderFlags.Update\\`.\n\t */\n\tTemplateUpdateStart = 2,\n\t/**\n\t * Corresponds to the point in time after the runtime has called the template function of a\n\t * component with \\`RenderFlags.Update\\`.\n\t */\n\tTemplateUpdateEnd = 3,\n\t/**\n\t * Corresponds to the point in time before the runtime has called a lifecycle hook of a component\n\t * or directive.\n\t */\n\tLifecycleHookStart = 4,\n\t/**\n\t * Corresponds to the point in time after the runtime has called a lifecycle hook of a component\n\t * or directive.\n\t */\n\tLifecycleHookEnd = 5,\n\t/**\n\t * Corresponds to the point in time before the runtime has evaluated an expression associated with\n\t * an event or an output.\n\t */\n\tOutputStart = 6,\n\t/**\n\t * Corresponds to the point in time after the runtime has evaluated an expression associated with\n\t * an event or an output.\n\t */\n\tOutputEnd = 7\n}\n\n/**\n * Publishes a collection of default debug tools onto\\`window.ng\\`.\n *\n * These functions are available globally when Angular is in development\n * mode and are automatically stripped away from prod mode is on.\n */\nexport declare function ɵpublishDefaultGlobalUtils(): void;\n\n/**\n * Publishes the given function to \\`window.ng\\` so that it can be\n * used from the browser console when an application is not in production.\n */\nexport declare function ɵpublishGlobalUtil(name: string, fn: Function): void;\n\nexport declare class ɵReflectionCapabilities implements PlatformReflectionCapabilities {\n\tprivate _reflect;\n\tconstructor(reflect?: any);\n\tfactory<T>(t: Type<T>): (args: any[]) => T;\n\tprivate _ownParameters;\n\tparameters(type: Type<any>): any[][];\n\tprivate _ownAnnotations;\n\tannotations(typeOrFunc: Type<any>): any[];\n\tprivate _ownPropMetadata;\n\tpropMetadata(typeOrFunc: any): {\n\t\t[key: string]: any[];\n\t};\n\townPropMetadata(typeOrFunc: any): {\n\t\t[key: string]: any[];\n\t};\n\thasLifecycleHook(type: any, lcProperty: string): boolean;\n}\n\n/**\n * Register locale data to be used internally by Angular. See the\n * [\"I18n guide\"](guide/i18n-common-format-data-locale) to know how to import additional locale\n * data.\n *\n * The signature \\`registerLocaleData(data: any, extraData?: any)\\` is deprecated since v5.1\n */\nexport declare function ɵregisterLocaleData(data: any, localeId?: string | any, extraData?: any): void;\n\n/**\n * ComponentFactory interface implementation.\n */\nexport declare class ɵRender3ComponentFactory<T> extends ComponentFactory<T> {\n\tprivate componentDef;\n\tprivate ngModule?;\n\tselector: string;\n\tcomponentType: Type<any>;\n\tngContentSelectors: string[];\n\tisBoundToModule: boolean;\n\tget inputs(): {\n\t\tpropName: string;\n\t\ttemplateName: string;\n\t}[];\n\tget outputs(): {\n\t\tpropName: string;\n\t\ttemplateName: string;\n\t}[];\n\t/**\n\t * @param componentDef The component definition.\n\t * @param ngModule The NgModuleRef to which the factory is bound.\n\t */\n\tconstructor(componentDef: ɵComponentDef<any>, ngModule?: NgModuleRef<any> | undefined);\n\tcreate(injector: Injector, projectableNodes?: any[][] | undefined, rootSelectorOrNode?: any, environmentInjector?: NgModuleRef<any> | EnvironmentInjector | undefined): ComponentRef<T>;\n}\n\n/**\n * Represents an instance of a Component created via a {@link ComponentFactory}.\n *\n * \\`ComponentRef\\` provides access to the Component Instance as well other objects related to this\n * Component Instance and allows you to destroy the Component Instance via the {@link #destroy}\n * method.\n *\n */\nexport declare class ɵRender3ComponentRef<T> extends ComponentRef<T> {\n\tlocation: ElementRef;\n\tprivate _rootLView;\n\tprivate _tNode;\n\tinstance: T;\n\thostView: ɵViewRef<T>;\n\tchangeDetectorRef: ChangeDetectorRef;\n\tcomponentType: Type<T>;\n\tconstructor(componentType: Type<T>, instance: T, location: ElementRef, _rootLView: LView, _tNode: TElementNode | TContainerNode | TElementContainerNode);\n\tsetInput(name: string, value: unknown): void;\n\tget injector(): Injector;\n\tdestroy(): void;\n\tonDestroy(callback: () => void): void;\n}\n\nexport declare class ɵRender3NgModuleRef<T> extends NgModuleRef<T> implements InternalNgModuleRef<T> {\n\t_parent: Injector | null;\n\t_bootstrapComponents: Type<any>[];\n\t_r3Injector: R3Injector;\n\tinstance: T;\n\tdestroyCbs: (() => void)[] | null;\n\treadonly componentFactoryResolver: ComponentFactoryResolver_2;\n\tconstructor(ngModuleType: Type<T>, _parent: Injector | null);\n\tget injector(): EnvironmentInjector;\n\tdestroy(): void;\n\tonDestroy(callback: () => void): void;\n}\n\n/**\n * Flags passed into template functions to determine which blocks (i.e. creation, update)\n * should be executed.\n *\n * Typically, a template runs both the creation block and the update block on initialization and\n * subsequent runs only execute the update block. However, dynamically created views require that\n * the creation block be executed separately from the update block (for backwards compat).\n */\nexport declare const enum ɵRenderFlags {\n\tCreate = 1,\n\tUpdate = 2\n}\n\nexport declare function ɵresetCompiledComponents(): void;\n\nexport declare function ɵresetJitOptions(): void;\n\n/**\n * Used to resolve resource URLs on \\`@Component\\` when used with JIT compilation.\n *\n * Example:\n * \\`\\`\\`\n * @Component({\n *   selector: 'my-comp',\n *   templateUrl: 'my-comp.html', // This requires asynchronous resolution\n * })\n * class MyComponent{\n * }\n *\n * // Calling \\`renderComponent\\` will fail because \\`renderComponent\\` is a synchronous process\n * // and \\`MyComponent\\`'s \\`@Component.templateUrl\\` needs to be resolved asynchronously.\n *\n * // Calling \\`resolveComponentResources()\\` will resolve \\`@Component.templateUrl\\` into\n * // \\`@Component.template\\`, which allows \\`renderComponent\\` to proceed in a synchronous manner.\n *\n * // Use browser's \\`fetch()\\` function as the default resource resolution strategy.\n * resolveComponentResources(fetch).then(() => {\n *   // After resolution all URLs have been converted into \\`template\\` strings.\n *   renderComponent(MyComponent);\n * });\n *\n * \\`\\`\\`\n *\n * NOTE: In AOT the resolution happens during compilation, and so there should be no need\n * to call this method outside JIT mode.\n *\n * @param resourceResolver a function which is responsible for returning a \\`Promise\\` to the\n * contents of the resolved URL. Browser's \\`fetch()\\` method is a good default implementation.\n */\nexport declare function ɵresolveComponentResources(resourceResolver: (url: string) => (Promise<string | {\n\ttext(): Promise<string>;\n}>)): Promise<void>;\n\n/**\n * Class that represents a runtime error.\n * Formats and outputs the error message in a consistent way.\n *\n * Example:\n * \\`\\`\\`\n *  throw new RuntimeError(\n *    RuntimeErrorCode.INJECTOR_ALREADY_DESTROYED,\n *    ngDevMode && 'Injector has already been destroyed.');\n * \\`\\`\\`\n *\n * Note: the \\`message\\` argument contains a descriptive error message as a string in development\n * mode (when the \\`ngDevMode\\` is defined). In production mode (after tree-shaking pass), the\n * \\`message\\` argument becomes \\`false\\`, thus we account for it in the typings and the runtime logic.\n */\nexport declare class ɵRuntimeError<T extends number = RuntimeErrorCode> extends Error {\n\tcode: T;\n\tconstructor(code: T, message: null | false | string);\n}\n\n/**\n * Marker interface for a value that's safe to use as HTML.\n *\n * @publicApi\n */\nexport declare interface ɵSafeHtml extends ɵSafeValue {\n}\n\n/**\n * Marker interface for a value that's safe to use as a URL to load executable code from.\n *\n * @publicApi\n */\nexport declare interface ɵSafeResourceUrl extends ɵSafeValue {\n}\n\n/**\n * Marker interface for a value that's safe to use as JavaScript.\n *\n * @publicApi\n */\nexport declare interface ɵSafeScript extends ɵSafeValue {\n}\n\n/**\n * Marker interface for a value that's safe to use as style (CSS).\n *\n * @publicApi\n */\nexport declare interface ɵSafeStyle extends ɵSafeValue {\n}\n\n/**\n * Marker interface for a value that's safe to use as a URL linking to a document.\n *\n * @publicApi\n */\nexport declare interface ɵSafeUrl extends ɵSafeValue {\n}\n\n/**\n * Marker interface for a value that's safe to use in a particular context.\n *\n * @publicApi\n */\nexport declare interface ɵSafeValue {\n}\n\n/**\n * Control whether the NgModule registration system enforces that each NgModule type registered has\n * a unique id.\n *\n * This is useful for testing as the NgModule registry cannot be properly reset between tests with\n * Angular's current API.\n */\nexport declare function ɵsetAllowDuplicateNgModuleIdsForTest(allowDuplicates: boolean): void;\n\n/**\n * Adds decorator, constructor, and property metadata to a given type via static metadata fields\n * on the type.\n *\n * These metadata fields can later be read with Angular's \\`ReflectionCapabilities\\` API.\n *\n * Calls to \\`setClassMetadata\\` can be guarded by ngDevMode, resulting in the metadata assignments\n * being tree-shaken away during production builds.\n */\nexport declare function ɵsetClassMetadata(type: Type<any>, decorators: any[] | null, ctorParameters: (() => any[]) | null, propDecorators: {\n\t[field: string]: any;\n} | null): void;\n\nexport declare function ɵsetCurrentInjector(injector: Injector | null | undefined): Injector | undefined | null;\n\n\n/**\n * Tell ivy what the \\`document\\` is for this platform.\n *\n * It is only necessary to call this if the current platform is not a browser.\n *\n * @param document The object representing the global \\`document\\` in this environment.\n */\nexport declare function ɵsetDocument(document: Document | undefined): void;\n\n\n/**\n * Sets the locale id that will be used for translations and ICU expressions.\n * This is the ivy version of \\`LOCALE_ID\\` that was defined as an injection token for the view engine\n * but is now defined as a global value.\n *\n * @param localeId\n */\nexport declare function ɵsetLocaleId(localeId: string): void;\n\n/**\n * Sets a strict mode for JIT-compiled components to throw an error on unknown elements,\n * instead of just logging the error.\n * (for AOT-compiled ones this check happens at build time).\n */\nexport declare function ɵsetUnknownElementStrictMode(shouldThrow: boolean): void;\n\n/**\n * Sets a strict mode for JIT-compiled components to throw an error on unknown properties,\n * instead of just logging the error.\n * (for AOT-compiled ones this check happens at build time).\n */\nexport declare function ɵsetUnknownPropertyStrictMode(shouldThrow: boolean): void;\n\n/** Store a value in the \\`data\\` at a given \\`index\\`. */\nexport declare function ɵstore<T>(tView: TView, lView: LView, index: number, value: T): void;\n\n\nexport declare function ɵstringify(token: any): string;\n\n/**\n * Internal injection token that can used to access an instance of a Testability class.\n *\n * This token acts as a bridge between the core bootstrap code and the \\`Testability\\` class. This is\n * needed to ensure that there are no direct references to the \\`Testability\\` class, so it can be\n * tree-shaken away (if not referenced). For the environments/setups when the \\`Testability\\` class\n * should be available, this token is used to add a provider that references the \\`Testability\\`\n * class. Otherwise, only this token is retained in a bundle, but the \\`Testability\\` class is not.\n */\nexport declare const ɵTESTABILITY: InjectionToken<Testability>;\n\n/**\n * Internal injection token to retrieve Testability getter class instance.\n */\nexport declare const ɵTESTABILITY_GETTER: InjectionToken<GetTestability>;\n\n/**\n * Compute the pair of transitive scopes (compilation scope and exported scope) for a given type\n * (either a NgModule or a standalone component / directive / pipe).\n */\nexport declare function ɵtransitiveScopesFor<T>(type: Type<T>): ɵNgModuleTransitiveScopes;\n\n/**\n * Helper function to remove all the locale data from \\`LOCALE_DATA\\`.\n */\nexport declare function ɵunregisterLocaleData(): void;\n\nexport declare function ɵunwrapSafeValue(value: ɵSafeValue): string;\n\nexport declare function ɵunwrapSafeValue<T>(value: T): T;\n\nexport declare class ɵViewRef<T> implements EmbeddedViewRef<T>, InternalViewRef, viewEngine_ChangeDetectorRef_interface {\n\t/**\n\t * This represents the \\`LView\\` associated with the point where \\`ChangeDetectorRef\\` was\n\t * requested.\n\t *\n\t * This may be different from \\`_lView\\` if the \\`_cdRefInjectingView\\` is an embedded view.\n\t */\n\tprivate _cdRefInjectingView?;\n\tprivate _appRef;\n\tprivate _attachedToViewContainer;\n\tget rootNodes(): any[];\n\tconstructor(\n\t\t/**\n\t\t * This represents \\`LView\\` associated with the component when ViewRef is a ChangeDetectorRef.\n\t\t *\n\t\t * When ViewRef is created for a dynamic component, this also represents the \\`LView\\` for the\n\t\t * component.\n\t\t *\n\t\t * For a \"regular\" ViewRef created for an embedded view, this is the \\`LView\\` for the embedded\n\t\t * view.\n\t\t *\n\t\t * @internal\n\t\t */\n\t\t_lView: LView,\n\t\t/**\n\t\t * This represents the \\`LView\\` associated with the point where \\`ChangeDetectorRef\\` was\n\t\t * requested.\n\t\t *\n\t\t * This may be different from \\`_lView\\` if the \\`_cdRefInjectingView\\` is an embedded view.\n\t\t */\n\t\t_cdRefInjectingView?: LView<unknown> | undefined);\n\tget context(): T;\n\tset context(value: T);\n\tget destroyed(): boolean;\n\tdestroy(): void;\n\tonDestroy(callback: Function): void;\n\t/**\n\t * Marks a view and all of its ancestors dirty.\n\t *\n\t * This can be used to ensure an {@link ChangeDetectionStrategy#OnPush OnPush} component is\n\t * checked when it needs to be re-rendered but the two normal triggers haven't marked it\n\t * dirty (i.e. inputs haven't changed and events haven't fired in the view).\n\t *\n\t * <!-- TODO: Add a link to a chapter on OnPush components -->\n\t *\n\t * @usageNotes\n\t * ### Example\n\t *\n\t * \\`\\`\\`typescript\n\t * @Component({\n\t *   selector: 'app-root',\n\t *   template: \\`Number of ticks: {{numberOfTicks}}\\`\n\t *   changeDetection: ChangeDetectionStrategy.OnPush,\n\t * })\n\t * class AppComponent {\n\t *   numberOfTicks = 0;\n\t *\n\t *   constructor(private ref: ChangeDetectorRef) {\n\t *     setInterval(() => {\n\t *       this.numberOfTicks++;\n\t *       // the following is required, otherwise the view will not be updated\n\t *       this.ref.markForCheck();\n\t *     }, 1000);\n\t *   }\n\t * }\n\t * \\`\\`\\`\n\t */\n\tmarkForCheck(): void;\n\t/**\n\t * Detaches the view from the change detection tree.\n\t *\n\t * Detached views will not be checked during change detection runs until they are\n\t * re-attached, even if they are dirty. \\`detach\\` can be used in combination with\n\t * {@link ChangeDetectorRef#detectChanges detectChanges} to implement local change\n\t * detection checks.\n\t *\n\t * <!-- TODO: Add a link to a chapter on detach/reattach/local digest -->\n\t * <!-- TODO: Add a live demo once ref.detectChanges is merged into master -->\n\t *\n\t * @usageNotes\n\t * ### Example\n\t *\n\t * The following example defines a component with a large list of readonly data.\n\t * Imagine the data changes constantly, many times per second. For performance reasons,\n\t * we want to check and update the list every five seconds. We can do that by detaching\n\t * the component's change detector and doing a local check every five seconds.\n\t *\n\t * \\`\\`\\`typescript\n\t * class DataProvider {\n\t *   // in a real application the returned data will be different every time\n\t *   get data() {\n\t *     return [1,2,3,4,5];\n\t *   }\n\t * }\n\t *\n\t * @Component({\n\t *   selector: 'giant-list',\n\t *   template: \\`\n\t *     <li *ngFor=\"let d of dataProvider.data\">Data {{d}}</li>\n\t *   \\`,\n\t * })\n\t * class GiantList {\n\t *   constructor(private ref: ChangeDetectorRef, private dataProvider: DataProvider) {\n\t *     ref.detach();\n\t *     setInterval(() => {\n\t *       this.ref.detectChanges();\n\t *     }, 5000);\n\t *   }\n\t * }\n\t *\n\t * @Component({\n\t *   selector: 'app',\n\t *   providers: [DataProvider],\n\t *   template: \\`\n\t *     <giant-list><giant-list>\n\t *   \\`,\n\t * })\n\t * class App {\n\t * }\n\t * \\`\\`\\`\n\t */\n\tdetach(): void;\n\t/**\n\t * Re-attaches a view to the change detection tree.\n\t *\n\t * This can be used to re-attach views that were previously detached from the tree\n\t * using {@link ChangeDetectorRef#detach detach}. Views are attached to the tree by default.\n\t *\n\t * <!-- TODO: Add a link to a chapter on detach/reattach/local digest -->\n\t *\n\t * @usageNotes\n\t * ### Example\n\t *\n\t * The following example creates a component displaying \\`live\\` data. The component will detach\n\t * its change detector from the main change detector tree when the component's live property\n\t * is set to false.\n\t *\n\t * \\`\\`\\`typescript\n\t * class DataProvider {\n\t *   data = 1;\n\t *\n\t *   constructor() {\n\t *     setInterval(() => {\n\t *       this.data = this.data * 2;\n\t *     }, 500);\n\t *   }\n\t * }\n\t *\n\t * @Component({\n\t *   selector: 'live-data',\n\t *   inputs: ['live'],\n\t *   template: 'Data: {{dataProvider.data}}'\n\t * })\n\t * class LiveData {\n\t *   constructor(private ref: ChangeDetectorRef, private dataProvider: DataProvider) {}\n\t *\n\t *   set live(value) {\n\t *     if (value) {\n\t *       this.ref.reattach();\n\t *     } else {\n\t *       this.ref.detach();\n\t *     }\n\t *   }\n\t * }\n\t *\n\t * @Component({\n\t *   selector: 'app-root',\n\t *   providers: [DataProvider],\n\t *   template: \\`\n\t *     Live Update: <input type=\"checkbox\" [(ngModel)]=\"live\">\n\t *     <live-data [live]=\"live\"><live-data>\n\t *   \\`,\n\t * })\n\t * class AppComponent {\n\t *   live = true;\n\t * }\n\t * \\`\\`\\`\n\t */\n\treattach(): void;\n\t/**\n\t * Checks the view and its children.\n\t *\n\t * This can also be used in combination with {@link ChangeDetectorRef#detach detach} to implement\n\t * local change detection checks.\n\t *\n\t * <!-- TODO: Add a link to a chapter on detach/reattach/local digest -->\n\t * <!-- TODO: Add a live demo once ref.detectChanges is merged into master -->\n\t *\n\t * @usageNotes\n\t * ### Example\n\t *\n\t * The following example defines a component with a large list of readonly data.\n\t * Imagine, the data changes constantly, many times per second. For performance reasons,\n\t * we want to check and update the list every five seconds.\n\t *\n\t * We can do that by detaching the component's change detector and doing a local change detection\n\t * check every five seconds.\n\t *\n\t * See {@link ChangeDetectorRef#detach detach} for more information.\n\t */\n\tdetectChanges(): void;\n\t/**\n\t * Checks the change detector and its children, and throws if any changes are detected.\n\t *\n\t * This is used in development mode to verify that running change detection doesn't\n\t * introduce other changes.\n\t */\n\tcheckNoChanges(): void;\n\tattachToViewContainerRef(): void;\n\tdetachFromAppRef(): void;\n\tattachToAppRef(appRef: ViewRefTracker): void;\n}\n\n/**\n * Advances to an element for later binding instructions.\n *\n * Used in conjunction with instructions like {@link property} to act on elements with specified\n * indices, for example those created with {@link element} or {@link elementStart}.\n *\n * \\`\\`\\`ts\n * (rf: RenderFlags, ctx: any) => {\n *   if (rf & 1) {\n *     text(0, 'Hello');\n *     text(1, 'Goodbye')\n *     element(2, 'div');\n *   }\n *   if (rf & 2) {\n *     advance(2); // Advance twice to the <div>.\n *     property('title', 'test');\n *   }\n *  }\n * \\`\\`\\`\n * @param delta Number of elements to advance forwards by.\n *\n * @codeGenApi\n */\nexport declare function ɵɵadvance(delta: number): void;\n\n/**\n * Updates the value of or removes a bound attribute on an Element.\n *\n * Used in the case of \\`[attr.title]=\"value\"\\`\n *\n * @param name name The name of the attribute.\n * @param value value The attribute is removed when value is \\`null\\` or \\`undefined\\`.\n *                  Otherwise the attribute value is set to the stringified value.\n * @param sanitizer An optional function used to sanitize the value.\n * @param namespace Optional namespace to use when setting the attribute.\n *\n * @codeGenApi\n */\nexport declare function ɵɵattribute(name: string, value: any, sanitizer?: SanitizerFn | null, namespace?: string): typeof ɵɵattribute;\n\n/**\n *\n * Update an interpolated attribute on an element with single bound value surrounded by text.\n *\n * Used when the value passed to a property has 1 interpolated value in it:\n *\n * \\`\\`\\`html\n * <div attr.title=\"prefix{{v0}}suffix\"></div>\n * \\`\\`\\`\n *\n * Its compiled representation is::\n *\n * \\`\\`\\`ts\n * ɵɵattributeInterpolate1('title', 'prefix', v0, 'suffix');\n * \\`\\`\\`\n *\n * @param attrName The name of the attribute to update\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @param sanitizer An optional sanitizer function\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nexport declare function ɵɵattributeInterpolate1(attrName: string, prefix: string, v0: any, suffix: string, sanitizer?: SanitizerFn, namespace?: string): typeof ɵɵattributeInterpolate1;\n\n/**\n *\n * Update an interpolated attribute on an element with 2 bound values surrounded by text.\n *\n * Used when the value passed to a property has 2 interpolated values in it:\n *\n * \\`\\`\\`html\n * <div attr.title=\"prefix{{v0}}-{{v1}}suffix\"></div>\n * \\`\\`\\`\n *\n * Its compiled representation is::\n *\n * \\`\\`\\`ts\n * ɵɵattributeInterpolate2('title', 'prefix', v0, '-', v1, 'suffix');\n * \\`\\`\\`\n *\n * @param attrName The name of the attribute to update\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @param sanitizer An optional sanitizer function\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nexport declare function ɵɵattributeInterpolate2(attrName: string, prefix: string, v0: any, i0: string, v1: any, suffix: string, sanitizer?: SanitizerFn, namespace?: string): typeof ɵɵattributeInterpolate2;\n\n/**\n *\n * Update an interpolated attribute on an element with 3 bound values surrounded by text.\n *\n * Used when the value passed to a property has 3 interpolated values in it:\n *\n * \\`\\`\\`html\n * <div attr.title=\"prefix{{v0}}-{{v1}}-{{v2}}suffix\"></div>\n * \\`\\`\\`\n *\n * Its compiled representation is::\n *\n * \\`\\`\\`ts\n * ɵɵattributeInterpolate3(\n * 'title', 'prefix', v0, '-', v1, '-', v2, 'suffix');\n * \\`\\`\\`\n *\n * @param attrName The name of the attribute to update\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @param sanitizer An optional sanitizer function\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nexport declare function ɵɵattributeInterpolate3(attrName: string, prefix: string, v0: any, i0: string, v1: any, i1: string, v2: any, suffix: string, sanitizer?: SanitizerFn, namespace?: string): typeof ɵɵattributeInterpolate3;\n\n/**\n *\n * Update an interpolated attribute on an element with 4 bound values surrounded by text.\n *\n * Used when the value passed to a property has 4 interpolated values in it:\n *\n * \\`\\`\\`html\n * <div attr.title=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}suffix\"></div>\n * \\`\\`\\`\n *\n * Its compiled representation is::\n *\n * \\`\\`\\`ts\n * ɵɵattributeInterpolate4(\n * 'title', 'prefix', v0, '-', v1, '-', v2, '-', v3, 'suffix');\n * \\`\\`\\`\n *\n * @param attrName The name of the attribute to update\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param i2 Static value used for concatenation only.\n * @param v3 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @param sanitizer An optional sanitizer function\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nexport declare function ɵɵattributeInterpolate4(attrName: string, prefix: string, v0: any, i0: string, v1: any, i1: string, v2: any, i2: string, v3: any, suffix: string, sanitizer?: SanitizerFn, namespace?: string): typeof ɵɵattributeInterpolate4;\n\n/**\n *\n * Update an interpolated attribute on an element with 5 bound values surrounded by text.\n *\n * Used when the value passed to a property has 5 interpolated values in it:\n *\n * \\`\\`\\`html\n * <div attr.title=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}suffix\"></div>\n * \\`\\`\\`\n *\n * Its compiled representation is::\n *\n * \\`\\`\\`ts\n * ɵɵattributeInterpolate5(\n * 'title', 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, 'suffix');\n * \\`\\`\\`\n *\n * @param attrName The name of the attribute to update\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param i2 Static value used for concatenation only.\n * @param v3 Value checked for change.\n * @param i3 Static value used for concatenation only.\n * @param v4 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @param sanitizer An optional sanitizer function\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nexport declare function ɵɵattributeInterpolate5(attrName: string, prefix: string, v0: any, i0: string, v1: any, i1: string, v2: any, i2: string, v3: any, i3: string, v4: any, suffix: string, sanitizer?: SanitizerFn, namespace?: string): typeof ɵɵattributeInterpolate5;\n\n/**\n *\n * Update an interpolated attribute on an element with 6 bound values surrounded by text.\n *\n * Used when the value passed to a property has 6 interpolated values in it:\n *\n * \\`\\`\\`html\n * <div attr.title=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}suffix\"></div>\n * \\`\\`\\`\n *\n * Its compiled representation is::\n *\n * \\`\\`\\`ts\n * ɵɵattributeInterpolate6(\n *    'title', 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, 'suffix');\n * \\`\\`\\`\n *\n * @param attrName The name of the attribute to update\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param i2 Static value used for concatenation only.\n * @param v3 Value checked for change.\n * @param i3 Static value used for concatenation only.\n * @param v4 Value checked for change.\n * @param i4 Static value used for concatenation only.\n * @param v5 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @param sanitizer An optional sanitizer function\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nexport declare function ɵɵattributeInterpolate6(attrName: string, prefix: string, v0: any, i0: string, v1: any, i1: string, v2: any, i2: string, v3: any, i3: string, v4: any, i4: string, v5: any, suffix: string, sanitizer?: SanitizerFn, namespace?: string): typeof ɵɵattributeInterpolate6;\n\n/**\n *\n * Update an interpolated attribute on an element with 7 bound values surrounded by text.\n *\n * Used when the value passed to a property has 7 interpolated values in it:\n *\n * \\`\\`\\`html\n * <div attr.title=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}suffix\"></div>\n * \\`\\`\\`\n *\n * Its compiled representation is::\n *\n * \\`\\`\\`ts\n * ɵɵattributeInterpolate7(\n *    'title', 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, 'suffix');\n * \\`\\`\\`\n *\n * @param attrName The name of the attribute to update\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param i2 Static value used for concatenation only.\n * @param v3 Value checked for change.\n * @param i3 Static value used for concatenation only.\n * @param v4 Value checked for change.\n * @param i4 Static value used for concatenation only.\n * @param v5 Value checked for change.\n * @param i5 Static value used for concatenation only.\n * @param v6 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @param sanitizer An optional sanitizer function\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nexport declare function ɵɵattributeInterpolate7(attrName: string, prefix: string, v0: any, i0: string, v1: any, i1: string, v2: any, i2: string, v3: any, i3: string, v4: any, i4: string, v5: any, i5: string, v6: any, suffix: string, sanitizer?: SanitizerFn, namespace?: string): typeof ɵɵattributeInterpolate7;\n\n/**\n *\n * Update an interpolated attribute on an element with 8 bound values surrounded by text.\n *\n * Used when the value passed to a property has 8 interpolated values in it:\n *\n * \\`\\`\\`html\n * <div attr.title=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}-{{v7}}suffix\"></div>\n * \\`\\`\\`\n *\n * Its compiled representation is::\n *\n * \\`\\`\\`ts\n * ɵɵattributeInterpolate8(\n *  'title', 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, '-', v7, 'suffix');\n * \\`\\`\\`\n *\n * @param attrName The name of the attribute to update\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param i2 Static value used for concatenation only.\n * @param v3 Value checked for change.\n * @param i3 Static value used for concatenation only.\n * @param v4 Value checked for change.\n * @param i4 Static value used for concatenation only.\n * @param v5 Value checked for change.\n * @param i5 Static value used for concatenation only.\n * @param v6 Value checked for change.\n * @param i6 Static value used for concatenation only.\n * @param v7 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @param sanitizer An optional sanitizer function\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nexport declare function ɵɵattributeInterpolate8(attrName: string, prefix: string, v0: any, i0: string, v1: any, i1: string, v2: any, i2: string, v3: any, i3: string, v4: any, i4: string, v5: any, i5: string, v6: any, i6: string, v7: any, suffix: string, sanitizer?: SanitizerFn, namespace?: string): typeof ɵɵattributeInterpolate8;\n\n/**\n * Update an interpolated attribute on an element with 9 or more bound values surrounded by text.\n *\n * Used when the number of interpolated values exceeds 8.\n *\n * \\`\\`\\`html\n * <div\n *  title=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}-{{v7}}-{{v8}}-{{v9}}suffix\"></div>\n * \\`\\`\\`\n *\n * Its compiled representation is::\n *\n * \\`\\`\\`ts\n * ɵɵattributeInterpolateV(\n *  'title', ['prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, '-', v7, '-', v9,\n *  'suffix']);\n * \\`\\`\\`\n *\n * @param attrName The name of the attribute to update.\n * @param values The collection of values and the strings in-between those values, beginning with\n * a string prefix and ending with a string suffix.\n * (e.g. \\`['prefix', value0, '-', value1, '-', value2, ..., value99, 'suffix']\\`)\n * @param sanitizer An optional sanitizer function\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nexport declare function ɵɵattributeInterpolateV(attrName: string, values: any[], sanitizer?: SanitizerFn, namespace?: string): typeof ɵɵattributeInterpolateV;\n\n/**\n * Update class bindings using an object literal or class-string on an element.\n *\n * This instruction is meant to apply styling via the \\`[class]=\"exp\"\\` template bindings.\n * When classes are applied to the element they will then be updated with\n * respect to any styles/classes set via \\`classProp\\`. If any\n * classes are set to falsy then they will be removed from the element.\n *\n * Note that the styling instruction will not be applied until \\`stylingApply\\` is called.\n * Note that this will the provided classMap value to the host element if this function is called\n * within a host binding.\n *\n * @param classes A key/value map or string of CSS classes that will be added to the\n *        given element. Any missing classes (that have already been applied to the element\n *        beforehand) will be removed (unset) from the element's list of CSS classes.\n *\n * @codeGenApi\n */\nexport declare function ɵɵclassMap(classes: {\n\t[className: string]: boolean | undefined | null;\n} | string | undefined | null): void;\n\n\n/**\n *\n * Update an interpolated class on an element with single bound value surrounded by text.\n *\n * Used when the value passed to a property has 1 interpolated value in it:\n *\n * \\`\\`\\`html\n * <div class=\"prefix{{v0}}suffix\"></div>\n * \\`\\`\\`\n *\n * Its compiled representation is:\n *\n * \\`\\`\\`ts\n * ɵɵclassMapInterpolate1('prefix', v0, 'suffix');\n * \\`\\`\\`\n *\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @codeGenApi\n */\nexport declare function ɵɵclassMapInterpolate1(prefix: string, v0: any, suffix: string): void;\n\n/**\n *\n * Update an interpolated class on an element with 2 bound values surrounded by text.\n *\n * Used when the value passed to a property has 2 interpolated values in it:\n *\n * \\`\\`\\`html\n * <div class=\"prefix{{v0}}-{{v1}}suffix\"></div>\n * \\`\\`\\`\n *\n * Its compiled representation is:\n *\n * \\`\\`\\`ts\n * ɵɵclassMapInterpolate2('prefix', v0, '-', v1, 'suffix');\n * \\`\\`\\`\n *\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @codeGenApi\n */\nexport declare function ɵɵclassMapInterpolate2(prefix: string, v0: any, i0: string, v1: any, suffix: string): void;\n\n/**\n *\n * Update an interpolated class on an element with 3 bound values surrounded by text.\n *\n * Used when the value passed to a property has 3 interpolated values in it:\n *\n * \\`\\`\\`html\n * <div class=\"prefix{{v0}}-{{v1}}-{{v2}}suffix\"></div>\n * \\`\\`\\`\n *\n * Its compiled representation is:\n *\n * \\`\\`\\`ts\n * ɵɵclassMapInterpolate3(\n * 'prefix', v0, '-', v1, '-', v2, 'suffix');\n * \\`\\`\\`\n *\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @codeGenApi\n */\nexport declare function ɵɵclassMapInterpolate3(prefix: string, v0: any, i0: string, v1: any, i1: string, v2: any, suffix: string): void;\n\n/**\n *\n * Update an interpolated class on an element with 4 bound values surrounded by text.\n *\n * Used when the value passed to a property has 4 interpolated values in it:\n *\n * \\`\\`\\`html\n * <div class=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}suffix\"></div>\n * \\`\\`\\`\n *\n * Its compiled representation is:\n *\n * \\`\\`\\`ts\n * ɵɵclassMapInterpolate4(\n * 'prefix', v0, '-', v1, '-', v2, '-', v3, 'suffix');\n * \\`\\`\\`\n *\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param i2 Static value used for concatenation only.\n * @param v3 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @codeGenApi\n */\nexport declare function ɵɵclassMapInterpolate4(prefix: string, v0: any, i0: string, v1: any, i1: string, v2: any, i2: string, v3: any, suffix: string): void;\n\n/**\n *\n * Update an interpolated class on an element with 5 bound values surrounded by text.\n *\n * Used when the value passed to a property has 5 interpolated values in it:\n *\n * \\`\\`\\`html\n * <div class=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}suffix\"></div>\n * \\`\\`\\`\n *\n * Its compiled representation is:\n *\n * \\`\\`\\`ts\n * ɵɵclassMapInterpolate5(\n * 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, 'suffix');\n * \\`\\`\\`\n *\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param i2 Static value used for concatenation only.\n * @param v3 Value checked for change.\n * @param i3 Static value used for concatenation only.\n * @param v4 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @codeGenApi\n */\nexport declare function ɵɵclassMapInterpolate5(prefix: string, v0: any, i0: string, v1: any, i1: string, v2: any, i2: string, v3: any, i3: string, v4: any, suffix: string): void;\n\n/**\n *\n * Update an interpolated class on an element with 6 bound values surrounded by text.\n *\n * Used when the value passed to a property has 6 interpolated values in it:\n *\n * \\`\\`\\`html\n * <div class=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}suffix\"></div>\n * \\`\\`\\`\n *\n * Its compiled representation is:\n *\n * \\`\\`\\`ts\n * ɵɵclassMapInterpolate6(\n *    'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, 'suffix');\n * \\`\\`\\`\n *\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param i2 Static value used for concatenation only.\n * @param v3 Value checked for change.\n * @param i3 Static value used for concatenation only.\n * @param v4 Value checked for change.\n * @param i4 Static value used for concatenation only.\n * @param v5 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @codeGenApi\n */\nexport declare function ɵɵclassMapInterpolate6(prefix: string, v0: any, i0: string, v1: any, i1: string, v2: any, i2: string, v3: any, i3: string, v4: any, i4: string, v5: any, suffix: string): void;\n\n/**\n *\n * Update an interpolated class on an element with 7 bound values surrounded by text.\n *\n * Used when the value passed to a property has 7 interpolated values in it:\n *\n * \\`\\`\\`html\n * <div class=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}suffix\"></div>\n * \\`\\`\\`\n *\n * Its compiled representation is:\n *\n * \\`\\`\\`ts\n * ɵɵclassMapInterpolate7(\n *    'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, 'suffix');\n * \\`\\`\\`\n *\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param i2 Static value used for concatenation only.\n * @param v3 Value checked for change.\n * @param i3 Static value used for concatenation only.\n * @param v4 Value checked for change.\n * @param i4 Static value used for concatenation only.\n * @param v5 Value checked for change.\n * @param i5 Static value used for concatenation only.\n * @param v6 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @codeGenApi\n */\nexport declare function ɵɵclassMapInterpolate7(prefix: string, v0: any, i0: string, v1: any, i1: string, v2: any, i2: string, v3: any, i3: string, v4: any, i4: string, v5: any, i5: string, v6: any, suffix: string): void;\n\n/**\n *\n * Update an interpolated class on an element with 8 bound values surrounded by text.\n *\n * Used when the value passed to a property has 8 interpolated values in it:\n *\n * \\`\\`\\`html\n * <div class=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}-{{v7}}suffix\"></div>\n * \\`\\`\\`\n *\n * Its compiled representation is:\n *\n * \\`\\`\\`ts\n * ɵɵclassMapInterpolate8(\n *  'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, '-', v7, 'suffix');\n * \\`\\`\\`\n *\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param i2 Static value used for concatenation only.\n * @param v3 Value checked for change.\n * @param i3 Static value used for concatenation only.\n * @param v4 Value checked for change.\n * @param i4 Static value used for concatenation only.\n * @param v5 Value checked for change.\n * @param i5 Static value used for concatenation only.\n * @param v6 Value checked for change.\n * @param i6 Static value used for concatenation only.\n * @param v7 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @codeGenApi\n */\nexport declare function ɵɵclassMapInterpolate8(prefix: string, v0: any, i0: string, v1: any, i1: string, v2: any, i2: string, v3: any, i3: string, v4: any, i4: string, v5: any, i5: string, v6: any, i6: string, v7: any, suffix: string): void;\n\n/**\n * Update an interpolated class on an element with 9 or more bound values surrounded by text.\n *\n * Used when the number of interpolated values exceeds 8.\n *\n * \\`\\`\\`html\n * <div\n *  class=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}-{{v7}}-{{v8}}-{{v9}}suffix\"></div>\n * \\`\\`\\`\n *\n * Its compiled representation is:\n *\n * \\`\\`\\`ts\n * ɵɵclassMapInterpolateV(\n *  ['prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, '-', v7, '-', v9,\n *  'suffix']);\n * \\`\\`\\`\n *.\n * @param values The collection of values and the strings in-between those values, beginning with\n * a string prefix and ending with a string suffix.\n * (e.g. \\`['prefix', value0, '-', value1, '-', value2, ..., value99, 'suffix']\\`)\n * @codeGenApi\n */\nexport declare function ɵɵclassMapInterpolateV(values: any[]): void;\n\n/**\n * Update a class binding on an element with the provided value.\n *\n * This instruction is meant to handle the \\`[class.foo]=\"exp\"\\` case and,\n * therefore, the class binding itself must already be allocated using\n * \\`styling\\` within the creation block.\n *\n * @param prop A valid CSS class (only one).\n * @param value A true/false value which will turn the class on or off.\n *\n * Note that this will apply the provided class value to the host element if this function\n * is called within a host binding function.\n *\n * @codeGenApi\n */\nexport declare function ɵɵclassProp(className: string, value: boolean | undefined | null): typeof ɵɵclassProp;\n\n/**\n * @publicApi\n */\nexport declare type ɵɵComponentDeclaration<T, Selector extends String, ExportAs extends string[], InputMap extends {\n\t[key: string]: string;\n}, OutputMap extends {\n\t[key: string]: string;\n}, QueryFields extends string[], NgContentSelectors extends string[], IsStandalone extends boolean = false> = unknown;\n\n/**\n * Registers a QueryList, associated with a content query, for later refresh (part of a view\n * refresh).\n *\n * @param directiveIndex Current directive index\n * @param predicate The type for which the query will search\n * @param flags Flags associated with the query\n * @param read What to save in the query\n * @returns QueryList<T>\n *\n * @codeGenApi\n */\nexport declare function ɵɵcontentQuery<T>(directiveIndex: number, predicate: ProviderToken<unknown> | string[], flags: QueryFlags, read?: any): void;\n\n/**\n * Copies the fields not handled by the \\`ɵɵInheritDefinitionFeature\\` from the supertype of a\n * definition.\n *\n * This exists primarily to support ngcc migration of an existing View Engine pattern, where an\n * entire decorator is inherited from a parent to a child class. When ngcc detects this case, it\n * generates a skeleton definition on the child class, and applies this feature.\n *\n * The \\`ɵɵCopyDefinitionFeature\\` then copies any needed fields from the parent class' definition,\n * including things like the component template function.\n *\n * @param definition The definition of a child class which inherits from a parent class with its\n * own definition.\n *\n * @codeGenApi\n */\nexport declare function ɵɵCopyDefinitionFeature(definition: ɵDirectiveDef<any> | ɵComponentDef<any>): void;\n\n/**\n * Create a component definition object.\n *\n *\n * # Example\n * \\`\\`\\`\n * class MyDirective {\n *   // Generated by Angular Template Compiler\n *   // [Symbol] syntax will not be supported by TypeScript until v2.7\n *   static ɵcmp = defineComponent({\n *     ...\n *   });\n * }\n * \\`\\`\\`\n * @codeGenApi\n */\nexport declare function ɵɵdefineComponent<T>(componentDefinition: {\n\t/**\n\t * Directive type, needed to configure the injector.\n\t */\n\ttype: Type<T>;\n\t/** The selectors that will be used to match nodes to this component. */\n\tselectors?: ɵCssSelectorList;\n\t/**\n\t * The number of nodes, local refs, and pipes in this component template.\n\t *\n\t * Used to calculate the length of this component's LView array, so we\n\t * can pre-fill the array and set the binding start index.\n\t */\n\tdecls: number;\n\t/**\n\t * The number of bindings in this component template (including pure fn bindings).\n\t *\n\t * Used to calculate the length of this component's LView array, so we\n\t * can pre-fill the array and set the host binding start index.\n\t */\n\tvars: number;\n\t/**\n\t * A map of input names.\n\t *\n\t * The format is in: \\`{[actualPropertyName: string]:(string|[string, string])}\\`.\n\t *\n\t * Given:\n\t * \\`\\`\\`\n\t * class MyComponent {\n\t *   @Input()\n\t *   publicInput1: string;\n\t *\n\t *   @Input('publicInput2')\n\t *   declaredInput2: string;\n\t * }\n\t * \\`\\`\\`\n\t *\n\t * is described as:\n\t * \\`\\`\\`\n\t * {\n\t *   publicInput1: 'publicInput1',\n\t *   declaredInput2: ['publicInput2', 'declaredInput2'],\n\t * }\n\t * \\`\\`\\`\n\t *\n\t * Which the minifier may translate to:\n\t * \\`\\`\\`\n\t * {\n\t *   minifiedPublicInput1: 'publicInput1',\n\t *   minifiedDeclaredInput2: ['publicInput2', 'declaredInput2'],\n\t * }\n\t * \\`\\`\\`\n\t *\n\t * This allows the render to re-construct the minified, public, and declared names\n\t * of properties.\n\t *\n\t * NOTE:\n\t *  - Because declared and public name are usually same we only generate the array\n\t *    \\`['public', 'declared']\\` format when they differ.\n\t *  - The reason why this API and \\`outputs\\` API is not the same is that \\`NgOnChanges\\` has\n\t *    inconsistent behavior in that it uses declared names rather than minified or public. For\n\t *    this reason \\`NgOnChanges\\` will be deprecated and removed in future version and this\n\t *    API will be simplified to be consistent with \\`output\\`.\n\t */\n\tinputs?: {\n\t\t[P in keyof T]?: string | [string, string];\n\t};\n\t/**\n\t * A map of output names.\n\t *\n\t * The format is in: \\`{[actualPropertyName: string]:string}\\`.\n\t *\n\t * Which the minifier may translate to: \\`{[minifiedPropertyName: string]:string}\\`.\n\t *\n\t * This allows the render to re-construct the minified and non-minified names\n\t * of properties.\n\t */\n\toutputs?: {\n\t\t[P in keyof T]?: string;\n\t};\n\t/**\n\t * Function executed by the parent template to allow child directive to apply host bindings.\n\t */\n\thostBindings?: HostBindingsFunction<T>;\n\t/**\n\t * The number of bindings in this directive \\`hostBindings\\` (including pure fn bindings).\n\t *\n\t * Used to calculate the length of the component's LView array, so we\n\t * can pre-fill the array and set the host binding start index.\n\t */\n\thostVars?: number;\n\t/**\n\t * Assign static attribute values to a host element.\n\t *\n\t * This property will assign static attribute values as well as class and style\n\t * values to a host element. Since attribute values can consist of different types of values, the\n\t * \\`hostAttrs\\` array must include the values in the following format:\n\t *\n\t * attrs = [\n\t *   // static attributes (like \\`title\\`, \\`name\\`, \\`id\\`...)\n\t *   attr1, value1, attr2, value,\n\t *\n\t *   // a single namespace value (like \\`x:id\\`)\n\t *   NAMESPACE_MARKER, namespaceUri1, name1, value1,\n\t *\n\t *   // another single namespace value (like \\`x:name\\`)\n\t *   NAMESPACE_MARKER, namespaceUri2, name2, value2,\n\t *\n\t *   // a series of CSS classes that will be applied to the element (no spaces)\n\t *   CLASSES_MARKER, class1, class2, class3,\n\t *\n\t *   // a series of CSS styles (property + value) that will be applied to the element\n\t *   STYLES_MARKER, prop1, value1, prop2, value2\n\t * ]\n\t *\n\t * All non-class and non-style attributes must be defined at the start of the list\n\t * first before all class and style values are set. When there is a change in value\n\t * type (like when classes and styles are introduced) a marker must be used to separate\n\t * the entries. The marker values themselves are set via entries found in the\n\t * [AttributeMarker] enum.\n\t */\n\thostAttrs?: TAttributes;\n\t/**\n\t * Function to create instances of content queries associated with a given directive.\n\t */\n\tcontentQueries?: ContentQueriesFunction<T>;\n\t/**\n\t * Defines the name that can be used in the template to assign this directive to a variable.\n\t *\n\t * See: {@link Directive.exportAs}\n\t */\n\texportAs?: string[];\n\t/**\n\t * Template function use for rendering DOM.\n\t *\n\t * This function has following structure.\n\t *\n\t * \\`\\`\\`\n\t * function Template<T>(ctx:T, creationMode: boolean) {\n\t *   if (creationMode) {\n\t *     // Contains creation mode instructions.\n\t *   }\n\t *   // Contains binding update instructions\n\t * }\n\t * \\`\\`\\`\n\t *\n\t * Common instructions are:\n\t * Creation mode instructions:\n\t *  - \\`elementStart\\`, \\`elementEnd\\`\n\t *  - \\`text\\`\n\t *  - \\`container\\`\n\t *  - \\`listener\\`\n\t *\n\t * Binding update instructions:\n\t * - \\`bind\\`\n\t * - \\`elementAttribute\\`\n\t * - \\`elementProperty\\`\n\t * - \\`elementClass\\`\n\t * - \\`elementStyle\\`\n\t *\n\t */\n\ttemplate: ComponentTemplate<T>;\n\t/**\n\t * Constants for the nodes in the component's view.\n\t * Includes attribute arrays, local definition arrays etc.\n\t */\n\tconsts?: TConstantsOrFactory;\n\t/**\n\t * An array of \\`ngContent[selector]\\` values that were found in the template.\n\t */\n\tngContentSelectors?: string[];\n\t/**\n\t * Additional set of instructions specific to view query processing. This could be seen as a\n\t * set of instruction to be inserted into the template function.\n\t *\n\t * Query-related instructions need to be pulled out to a specific function as a timing of\n\t * execution is different as compared to all other instructions (after change detection hooks but\n\t * before view hooks).\n\t */\n\tviewQuery?: ViewQueriesFunction<T> | null;\n\t/**\n\t * A list of optional features to apply.\n\t *\n\t * See: {@link NgOnChangesFeature}, {@link ProvidersFeature}\n\t */\n\tfeatures?: ComponentDefFeature[];\n\t/**\n\t * Defines template and style encapsulation options available for Component's {@link Component}.\n\t */\n\tencapsulation?: ViewEncapsulation;\n\t/**\n\t * Defines arbitrary developer-defined data to be stored on a renderer instance.\n\t * This is useful for renderers that delegate to other renderers.\n\t *\n\t * see: animation\n\t */\n\tdata?: {\n\t\t[kind: string]: any;\n\t};\n\t/**\n\t * A set of styles that the component needs to be present for component to render correctly.\n\t */\n\tstyles?: string[];\n\t/**\n\t * The strategy that the default change detector uses to detect changes.\n\t * When set, takes effect the next time change detection is triggered.\n\t */\n\tchangeDetection?: ChangeDetectionStrategy;\n\t/**\n\t * Registry of directives, components, and pipes that may be found in this component's view.\n\t *\n\t * This property is either an array of types or a function that returns the array of types. This\n\t * function may be necessary to support forward declarations.\n\t */\n\tdependencies?: TypeOrFactory<DependencyTypeList>;\n\t/**\n\t * The set of schemas that declare elements to be allowed in the component's template.\n\t */\n\tschemas?: SchemaMetadata[] | null;\n\t/**\n\t * Whether this directive/component is standalone.\n\t */\n\tstandalone?: boolean;\n}): unknown;\n\n/**\n * Create a directive definition object.\n *\n * # Example\n * \\`\\`\\`ts\n * class MyDirective {\n *   // Generated by Angular Template Compiler\n *   // [Symbol] syntax will not be supported by TypeScript until v2.7\n *   static ɵdir = ɵɵdefineDirective({\n *     ...\n *   });\n * }\n * \\`\\`\\`\n *\n * @codeGenApi\n */\nexport declare const ɵɵdefineDirective: <T>(directiveDefinition: {\n\t/**\n\t * Directive type, needed to configure the injector.\n\t */\n\ttype: Type<T>;\n\t/** The selectors that will be used to match nodes to this directive. */\n\tselectors?: ɵCssSelectorList | undefined;\n\t/**\n\t * A map of input names.\n\t *\n\t * The format is in: \\`{[actualPropertyName: string]:(string|[string, string])}\\`.\n\t *\n\t * Given:\n\t * \\`\\`\\`\n\t * class MyComponent {\n\t *   @Input()\n\t *   publicInput1: string;\n\t *\n\t *   @Input('publicInput2')\n\t *   declaredInput2: string;\n\t * }\n\t * \\`\\`\\`\n\t *\n\t * is described as:\n\t * \\`\\`\\`\n\t * {\n\t *   publicInput1: 'publicInput1',\n\t *   declaredInput2: ['declaredInput2', 'publicInput2'],\n\t * }\n\t * \\`\\`\\`\n\t *\n\t * Which the minifier may translate to:\n\t * \\`\\`\\`\n\t * {\n\t *   minifiedPublicInput1: 'publicInput1',\n\t *   minifiedDeclaredInput2: [ 'publicInput2', 'declaredInput2'],\n\t * }\n\t * \\`\\`\\`\n\t *\n\t * This allows the render to re-construct the minified, public, and declared names\n\t * of properties.\n\t *\n\t * NOTE:\n\t *  - Because declared and public name are usually same we only generate the array\n\t *    \\`['declared', 'public']\\` format when they differ.\n\t *  - The reason why this API and \\`outputs\\` API is not the same is that \\`NgOnChanges\\` has\n\t *    inconsistent behavior in that it uses declared names rather than minified or public. For\n\t *    this reason \\`NgOnChanges\\` will be deprecated and removed in future version and this\n\t *    API will be simplified to be consistent with \\`output\\`.\n\t */\n\tinputs?: { [P in keyof T]?: string | [string, string] | undefined; } | undefined;\n\t/**\n\t * A map of output names.\n\t *\n\t * The format is in: \\`{[actualPropertyName: string]:string}\\`.\n\t *\n\t * Which the minifier may translate to: \\`{[minifiedPropertyName: string]:string}\\`.\n\t *\n\t * This allows the render to re-construct the minified and non-minified names\n\t * of properties.\n\t */\n\toutputs?: { [P_1 in keyof T]?: string | undefined; } | undefined;\n\t/**\n\t * A list of optional features to apply.\n\t *\n\t * See: {@link NgOnChangesFeature}, {@link ProvidersFeature}, {@link InheritDefinitionFeature}\n\t */\n\tfeatures?: DirectiveDefFeature[] | undefined;\n\t/**\n\t * Function executed by the parent template to allow child directive to apply host bindings.\n\t */\n\thostBindings?: HostBindingsFunction<T> | undefined;\n\t/**\n\t * The number of bindings in this directive \\`hostBindings\\` (including pure fn bindings).\n\t *\n\t * Used to calculate the length of the component's LView array, so we\n\t * can pre-fill the array and set the host binding start index.\n\t */\n\thostVars?: number | undefined;\n\t/**\n\t * Assign static attribute values to a host element.\n\t *\n\t * This property will assign static attribute values as well as class and style\n\t * values to a host element. Since attribute values can consist of different types of values,\n\t * the \\`hostAttrs\\` array must include the values in the following format:\n\t *\n\t * attrs = [\n\t *   // static attributes (like \\`title\\`, \\`name\\`, \\`id\\`...)\n\t *   attr1, value1, attr2, value,\n\t *\n\t *   // a single namespace value (like \\`x:id\\`)\n\t *   NAMESPACE_MARKER, namespaceUri1, name1, value1,\n\t *\n\t *   // another single namespace value (like \\`x:name\\`)\n\t *   NAMESPACE_MARKER, namespaceUri2, name2, value2,\n\t *\n\t *   // a series of CSS classes that will be applied to the element (no spaces)\n\t *   CLASSES_MARKER, class1, class2, class3,\n\t *\n\t *   // a series of CSS styles (property + value) that will be applied to the element\n\t *   STYLES_MARKER, prop1, value1, prop2, value2\n\t * ]\n\t *\n\t * All non-class and non-style attributes must be defined at the start of the list\n\t * first before all class and style values are set. When there is a change in value\n\t * type (like when classes and styles are introduced) a marker must be used to separate\n\t * the entries. The marker values themselves are set via entries found in the\n\t * [AttributeMarker] enum.\n\t */\n\thostAttrs?: TAttributes | undefined;\n\t/**\n\t * Function to create instances of content queries associated with a given directive.\n\t */\n\tcontentQueries?: ContentQueriesFunction<T> | undefined;\n\t/**\n\t * Additional set of instructions specific to view query processing. This could be seen as a\n\t * set of instructions to be inserted into the template function.\n\t */\n\tviewQuery?: ViewQueriesFunction<T> | null | undefined;\n\t/**\n\t * Defines the name that can be used in the template to assign this directive to a variable.\n\t *\n\t * See: {@link Directive.exportAs}\n\t */\n\texportAs?: string[] | undefined;\n}) => never;\n\n/**\n * Construct an injectable definition which defines how a token will be constructed by the DI\n * system, and in which injectors (if any) it will be available.\n *\n * This should be assigned to a static \\`ɵprov\\` field on a type, which will then be an\n * \\`InjectableType\\`.\n *\n * Options:\n * * \\`providedIn\\` determines which injectors will include the injectable, by either associating it\n *   with an \\`@NgModule\\` or other \\`InjectorType\\`, or by specifying that this injectable should be\n *   provided in the \\`'root'\\` injector, which will be the application-level injector in most apps.\n * * \\`factory\\` gives the zero argument function which will create an instance of the injectable.\n *   The factory can call \\`inject\\` to access the \\`Injector\\` and request injection of dependencies.\n *\n * @codeGenApi\n * @publicApi This instruction has been emitted by ViewEngine for some time and is deployed to npm.\n */\nexport declare function ɵɵdefineInjectable<T>(opts: {\n\ttoken: unknown;\n\tprovidedIn?: Type<any> | 'root' | 'platform' | 'any' | 'environment' | null;\n\tfactory: () => T;\n}): unknown;\n\n/**\n * Construct an \\`InjectorDef\\` which configures an injector.\n *\n * This should be assigned to a static injector def (\\`ɵinj\\`) field on a type, which will then be an\n * \\`InjectorType\\`.\n *\n * Options:\n *\n * * \\`providers\\`: an optional array of providers to add to the injector. Each provider must\n *   either have a factory or point to a type which has a \\`ɵprov\\` static property (the\n *   type must be an \\`InjectableType\\`).\n * * \\`imports\\`: an optional array of imports of other \\`InjectorType\\`s or \\`InjectorTypeWithModule\\`s\n *   whose providers will also be added to the injector. Locally provided types will override\n *   providers from imports.\n *\n * @codeGenApi\n */\nexport declare function ɵɵdefineInjector(options: {\n\tproviders?: any[];\n\timports?: any[];\n}): unknown;\n\n/**\n * @codeGenApi\n */\nexport declare function ɵɵdefineNgModule<T>(def: {\n\t/** Token representing the module. Used by DI. */\n\ttype: T;\n\t/** List of components to bootstrap. */\n\tbootstrap?: Type<any>[] | (() => Type<any>[]);\n\t/** List of components, directives, and pipes declared by this module. */\n\tdeclarations?: Type<any>[] | (() => Type<any>[]);\n\t/** List of modules or \\`ModuleWithProviders\\` imported by this module. */\n\timports?: Type<any>[] | (() => Type<any>[]);\n\t/**\n\t * List of modules, \\`ModuleWithProviders\\`, components, directives, or pipes exported by this\n\t * module.\n\t */\n\texports?: Type<any>[] | (() => Type<any>[]);\n\t/** The set of schemas that declare elements to be allowed in the NgModule. */\n\tschemas?: SchemaMetadata[] | null;\n\t/** Unique ID for the module that is used with \\`getModuleFactory\\`. */\n\tid?: string | null;\n}): unknown;\n\n/**\n * Create a pipe definition object.\n *\n * # Example\n * \\`\\`\\`\n * class MyPipe implements PipeTransform {\n *   // Generated by Angular Template Compiler\n *   static ɵpipe = definePipe({\n *     ...\n *   });\n * }\n * \\`\\`\\`\n * @param pipeDef Pipe definition generated by the compiler\n *\n * @codeGenApi\n */\nexport declare function ɵɵdefinePipe<T>(pipeDef: {\n\t/** Name of the pipe. Used for matching pipes in template to pipe defs. */\n\tname: string;\n\t/** Pipe class reference. Needed to extract pipe lifecycle hooks. */\n\ttype: Type<T>;\n\t/** Whether the pipe is pure. */\n\tpure?: boolean;\n\t/**\n\t * Whether the pipe is standalone.\n\t */\n\tstandalone?: boolean;\n}): unknown;\n\n\n/**\n * @publicApi\n */\nexport declare type ɵɵDirectiveDeclaration<T, Selector extends string, ExportAs extends string[], InputMap extends {\n\t[key: string]: string;\n}, OutputMap extends {\n\t[key: string]: string;\n}, QueryFields extends string[], NgContentSelectors extends never = never, IsStandalone extends boolean = false> = unknown;\n\n/**\n * Returns the value associated to the given token from the injectors.\n *\n * \\`directiveInject\\` is intended to be used for directive, component and pipe factories.\n *  All other injection use \\`inject\\` which does not walk the node injector tree.\n *\n * Usage example (in factory function):\n *\n * \\`\\`\\`ts\n * class SomeDirective {\n *   constructor(directive: DirectiveA) {}\n *\n *   static ɵdir = ɵɵdefineDirective({\n *     type: SomeDirective,\n *     factory: () => new SomeDirective(ɵɵdirectiveInject(DirectiveA))\n *   });\n * }\n * \\`\\`\\`\n * @param token the type or token to inject\n * @param flags Injection flags\n * @returns the value from the injector or \\`null\\` when not found\n *\n * @codeGenApi\n */\nexport declare function ɵɵdirectiveInject<T>(token: ProviderToken<T>): T;\n\nexport declare function ɵɵdirectiveInject<T>(token: ProviderToken<T>, flags: InjectFlags): T;\n\n/**\n * Disables directive matching on element.\n *\n *  * Example:\n * \\`\\`\\`\n * <my-comp my-directive>\n *   Should match component / directive.\n * </my-comp>\n * <div ngNonBindable>\n *   <!-- ɵɵdisableBindings() -->\n *   <my-comp my-directive>\n *     Should not match component / directive because we are in ngNonBindable.\n *   </my-comp>\n *   <!-- ɵɵenableBindings() -->\n * </div>\n * \\`\\`\\`\n *\n * @codeGenApi\n */\nexport declare function ɵɵdisableBindings(): void;\n\n/**\n * Creates an empty element using {@link elementStart} and {@link elementEnd}\n *\n * @param index Index of the element in the data array\n * @param name Name of the DOM Node\n * @param attrsIndex Index of the element's attributes in the \\`consts\\` array.\n * @param localRefsIndex Index of the element's local references in the \\`consts\\` array.\n * @returns This function returns itself so that it may be chained.\n *\n * @codeGenApi\n */\nexport declare function ɵɵelement(index: number, name: string, attrsIndex?: number | null, localRefsIndex?: number): typeof ɵɵelement;\n\n/**\n * Creates an empty logical container using {@link elementContainerStart}\n * and {@link elementContainerEnd}\n *\n * @param index Index of the element in the LView array\n * @param attrsIndex Index of the container attributes in the \\`consts\\` array.\n * @param localRefsIndex Index of the container's local references in the \\`consts\\` array.\n * @returns This function returns itself so that it may be chained.\n *\n * @codeGenApi\n */\nexport declare function ɵɵelementContainer(index: number, attrsIndex?: number | null, localRefsIndex?: number): typeof ɵɵelementContainer;\n\n/**\n * Mark the end of the <ng-container>.\n * @returns This function returns itself so that it may be chained.\n *\n * @codeGenApi\n */\nexport declare function ɵɵelementContainerEnd(): typeof ɵɵelementContainerEnd;\n\n/**\n * Creates a logical container for other nodes (<ng-container>) backed by a comment node in the DOM.\n * The instruction must later be followed by \\`elementContainerEnd()\\` call.\n *\n * @param index Index of the element in the LView array\n * @param attrsIndex Index of the container attributes in the \\`consts\\` array.\n * @param localRefsIndex Index of the container's local references in the \\`consts\\` array.\n * @returns This function returns itself so that it may be chained.\n *\n * Even if this instruction accepts a set of attributes no actual attribute values are propagated to\n * the DOM (as a comment node can't have attributes). Attributes are here only for directive\n * matching purposes and setting initial inputs of directives.\n *\n * @codeGenApi\n */\nexport declare function ɵɵelementContainerStart(index: number, attrsIndex?: number | null, localRefsIndex?: number): typeof ɵɵelementContainerStart;\n\n/**\n * Mark the end of the element.\n * @returns This function returns itself so that it may be chained.\n *\n * @codeGenApi\n */\nexport declare function ɵɵelementEnd(): typeof ɵɵelementEnd;\n\n\n/**\n * Create DOM element. The instruction must later be followed by \\`elementEnd()\\` call.\n *\n * @param index Index of the element in the LView array\n * @param name Name of the DOM Node\n * @param attrsIndex Index of the element's attributes in the \\`consts\\` array.\n * @param localRefsIndex Index of the element's local references in the \\`consts\\` array.\n * @returns This function returns itself so that it may be chained.\n *\n * Attributes and localRefs are passed as an array of strings where elements with an even index\n * hold an attribute name and elements with an odd index hold an attribute value, ex.:\n * ['id', 'warning5', 'class', 'alert']\n *\n * @codeGenApi\n */\nexport declare function ɵɵelementStart(index: number, name: string, attrsIndex?: number | null, localRefsIndex?: number): typeof ɵɵelementStart;\n\n/**\n * Enables directive matching on elements.\n *\n *  * Example:\n * \\`\\`\\`\n * <my-comp my-directive>\n *   Should match component / directive.\n * </my-comp>\n * <div ngNonBindable>\n *   <!-- ɵɵdisableBindings() -->\n *   <my-comp my-directive>\n *     Should not match component / directive because we are in ngNonBindable.\n *   </my-comp>\n *   <!-- ɵɵenableBindings() -->\n * </div>\n * \\`\\`\\`\n *\n * @codeGenApi\n */\nexport declare function ɵɵenableBindings(): void;\n\n/**\n * @publicApi\n */\nexport declare type ɵɵFactoryDeclaration<T, CtorDependencies extends CtorDependency[]> = unknown;\n\nexport declare enum ɵɵFactoryTarget {\n\tDirective = 0,\n\tComponent = 1,\n\tInjectable = 2,\n\tPipe = 3,\n\tNgModule = 4\n}\n\n/**\n * Returns the current OpaqueViewState instance.\n *\n * Used in conjunction with the restoreView() instruction to save a snapshot\n * of the current view and restore it when listeners are invoked. This allows\n * walking the declaration view tree in listeners to get vars from parent views.\n *\n * @codeGenApi\n */\nexport declare function ɵɵgetCurrentView(): OpaqueViewState;\n\n/**\n * @codeGenApi\n */\nexport declare function ɵɵgetInheritedFactory<T>(type: Type<any>): (type: Type<T>) => T;\n\n/**\n * Update a property on a host element. Only applies to native node properties, not inputs.\n *\n * Operates on the element selected by index via the {@link select} instruction.\n *\n * @param propName Name of property. Because it is going to DOM, this is not subject to\n *        renaming as part of minification.\n * @param value New value to write.\n * @param sanitizer An optional function used to sanitize the value.\n * @returns This function returns itself so that it may be chained\n * (e.g. \\`property('name', ctx.name)('title', ctx.title)\\`)\n *\n * @codeGenApi\n */\nexport declare function ɵɵhostProperty<T>(propName: string, value: T, sanitizer?: SanitizerFn | null): typeof ɵɵhostProperty;\n\n/**\n *\n * Use this instruction to create a translation block that doesn't contain any placeholder.\n * It calls both {@link i18nStart} and {@link i18nEnd} in one instruction.\n *\n * The translation \\`message\\` is the value which is locale specific. The translation string may\n * contain placeholders which associate inner elements and sub-templates within the translation.\n *\n * The translation \\`message\\` placeholders are:\n * - \\`�{index}(:{block})�\\`: *Binding Placeholder*: Marks a location where an expression will be\n *   interpolated into. The placeholder \\`index\\` points to the expression binding index. An optional\n *   \\`block\\` that matches the sub-template in which it was declared.\n * - \\`�#{index}(:{block})�\\`/\\`�/#{index}(:{block})�\\`: *Element Placeholder*:  Marks the beginning\n *   and end of DOM element that were embedded in the original translation block. The placeholder\n *   \\`index\\` points to the element index in the template instructions set. An optional \\`block\\` that\n *   matches the sub-template in which it was declared.\n * - \\`�*{index}:{block}�\\`/\\`�/*{index}:{block}�\\`: *Sub-template Placeholder*: Sub-templates must be\n *   split up and translated separately in each angular template function. The \\`index\\` points to the\n *   \\`template\\` instruction index. A \\`block\\` that matches the sub-template in which it was declared.\n *\n * @param index A unique index of the translation in the static block.\n * @param messageIndex An index of the translation message from the \\`def.consts\\` array.\n * @param subTemplateIndex Optional sub-template index in the \\`message\\`.\n *\n * @codeGenApi\n */\nexport declare function ɵɵi18n(index: number, messageIndex: number, subTemplateIndex?: number): void;\n\n/**\n * Updates a translation block or an i18n attribute when the bindings have changed.\n *\n * @param index Index of either {@link i18nStart} (translation block) or {@link i18nAttributes}\n * (i18n attribute) on which it should update the content.\n *\n * @codeGenApi\n */\nexport declare function ɵɵi18nApply(index: number): void;\n\n/**\n * Marks a list of attributes as translatable.\n *\n * @param index A unique index in the static block\n * @param values\n *\n * @codeGenApi\n */\nexport declare function ɵɵi18nAttributes(index: number, attrsIndex: number): void;\n\n/**\n * Translates a translation block marked by \\`i18nStart\\` and \\`i18nEnd\\`. It inserts the text/ICU nodes\n * into the render tree, moves the placeholder nodes and removes the deleted nodes.\n *\n * @codeGenApi\n */\nexport declare function ɵɵi18nEnd(): void;\n\n/**\n * Stores the values of the bindings during each update cycle in order to determine if we need to\n * update the translated nodes.\n *\n * @param value The binding's value\n * @returns This function returns itself so that it may be chained\n * (e.g. \\`i18nExp(ctx.name)(ctx.title)\\`)\n *\n * @codeGenApi\n */\nexport declare function ɵɵi18nExp<T>(value: T): typeof ɵɵi18nExp;\n\n/**\n * Handles message string post-processing for internationalization.\n *\n * Handles message string post-processing by transforming it from intermediate\n * format (that might contain some markers that we need to replace) to the final\n * form, consumable by i18nStart instruction. Post processing steps include:\n *\n * 1. Resolve all multi-value cases (like [�*1:1��#2:1�|�#4:1�|�5�])\n * 2. Replace all ICU vars (like \"VAR_PLURAL\")\n * 3. Replace all placeholders used inside ICUs in a form of {PLACEHOLDER}\n * 4. Replace all ICU references with corresponding values (like �ICU_EXP_ICU_1�)\n *    in case multiple ICUs have the same placeholder name\n *\n * @param message Raw translation string for post processing\n * @param replacements Set of replacements that should be applied\n *\n * @returns Transformed string that can be consumed by i18nStart instruction\n *\n * @codeGenApi\n */\nexport declare function ɵɵi18nPostprocess(message: string, replacements?: {\n\t[key: string]: (string | string[]);\n}): string;\n\n/**\n * Marks a block of text as translatable.\n *\n * The instructions \\`i18nStart\\` and \\`i18nEnd\\` mark the translation block in the template.\n * The translation \\`message\\` is the value which is locale specific. The translation string may\n * contain placeholders which associate inner elements and sub-templates within the translation.\n *\n * The translation \\`message\\` placeholders are:\n * - \\`�{index}(:{block})�\\`: *Binding Placeholder*: Marks a location where an expression will be\n *   interpolated into. The placeholder \\`index\\` points to the expression binding index. An optional\n *   \\`block\\` that matches the sub-template in which it was declared.\n * - \\`�#{index}(:{block})�\\`/\\`�/#{index}(:{block})�\\`: *Element Placeholder*:  Marks the beginning\n *   and end of DOM element that were embedded in the original translation block. The placeholder\n *   \\`index\\` points to the element index in the template instructions set. An optional \\`block\\` that\n *   matches the sub-template in which it was declared.\n * - \\`�*{index}:{block}�\\`/\\`�/*{index}:{block}�\\`: *Sub-template Placeholder*: Sub-templates must be\n *   split up and translated separately in each angular template function. The \\`index\\` points to the\n *   \\`template\\` instruction index. A \\`block\\` that matches the sub-template in which it was declared.\n *\n * @param index A unique index of the translation in the static block.\n * @param messageIndex An index of the translation message from the \\`def.consts\\` array.\n * @param subTemplateIndex Optional sub-template index in the \\`message\\`.\n *\n * @codeGenApi\n */\nexport declare function ɵɵi18nStart(index: number, messageIndex: number, subTemplateIndex?: number): void;\n\n/**\n * Merges the definition from a super class to a sub class.\n * @param definition The definition that is a SubClass of another directive of component\n *\n * @codeGenApi\n */\nexport declare function ɵɵInheritDefinitionFeature(definition: ɵDirectiveDef<any> | ɵComponentDef<any>): void;\n\n/**\n * Generated instruction: injects a token from the currently active injector.\n *\n * (Additional documentation moved to \\`inject\\`, as it is the public API, and an alias for this\n * instruction)\n *\n * @see inject\n * @codeGenApi\n * @publicApi This instruction has been emitted by ViewEngine for some time and is deployed to npm.\n */\nexport declare function ɵɵinject<T>(token: ProviderToken<T>): T;\n\nexport declare function ɵɵinject<T>(token: ProviderToken<T>, flags?: InjectFlags): T | null;\n\n/**\n * Information about how a type or \\`InjectionToken\\` interfaces with the DI system.\n *\n * At a minimum, this includes a \\`factory\\` which defines how to create the given type \\`T\\`, possibly\n * requesting injection of other types if necessary.\n *\n * Optionally, a \\`providedIn\\` parameter specifies that the given type belongs to a particular\n * \\`Injector\\`, \\`NgModule\\`, or a special scope (e.g. \\`'root'\\`). A value of \\`null\\` indicates\n * that the injectable does not belong to any scope.\n *\n * @codeGenApi\n * @publicApi The ViewEngine compiler emits code with this type for injectables. This code is\n *   deployed to npm, and should be treated as public api.\n \n */\nexport declare interface ɵɵInjectableDeclaration<T> {\n\t/**\n\t * Specifies that the given type belongs to a particular injector:\n\t * - \\`InjectorType\\` such as \\`NgModule\\`,\n\t * - \\`'root'\\` the root injector\n\t * - \\`'any'\\` all injectors.\n\t * - \\`null\\`, does not belong to any injector. Must be explicitly listed in the injector\n\t *   \\`providers\\`.\n\t */\n\tprovidedIn: InjectorType<any> | 'root' | 'platform' | 'any' | 'environment' | null;\n\t/**\n\t * The token to which this definition belongs.\n\t *\n\t * Note that this may not be the same as the type that the \\`factory\\` will create.\n\t */\n\ttoken: unknown;\n\t/**\n\t * Factory method to execute to create an instance of the injectable.\n\t */\n\tfactory: (t?: Type<any>) => T;\n\t/**\n\t * In a case of no explicit injector, a location where the instance of the injectable is stored.\n\t */\n\tvalue: T | undefined;\n}\n\n/**\n * Facade for the attribute injection from DI.\n *\n * @codeGenApi\n */\nexport declare function ɵɵinjectAttribute(attrNameToInject: string): string | null;\n\n/**\n * @publicApi\n */\nexport declare type ɵɵInjectorDeclaration<T> = unknown;\n\n/**\n * Information about the providers to be included in an \\`Injector\\` as well as how the given type\n * which carries the information should be created by the DI system.\n *\n * An \\`InjectorDef\\` can import other types which have \\`InjectorDefs\\`, forming a deep nested\n * structure of providers with a defined priority (identically to how \\`NgModule\\`s also have\n * an import/dependency structure).\n *\n * NOTE: This is a private type and should not be exported\n *\n * @codeGenApi\n */\nexport declare interface ɵɵInjectorDef<T> {\n\tproviders: (Type<any> | ValueProvider | ExistingProvider | FactoryProvider | ConstructorProvider | StaticClassProvider | ClassProvider | any[])[];\n\timports: (InjectorType<any> | InjectorTypeWithProviders<any>)[];\n}\n\n/**\n * Throws an error indicating that a factory function could not be generated by the compiler for a\n * particular class.\n *\n * This instruction allows the actual error message to be optimized away when ngDevMode is turned\n * off, saving bytes of generated code while still providing a good experience in dev mode.\n *\n * The name of the class is not mentioned here, but will be in the generated factory function name\n * and thus in the stack trace.\n *\n * @codeGenApi\n */\nexport declare function ɵɵinvalidFactory(): never;\n\n/**\n * Throws an error indicating that a factory function could not be generated by the compiler for a\n * particular class.\n *\n * The name of the class is not mentioned here, but will be in the generated factory function name\n * and thus in the stack trace.\n *\n * @codeGenApi\n */\nexport declare function ɵɵinvalidFactoryDep(index: number): never;\n\n/**\n * Adds an event listener to the current node.\n *\n * If an output exists on one of the node's directives, it also subscribes to the output\n * and saves the subscription for later cleanup.\n *\n * @param eventName Name of the event\n * @param listenerFn The function to be called when event emits\n * @param useCapture Whether or not to use capture in event listener\n * @param eventTargetResolver Function that returns global target information in case this listener\n * should be attached to a global object like window, document or body\n *\n * @codeGenApi\n */\nexport declare function ɵɵlistener(eventName: string, listenerFn: (e?: any) => any, useCapture?: boolean, eventTargetResolver?: GlobalTargetResolver): typeof ɵɵlistener;\n\n/**\n * Loads a QueryList corresponding to the current view or content query.\n *\n * @codeGenApi\n */\nexport declare function ɵɵloadQuery<T>(): QueryList<T>;\n\n/**\n * Sets the namespace used to create elements to \\`null\\`, which forces element creation to use\n * \\`createElement\\` rather than \\`createElementNS\\`.\n *\n * @codeGenApi\n */\nexport declare function ɵɵnamespaceHTML(): void;\n\n/**\n * Sets the namespace used to create elements to \\`'http://www.w3.org/1998/MathML/'\\` in global state.\n *\n * @codeGenApi\n */\nexport declare function ɵɵnamespaceMathML(): void;\n\n/**\n * Sets the namespace used to create elements to \\`'http://www.w3.org/2000/svg'\\` in global state.\n *\n * @codeGenApi\n */\nexport declare function ɵɵnamespaceSVG(): void;\n\n/**\n * Retrieves a context at the level specified and saves it as the global, contextViewData.\n * Will get the next level up if level is not specified.\n *\n * This is used to save contexts of parent views so they can be bound in embedded views, or\n * in conjunction with reference() to bind a ref from a parent view.\n *\n * @param level The relative level of the view from which to grab context compared to contextVewData\n * @returns context\n *\n * @codeGenApi\n */\nexport declare function ɵɵnextContext<T = any>(level?: number): T;\n\n/**\n * Evaluates the class metadata declaration.\n *\n * @codeGenApi\n */\nexport declare function ɵɵngDeclareClassMetadata(decl: {\n\ttype: Type<any>;\n\tdecorators: any[];\n\tctorParameters?: () => any[];\n\tpropDecorators?: {\n\t\t[field: string]: any;\n\t};\n}): void;\n\n/**\n * Compiles a partial component declaration object into a full component definition object.\n *\n * @codeGenApi\n */\nexport declare function ɵɵngDeclareComponent(decl: R3DeclareComponentFacade): unknown;\n\n/**\n * Compiles a partial directive declaration object into a full directive definition object.\n *\n * @codeGenApi\n */\nexport declare function ɵɵngDeclareDirective(decl: R3DeclareDirectiveFacade): unknown;\n\n/**\n * Compiles a partial pipe declaration object into a full pipe definition object.\n *\n * @codeGenApi\n */\nexport declare function ɵɵngDeclareFactory(decl: R3DeclareFactoryFacade): unknown;\n\n/**\n * Compiles a partial injectable declaration object into a full injectable definition object.\n *\n * @codeGenApi\n */\nexport declare function ɵɵngDeclareInjectable(decl: R3DeclareInjectableFacade): unknown;\n\n/**\n * Compiles a partial injector declaration object into a full injector definition object.\n *\n * @codeGenApi\n */\nexport declare function ɵɵngDeclareInjector(decl: R3DeclareInjectorFacade): unknown;\n\n/**\n * Compiles a partial NgModule declaration object into a full NgModule definition object.\n *\n * @codeGenApi\n */\nexport declare function ɵɵngDeclareNgModule(decl: R3DeclareNgModuleFacade): unknown;\n\n/**\n * Compiles a partial pipe declaration object into a full pipe definition object.\n *\n * @codeGenApi\n */\nexport declare function ɵɵngDeclarePipe(decl: R3DeclarePipeFacade): unknown;\n\n/**\n * @publicApi\n */\nexport declare type ɵɵNgModuleDeclaration<T, Declarations, Imports, Exports> = unknown;\n\n/**\n * The NgOnChangesFeature decorates a component with support for the ngOnChanges\n * lifecycle hook, so it should be included in any component that implements\n * that hook.\n *\n * If the component or directive uses inheritance, the NgOnChangesFeature MUST\n * be included as a feature AFTER {@link InheritDefinitionFeature}, otherwise\n * inherited properties will not be propagated to the ngOnChanges lifecycle\n * hook.\n *\n * Example usage:\n *\n * \\`\\`\\`\n * static ɵcmp = defineComponent({\n *   ...\n *   inputs: {name: 'publicName'},\n *   features: [NgOnChangesFeature]\n * });\n * \\`\\`\\`\n *\n * @codeGenApi\n */\nexport declare function ɵɵNgOnChangesFeature<T>(): DirectiveDefFeature;\n\n\n/**\n * Create a pipe.\n *\n * @param index Pipe index where the pipe will be stored.\n * @param pipeName The name of the pipe\n * @returns T the instance of the pipe.\n *\n * @codeGenApi\n */\nexport declare function ɵɵpipe(index: number, pipeName: string): any;\n\n/**\n * Invokes a pipe with 1 arguments.\n *\n * This instruction acts as a guard to {@link PipeTransform#transform} invoking\n * the pipe only when an input to the pipe changes.\n *\n * @param index Pipe index where the pipe was stored on creation.\n * @param slotOffset the offset in the reserved slot space\n * @param v1 1st argument to {@link PipeTransform#transform}.\n *\n * @codeGenApi\n */\nexport declare function ɵɵpipeBind1(index: number, slotOffset: number, v1: any): any;\n\n/**\n * Invokes a pipe with 2 arguments.\n *\n * This instruction acts as a guard to {@link PipeTransform#transform} invoking\n * the pipe only when an input to the pipe changes.\n *\n * @param index Pipe index where the pipe was stored on creation.\n * @param slotOffset the offset in the reserved slot space\n * @param v1 1st argument to {@link PipeTransform#transform}.\n * @param v2 2nd argument to {@link PipeTransform#transform}.\n *\n * @codeGenApi\n */\nexport declare function ɵɵpipeBind2(index: number, slotOffset: number, v1: any, v2: any): any;\n\n/**\n * Invokes a pipe with 3 arguments.\n *\n * This instruction acts as a guard to {@link PipeTransform#transform} invoking\n * the pipe only when an input to the pipe changes.\n *\n * @param index Pipe index where the pipe was stored on creation.\n * @param slotOffset the offset in the reserved slot space\n * @param v1 1st argument to {@link PipeTransform#transform}.\n * @param v2 2nd argument to {@link PipeTransform#transform}.\n * @param v3 4rd argument to {@link PipeTransform#transform}.\n *\n * @codeGenApi\n */\nexport declare function ɵɵpipeBind3(index: number, slotOffset: number, v1: any, v2: any, v3: any): any;\n\n/**\n * Invokes a pipe with 4 arguments.\n *\n * This instruction acts as a guard to {@link PipeTransform#transform} invoking\n * the pipe only when an input to the pipe changes.\n *\n * @param index Pipe index where the pipe was stored on creation.\n * @param slotOffset the offset in the reserved slot space\n * @param v1 1st argument to {@link PipeTransform#transform}.\n * @param v2 2nd argument to {@link PipeTransform#transform}.\n * @param v3 3rd argument to {@link PipeTransform#transform}.\n * @param v4 4th argument to {@link PipeTransform#transform}.\n *\n * @codeGenApi\n */\nexport declare function ɵɵpipeBind4(index: number, slotOffset: number, v1: any, v2: any, v3: any, v4: any): any;\n\n/**\n * Invokes a pipe with variable number of arguments.\n *\n * This instruction acts as a guard to {@link PipeTransform#transform} invoking\n * the pipe only when an input to the pipe changes.\n *\n * @param index Pipe index where the pipe was stored on creation.\n * @param slotOffset the offset in the reserved slot space\n * @param values Array of arguments to pass to {@link PipeTransform#transform} method.\n *\n * @codeGenApi\n */\nexport declare function ɵɵpipeBindV(index: number, slotOffset: number, values: [any, ...any[]]): any;\n\n/**\n * @publicApi\n */\nexport declare type ɵɵPipeDeclaration<T, Name extends string, IsStandalone extends boolean = false> = unknown;\n\n/**\n * Inserts previously re-distributed projected nodes. This instruction must be preceded by a call\n * to the projectionDef instruction.\n *\n * @param nodeIndex\n * @param selectorIndex:\n *        - 0 when the selector is \\`*\\` (or unspecified as this is the default value),\n *        - 1 based index of the selector from the {@link projectionDef}\n *\n * @codeGenApi\n */\nexport declare function ɵɵprojection(nodeIndex: number, selectorIndex?: number, attrs?: TAttributes): void;\n\n/**\n * Instruction to distribute projectable nodes among <ng-content> occurrences in a given template.\n * It takes all the selectors from the entire component's template and decides where\n * each projected node belongs (it re-distributes nodes among \"buckets\" where each \"bucket\" is\n * backed by a selector).\n *\n * This function requires CSS selectors to be provided in 2 forms: parsed (by a compiler) and text,\n * un-parsed form.\n *\n * The parsed form is needed for efficient matching of a node against a given CSS selector.\n * The un-parsed, textual form is needed for support of the ngProjectAs attribute.\n *\n * Having a CSS selector in 2 different formats is not ideal, but alternatives have even more\n * drawbacks:\n * - having only a textual form would require runtime parsing of CSS selectors;\n * - we can't have only a parsed as we can't re-construct textual form from it (as entered by a\n * template author).\n *\n * @param projectionSlots? A collection of projection slots. A projection slot can be based\n *        on a parsed CSS selectors or set to the wildcard selector (\"*\") in order to match\n *        all nodes which do not match any selector. If not specified, a single wildcard\n *        selector projection slot will be defined.\n *\n * @codeGenApi\n */\nexport declare function ɵɵprojectionDef(projectionSlots?: ProjectionSlots): void;\n\n/**\n * Update a property on a selected element.\n *\n * Operates on the element selected by index via the {@link select} instruction.\n *\n * If the property name also exists as an input property on one of the element's directives,\n * the component property will be set instead of the element property. This check must\n * be conducted at runtime so child components that add new \\`@Inputs\\` don't have to be re-compiled\n *\n * @param propName Name of property. Because it is going to DOM, this is not subject to\n *        renaming as part of minification.\n * @param value New value to write.\n * @param sanitizer An optional function used to sanitize the value.\n * @returns This function returns itself so that it may be chained\n * (e.g. \\`property('name', ctx.name)('title', ctx.title)\\`)\n *\n * @codeGenApi\n */\nexport declare function ɵɵproperty<T>(propName: string, value: T, sanitizer?: SanitizerFn | null): typeof ɵɵproperty;\n\n/**\n *\n * Update an interpolated property on an element with a lone bound value\n *\n * Used when the value passed to a property has 1 interpolated value in it, an no additional text\n * surrounds that interpolated value:\n *\n * \\`\\`\\`html\n * <div title=\"{{v0}}\"></div>\n * \\`\\`\\`\n *\n * Its compiled representation is::\n *\n * \\`\\`\\`ts\n * ɵɵpropertyInterpolate('title', v0);\n * \\`\\`\\`\n *\n * If the property name also exists as an input property on one of the element's directives,\n * the component property will be set instead of the element property. This check must\n * be conducted at runtime so child components that add new \\`@Inputs\\` don't have to be re-compiled.\n *\n * @param propName The name of the property to update\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @param sanitizer An optional sanitizer function\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nexport declare function ɵɵpropertyInterpolate(propName: string, v0: any, sanitizer?: SanitizerFn): typeof ɵɵpropertyInterpolate;\n\n/**\n *\n * Update an interpolated property on an element with single bound value surrounded by text.\n *\n * Used when the value passed to a property has 1 interpolated value in it:\n *\n * \\`\\`\\`html\n * <div title=\"prefix{{v0}}suffix\"></div>\n * \\`\\`\\`\n *\n * Its compiled representation is::\n *\n * \\`\\`\\`ts\n * ɵɵpropertyInterpolate1('title', 'prefix', v0, 'suffix');\n * \\`\\`\\`\n *\n * If the property name also exists as an input property on one of the element's directives,\n * the component property will be set instead of the element property. This check must\n * be conducted at runtime so child components that add new \\`@Inputs\\` don't have to be re-compiled.\n *\n * @param propName The name of the property to update\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @param sanitizer An optional sanitizer function\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nexport declare function ɵɵpropertyInterpolate1(propName: string, prefix: string, v0: any, suffix: string, sanitizer?: SanitizerFn): typeof ɵɵpropertyInterpolate1;\n\n/**\n *\n * Update an interpolated property on an element with 2 bound values surrounded by text.\n *\n * Used when the value passed to a property has 2 interpolated values in it:\n *\n * \\`\\`\\`html\n * <div title=\"prefix{{v0}}-{{v1}}suffix\"></div>\n * \\`\\`\\`\n *\n * Its compiled representation is::\n *\n * \\`\\`\\`ts\n * ɵɵpropertyInterpolate2('title', 'prefix', v0, '-', v1, 'suffix');\n * \\`\\`\\`\n *\n * If the property name also exists as an input property on one of the element's directives,\n * the component property will be set instead of the element property. This check must\n * be conducted at runtime so child components that add new \\`@Inputs\\` don't have to be re-compiled.\n *\n * @param propName The name of the property to update\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @param sanitizer An optional sanitizer function\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nexport declare function ɵɵpropertyInterpolate2(propName: string, prefix: string, v0: any, i0: string, v1: any, suffix: string, sanitizer?: SanitizerFn): typeof ɵɵpropertyInterpolate2;\n\n/**\n *\n * Update an interpolated property on an element with 3 bound values surrounded by text.\n *\n * Used when the value passed to a property has 3 interpolated values in it:\n *\n * \\`\\`\\`html\n * <div title=\"prefix{{v0}}-{{v1}}-{{v2}}suffix\"></div>\n * \\`\\`\\`\n *\n * Its compiled representation is::\n *\n * \\`\\`\\`ts\n * ɵɵpropertyInterpolate3(\n * 'title', 'prefix', v0, '-', v1, '-', v2, 'suffix');\n * \\`\\`\\`\n *\n * If the property name also exists as an input property on one of the element's directives,\n * the component property will be set instead of the element property. This check must\n * be conducted at runtime so child components that add new \\`@Inputs\\` don't have to be re-compiled.\n *\n * @param propName The name of the property to update\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @param sanitizer An optional sanitizer function\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nexport declare function ɵɵpropertyInterpolate3(propName: string, prefix: string, v0: any, i0: string, v1: any, i1: string, v2: any, suffix: string, sanitizer?: SanitizerFn): typeof ɵɵpropertyInterpolate3;\n\n/**\n *\n * Update an interpolated property on an element with 4 bound values surrounded by text.\n *\n * Used when the value passed to a property has 4 interpolated values in it:\n *\n * \\`\\`\\`html\n * <div title=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}suffix\"></div>\n * \\`\\`\\`\n *\n * Its compiled representation is::\n *\n * \\`\\`\\`ts\n * ɵɵpropertyInterpolate4(\n * 'title', 'prefix', v0, '-', v1, '-', v2, '-', v3, 'suffix');\n * \\`\\`\\`\n *\n * If the property name also exists as an input property on one of the element's directives,\n * the component property will be set instead of the element property. This check must\n * be conducted at runtime so child components that add new \\`@Inputs\\` don't have to be re-compiled.\n *\n * @param propName The name of the property to update\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param i2 Static value used for concatenation only.\n * @param v3 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @param sanitizer An optional sanitizer function\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nexport declare function ɵɵpropertyInterpolate4(propName: string, prefix: string, v0: any, i0: string, v1: any, i1: string, v2: any, i2: string, v3: any, suffix: string, sanitizer?: SanitizerFn): typeof ɵɵpropertyInterpolate4;\n\n/**\n *\n * Update an interpolated property on an element with 5 bound values surrounded by text.\n *\n * Used when the value passed to a property has 5 interpolated values in it:\n *\n * \\`\\`\\`html\n * <div title=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}suffix\"></div>\n * \\`\\`\\`\n *\n * Its compiled representation is::\n *\n * \\`\\`\\`ts\n * ɵɵpropertyInterpolate5(\n * 'title', 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, 'suffix');\n * \\`\\`\\`\n *\n * If the property name also exists as an input property on one of the element's directives,\n * the component property will be set instead of the element property. This check must\n * be conducted at runtime so child components that add new \\`@Inputs\\` don't have to be re-compiled.\n *\n * @param propName The name of the property to update\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param i2 Static value used for concatenation only.\n * @param v3 Value checked for change.\n * @param i3 Static value used for concatenation only.\n * @param v4 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @param sanitizer An optional sanitizer function\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nexport declare function ɵɵpropertyInterpolate5(propName: string, prefix: string, v0: any, i0: string, v1: any, i1: string, v2: any, i2: string, v3: any, i3: string, v4: any, suffix: string, sanitizer?: SanitizerFn): typeof ɵɵpropertyInterpolate5;\n\n/**\n *\n * Update an interpolated property on an element with 6 bound values surrounded by text.\n *\n * Used when the value passed to a property has 6 interpolated values in it:\n *\n * \\`\\`\\`html\n * <div title=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}suffix\"></div>\n * \\`\\`\\`\n *\n * Its compiled representation is::\n *\n * \\`\\`\\`ts\n * ɵɵpropertyInterpolate6(\n *    'title', 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, 'suffix');\n * \\`\\`\\`\n *\n * If the property name also exists as an input property on one of the element's directives,\n * the component property will be set instead of the element property. This check must\n * be conducted at runtime so child components that add new \\`@Inputs\\` don't have to be re-compiled.\n *\n * @param propName The name of the property to update\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param i2 Static value used for concatenation only.\n * @param v3 Value checked for change.\n * @param i3 Static value used for concatenation only.\n * @param v4 Value checked for change.\n * @param i4 Static value used for concatenation only.\n * @param v5 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @param sanitizer An optional sanitizer function\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nexport declare function ɵɵpropertyInterpolate6(propName: string, prefix: string, v0: any, i0: string, v1: any, i1: string, v2: any, i2: string, v3: any, i3: string, v4: any, i4: string, v5: any, suffix: string, sanitizer?: SanitizerFn): typeof ɵɵpropertyInterpolate6;\n\n/**\n *\n * Update an interpolated property on an element with 7 bound values surrounded by text.\n *\n * Used when the value passed to a property has 7 interpolated values in it:\n *\n * \\`\\`\\`html\n * <div title=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}suffix\"></div>\n * \\`\\`\\`\n *\n * Its compiled representation is::\n *\n * \\`\\`\\`ts\n * ɵɵpropertyInterpolate7(\n *    'title', 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, 'suffix');\n * \\`\\`\\`\n *\n * If the property name also exists as an input property on one of the element's directives,\n * the component property will be set instead of the element property. This check must\n * be conducted at runtime so child components that add new \\`@Inputs\\` don't have to be re-compiled.\n *\n * @param propName The name of the property to update\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param i2 Static value used for concatenation only.\n * @param v3 Value checked for change.\n * @param i3 Static value used for concatenation only.\n * @param v4 Value checked for change.\n * @param i4 Static value used for concatenation only.\n * @param v5 Value checked for change.\n * @param i5 Static value used for concatenation only.\n * @param v6 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @param sanitizer An optional sanitizer function\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nexport declare function ɵɵpropertyInterpolate7(propName: string, prefix: string, v0: any, i0: string, v1: any, i1: string, v2: any, i2: string, v3: any, i3: string, v4: any, i4: string, v5: any, i5: string, v6: any, suffix: string, sanitizer?: SanitizerFn): typeof ɵɵpropertyInterpolate7;\n\n/**\n *\n * Update an interpolated property on an element with 8 bound values surrounded by text.\n *\n * Used when the value passed to a property has 8 interpolated values in it:\n *\n * \\`\\`\\`html\n * <div title=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}-{{v7}}suffix\"></div>\n * \\`\\`\\`\n *\n * Its compiled representation is::\n *\n * \\`\\`\\`ts\n * ɵɵpropertyInterpolate8(\n *  'title', 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, '-', v7, 'suffix');\n * \\`\\`\\`\n *\n * If the property name also exists as an input property on one of the element's directives,\n * the component property will be set instead of the element property. This check must\n * be conducted at runtime so child components that add new \\`@Inputs\\` don't have to be re-compiled.\n *\n * @param propName The name of the property to update\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param i2 Static value used for concatenation only.\n * @param v3 Value checked for change.\n * @param i3 Static value used for concatenation only.\n * @param v4 Value checked for change.\n * @param i4 Static value used for concatenation only.\n * @param v5 Value checked for change.\n * @param i5 Static value used for concatenation only.\n * @param v6 Value checked for change.\n * @param i6 Static value used for concatenation only.\n * @param v7 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @param sanitizer An optional sanitizer function\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nexport declare function ɵɵpropertyInterpolate8(propName: string, prefix: string, v0: any, i0: string, v1: any, i1: string, v2: any, i2: string, v3: any, i3: string, v4: any, i4: string, v5: any, i5: string, v6: any, i6: string, v7: any, suffix: string, sanitizer?: SanitizerFn): typeof ɵɵpropertyInterpolate8;\n\n/**\n * Update an interpolated property on an element with 9 or more bound values surrounded by text.\n *\n * Used when the number of interpolated values exceeds 8.\n *\n * \\`\\`\\`html\n * <div\n *  title=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}-{{v7}}-{{v8}}-{{v9}}suffix\"></div>\n * \\`\\`\\`\n *\n * Its compiled representation is::\n *\n * \\`\\`\\`ts\n * ɵɵpropertyInterpolateV(\n *  'title', ['prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, '-', v7, '-', v9,\n *  'suffix']);\n * \\`\\`\\`\n *\n * If the property name also exists as an input property on one of the element's directives,\n * the component property will be set instead of the element property. This check must\n * be conducted at runtime so child components that add new \\`@Inputs\\` don't have to be re-compiled.\n *\n * @param propName The name of the property to update.\n * @param values The collection of values and the strings in between those values, beginning with a\n * string prefix and ending with a string suffix.\n * (e.g. \\`['prefix', value0, '-', value1, '-', value2, ..., value99, 'suffix']\\`)\n * @param sanitizer An optional sanitizer function\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nexport declare function ɵɵpropertyInterpolateV(propName: string, values: any[], sanitizer?: SanitizerFn): typeof ɵɵpropertyInterpolateV;\n\n/**\n * This feature resolves the providers of a directive (or component),\n * and publish them into the DI system, making it visible to others for injection.\n *\n * For example:\n * \\`\\`\\`ts\n * class ComponentWithProviders {\n *   constructor(private greeter: GreeterDE) {}\n *\n *   static ɵcmp = defineComponent({\n *     type: ComponentWithProviders,\n *     selectors: [['component-with-providers']],\n *    factory: () => new ComponentWithProviders(directiveInject(GreeterDE as any)),\n *    decls: 1,\n *    vars: 1,\n *    template: function(fs: RenderFlags, ctx: ComponentWithProviders) {\n *      if (fs & RenderFlags.Create) {\n *        ɵɵtext(0);\n *      }\n *      if (fs & RenderFlags.Update) {\n *        ɵɵtextInterpolate(ctx.greeter.greet());\n *      }\n *    },\n *    features: [ɵɵProvidersFeature([GreeterDE])]\n *  });\n * }\n * \\`\\`\\`\n *\n * @param definition\n *\n * @codeGenApi\n */\nexport declare function ɵɵProvidersFeature<T>(providers: Provider[], viewProviders?: Provider[]): (definition: ɵDirectiveDef<T>) => void;\n\n/**\n * Bindings for pure functions are stored after regular bindings.\n *\n * |-------decls------|---------vars---------|                 |----- hostVars (dir1) ------|\n * ------------------------------------------------------------------------------------------\n * | nodes/refs/pipes | bindings | fn slots  | injector | dir1 | host bindings | host slots |\n * ------------------------------------------------------------------------------------------\n *                    ^                      ^\n *      TView.bindingStartIndex      TView.expandoStartIndex\n *\n * Pure function instructions are given an offset from the binding root. Adding the offset to the\n * binding root gives the first index where the bindings are stored. In component views, the binding\n * root is the bindingStartIndex. In host bindings, the binding root is the expandoStartIndex +\n * any directive instances + any hostVars in directives evaluated before it.\n *\n * See VIEW_DATA.md for more information about host binding resolution.\n */\n/**\n * If the value hasn't been saved, calls the pure function to store and return the\n * value. If it has been saved, returns the saved value.\n *\n * @param slotOffset the offset from binding root to the reserved slot\n * @param pureFn Function that returns a value\n * @param thisArg Optional calling context of pureFn\n * @returns value\n *\n * @codeGenApi\n */\nexport declare function ɵɵpureFunction0<T>(slotOffset: number, pureFn: () => T, thisArg?: any): T;\n\n/**\n * If the value of the provided exp has changed, calls the pure function to return\n * an updated value. Or if the value has not changed, returns cached value.\n *\n * @param slotOffset the offset from binding root to the reserved slot\n * @param pureFn Function that returns an updated value\n * @param exp Updated expression value\n * @param thisArg Optional calling context of pureFn\n * @returns Updated or cached value\n *\n * @codeGenApi\n */\nexport declare function ɵɵpureFunction1(slotOffset: number, pureFn: (v: any) => any, exp: any, thisArg?: any): any;\n\n/**\n * If the value of any provided exp has changed, calls the pure function to return\n * an updated value. Or if no values have changed, returns cached value.\n *\n * @param slotOffset the offset from binding root to the reserved slot\n * @param pureFn\n * @param exp1\n * @param exp2\n * @param thisArg Optional calling context of pureFn\n * @returns Updated or cached value\n *\n * @codeGenApi\n */\nexport declare function ɵɵpureFunction2(slotOffset: number, pureFn: (v1: any, v2: any) => any, exp1: any, exp2: any, thisArg?: any): any;\n\n/**\n * If the value of any provided exp has changed, calls the pure function to return\n * an updated value. Or if no values have changed, returns cached value.\n *\n * @param slotOffset the offset from binding root to the reserved slot\n * @param pureFn\n * @param exp1\n * @param exp2\n * @param exp3\n * @param thisArg Optional calling context of pureFn\n * @returns Updated or cached value\n *\n * @codeGenApi\n */\nexport declare function ɵɵpureFunction3(slotOffset: number, pureFn: (v1: any, v2: any, v3: any) => any, exp1: any, exp2: any, exp3: any, thisArg?: any): any;\n\n/**\n * If the value of any provided exp has changed, calls the pure function to return\n * an updated value. Or if no values have changed, returns cached value.\n *\n * @param slotOffset the offset from binding root to the reserved slot\n * @param pureFn\n * @param exp1\n * @param exp2\n * @param exp3\n * @param exp4\n * @param thisArg Optional calling context of pureFn\n * @returns Updated or cached value\n *\n * @codeGenApi\n */\nexport declare function ɵɵpureFunction4(slotOffset: number, pureFn: (v1: any, v2: any, v3: any, v4: any) => any, exp1: any, exp2: any, exp3: any, exp4: any, thisArg?: any): any;\n\n/**\n * If the value of any provided exp has changed, calls the pure function to return\n * an updated value. Or if no values have changed, returns cached value.\n *\n * @param slotOffset the offset from binding root to the reserved slot\n * @param pureFn\n * @param exp1\n * @param exp2\n * @param exp3\n * @param exp4\n * @param exp5\n * @param thisArg Optional calling context of pureFn\n * @returns Updated or cached value\n *\n * @codeGenApi\n */\nexport declare function ɵɵpureFunction5(slotOffset: number, pureFn: (v1: any, v2: any, v3: any, v4: any, v5: any) => any, exp1: any, exp2: any, exp3: any, exp4: any, exp5: any, thisArg?: any): any;\n\n/**\n * If the value of any provided exp has changed, calls the pure function to return\n * an updated value. Or if no values have changed, returns cached value.\n *\n * @param slotOffset the offset from binding root to the reserved slot\n * @param pureFn\n * @param exp1\n * @param exp2\n * @param exp3\n * @param exp4\n * @param exp5\n * @param exp6\n * @param thisArg Optional calling context of pureFn\n * @returns Updated or cached value\n *\n * @codeGenApi\n */\nexport declare function ɵɵpureFunction6(slotOffset: number, pureFn: (v1: any, v2: any, v3: any, v4: any, v5: any, v6: any) => any, exp1: any, exp2: any, exp3: any, exp4: any, exp5: any, exp6: any, thisArg?: any): any;\n\n/**\n * If the value of any provided exp has changed, calls the pure function to return\n * an updated value. Or if no values have changed, returns cached value.\n *\n * @param slotOffset the offset from binding root to the reserved slot\n * @param pureFn\n * @param exp1\n * @param exp2\n * @param exp3\n * @param exp4\n * @param exp5\n * @param exp6\n * @param exp7\n * @param thisArg Optional calling context of pureFn\n * @returns Updated or cached value\n *\n * @codeGenApi\n */\nexport declare function ɵɵpureFunction7(slotOffset: number, pureFn: (v1: any, v2: any, v3: any, v4: any, v5: any, v6: any, v7: any) => any, exp1: any, exp2: any, exp3: any, exp4: any, exp5: any, exp6: any, exp7: any, thisArg?: any): any;\n\n/**\n * If the value of any provided exp has changed, calls the pure function to return\n * an updated value. Or if no values have changed, returns cached value.\n *\n * @param slotOffset the offset from binding root to the reserved slot\n * @param pureFn\n * @param exp1\n * @param exp2\n * @param exp3\n * @param exp4\n * @param exp5\n * @param exp6\n * @param exp7\n * @param exp8\n * @param thisArg Optional calling context of pureFn\n * @returns Updated or cached value\n *\n * @codeGenApi\n */\nexport declare function ɵɵpureFunction8(slotOffset: number, pureFn: (v1: any, v2: any, v3: any, v4: any, v5: any, v6: any, v7: any, v8: any) => any, exp1: any, exp2: any, exp3: any, exp4: any, exp5: any, exp6: any, exp7: any, exp8: any, thisArg?: any): any;\n\n/**\n * pureFunction instruction that can support any number of bindings.\n *\n * If the value of any provided exp has changed, calls the pure function to return\n * an updated value. Or if no values have changed, returns cached value.\n *\n * @param slotOffset the offset from binding root to the reserved slot\n * @param pureFn A pure function that takes binding values and builds an object or array\n * containing those values.\n * @param exps An array of binding values\n * @param thisArg Optional calling context of pureFn\n * @returns Updated or cached value\n *\n * @codeGenApi\n */\nexport declare function ɵɵpureFunctionV(slotOffset: number, pureFn: (...v: any[]) => any, exps: any[], thisArg?: any): any;\n\n/**\n * Refreshes a query by combining matches from all active views and removing matches from deleted\n * views.\n *\n * @returns \\`true\\` if a query got dirty during change detection or if this is a static query\n * resolving in creation mode, \\`false\\` otherwise.\n *\n * @codeGenApi\n */\nexport declare function ɵɵqueryRefresh(queryList: QueryList<any>): boolean;\n\n/**\n * Retrieves a local reference from the current contextViewData.\n *\n * If the reference to retrieve is in a parent view, this instruction is used in conjunction\n * with a nextContext() call, which walks up the tree and updates the contextViewData instance.\n *\n * @param index The index of the local ref in contextViewData.\n *\n * @codeGenApi\n */\nexport declare function ɵɵreference<T>(index: number): T;\n\n/**\n * Adds the given NgModule type to Angular's NgModule registry.\n *\n * This is generated as a side-effect of NgModule compilation. Note that the \\`id\\` is passed in\n * explicitly and not read from the NgModule definition. This is for two reasons: it avoids a\n * megamorphic read, and in JIT there's a chicken-and-egg problem where the NgModule may not be\n * fully resolved when it's registered.\n *\n * @codeGenApi\n */\nexport declare function ɵɵregisterNgModuleType(ngModuleType: ɵNgModuleType, id: string): void;\n\n/**\n * Clears the view set in \\`ɵɵrestoreView\\` from memory. Returns the passed in\n * value so that it can be used as a return value of an instruction.\n *\n * @codeGenApi\n */\nexport declare function ɵɵresetView<T>(value?: T): T | undefined;\n\n/**\n *\n * @codeGenApi\n */\nexport declare function ɵɵresolveBody(element: RElement & {\n\townerDocument: Document;\n}): HTMLElement;\n\n/**\n *\n * @codeGenApi\n */\nexport declare function ɵɵresolveDocument(element: RElement & {\n\townerDocument: Document;\n}): Document;\n\n/**\n *\n * @codeGenApi\n */\nexport declare function ɵɵresolveWindow(element: RElement & {\n\townerDocument: Document;\n}): (Window & typeof globalThis) | null;\n\n/**\n * Restores \\`contextViewData\\` to the given OpaqueViewState instance.\n *\n * Used in conjunction with the getCurrentView() instruction to save a snapshot\n * of the current view and restore it when listeners are invoked. This allows\n * walking the declaration view tree in listeners to get vars from parent views.\n *\n * @param viewToRestore The OpaqueViewState instance to restore.\n * @returns Context of the restored OpaqueViewState instance.\n *\n * @codeGenApi\n */\nexport declare function ɵɵrestoreView<T = any>(viewToRestore: OpaqueViewState): T;\n\n/**\n * An \\`html\\` sanitizer which converts untrusted \\`html\\` **string** into trusted string by removing\n * dangerous content.\n *\n * This method parses the \\`html\\` and locates potentially dangerous content (such as urls and\n * javascript) and removes it.\n *\n * It is possible to mark a string as trusted by calling {@link bypassSanitizationTrustHtml}.\n *\n * @param unsafeHtml untrusted \\`html\\`, typically from the user.\n * @returns \\`html\\` string which is safe to display to user, because all of the dangerous javascript\n * and urls have been removed.\n *\n * @codeGenApi\n */\nexport declare function ɵɵsanitizeHtml(unsafeHtml: any): TrustedHTML | string;\n\n/**\n * A \\`url\\` sanitizer which only lets trusted \\`url\\`s through.\n *\n * This passes only \\`url\\`s marked trusted by calling {@link bypassSanitizationTrustResourceUrl}.\n *\n * @param unsafeResourceUrl untrusted \\`url\\`, typically from the user.\n * @returns \\`url\\` string which is safe to bind to the \\`src\\` properties such as \\`<img src>\\`, because\n * only trusted \\`url\\`s have been allowed to pass.\n *\n * @codeGenApi\n */\nexport declare function ɵɵsanitizeResourceUrl(unsafeResourceUrl: any): TrustedScriptURL | string;\n\n/**\n * A \\`script\\` sanitizer which only lets trusted javascript through.\n *\n * This passes only \\`script\\`s marked trusted by calling {@link\n * bypassSanitizationTrustScript}.\n *\n * @param unsafeScript untrusted \\`script\\`, typically from the user.\n * @returns \\`url\\` string which is safe to bind to the \\`<script>\\` element such as \\`<img src>\\`,\n * because only trusted \\`scripts\\` have been allowed to pass.\n *\n * @codeGenApi\n */\nexport declare function ɵɵsanitizeScript(unsafeScript: any): TrustedScript | string;\n\n/**\n * A \\`style\\` sanitizer which converts untrusted \\`style\\` **string** into trusted string by removing\n * dangerous content.\n *\n * It is possible to mark a string as trusted by calling {@link bypassSanitizationTrustStyle}.\n *\n * @param unsafeStyle untrusted \\`style\\`, typically from the user.\n * @returns \\`style\\` string which is safe to bind to the \\`style\\` properties.\n *\n * @codeGenApi\n */\nexport declare function ɵɵsanitizeStyle(unsafeStyle: any): string;\n\n/**\n * A \\`url\\` sanitizer which converts untrusted \\`url\\` **string** into trusted string by removing\n * dangerous\n * content.\n *\n * This method parses the \\`url\\` and locates potentially dangerous content (such as javascript) and\n * removes it.\n *\n * It is possible to mark a string as trusted by calling {@link bypassSanitizationTrustUrl}.\n *\n * @param unsafeUrl untrusted \\`url\\`, typically from the user.\n * @returns \\`url\\` string which is safe to bind to the \\`src\\` properties such as \\`<img src>\\`, because\n * all of the dangerous javascript has been removed.\n *\n * @codeGenApi\n */\nexport declare function ɵɵsanitizeUrl(unsafeUrl: any): string;\n\n/**\n * Sanitizes URL, selecting sanitizer function based on tag and property names.\n *\n * This function is used in case we can't define security context at compile time, when only prop\n * name is available. This happens when we generate host bindings for Directives/Components. The\n * host element is unknown at compile time, so we defer calculation of specific sanitizer to\n * runtime.\n *\n * @param unsafeUrl untrusted \\`url\\`, typically from the user.\n * @param tag target element tag name.\n * @param prop name of the property that contains the value.\n * @returns \\`url\\` string which is safe to bind.\n *\n * @codeGenApi\n */\nexport declare function ɵɵsanitizeUrlOrResourceUrl(unsafeUrl: any, tag: string, prop: string): any;\n\n/**\n * Generated next to NgModules to monkey-patch directive and pipe references onto a component's\n * definition, when generating a direct reference in the component file would otherwise create an\n * import cycle.\n *\n * See [this explanation](https://hackmd.io/Odw80D0pR6yfsOjg_7XCJg?view) for more details.\n *\n * @codeGenApi\n */\nexport declare function ɵɵsetComponentScope(type: ɵComponentType<any>, directives: Type<any>[] | (() => Type<any>[]), pipes: Type<any>[] | (() => Type<any>[])): void;\n\n/**\n * Adds the module metadata that is necessary to compute the module's transitive scope to an\n * existing module definition.\n *\n * Scope metadata of modules is not used in production builds, so calls to this function can be\n * marked pure to tree-shake it from the bundle, allowing for all referenced declarations\n * to become eligible for tree-shaking as well.\n *\n * @codeGenApi\n */\nexport declare function ɵɵsetNgModuleScope(type: any, scope: {\n\t/** List of components, directives, and pipes declared by this module. */\n\tdeclarations?: Type<any>[] | (() => Type<any>[]);\n\t/** List of modules or \\`ModuleWithProviders\\` imported by this module. */\n\timports?: Type<any>[] | (() => Type<any>[]);\n\t/**\n\t * List of modules, \\`ModuleWithProviders\\`, components, directives, or pipes exported by this\n\t * module.\n\t */\n\texports?: Type<any>[] | (() => Type<any>[]);\n}): unknown;\n\n/**\n * A feature that acts as a setup code for the {@link StandaloneService}.\n *\n * The most important responsibility of this feature is to expose the \"getStandaloneInjector\"\n * function (an entry points to a standalone injector creation) on a component definition object. We\n * go through the features infrastructure to make sure that the standalone injector creation logic\n * is tree-shakable and not included in applications that don't use standalone components.\n *\n * @codeGenApi\n */\nexport declare function ɵɵStandaloneFeature(definition: ɵComponentDef<unknown>): void;\n\n/**\n * Update style bindings using an object literal on an element.\n *\n * This instruction is meant to apply styling via the \\`[style]=\"exp\"\\` template bindings.\n * When styles are applied to the element they will then be updated with respect to\n * any styles/classes set via \\`styleProp\\`. If any styles are set to falsy\n * then they will be removed from the element.\n *\n * Note that the styling instruction will not be applied until \\`stylingApply\\` is called.\n *\n * @param styles A key/value style map of the styles that will be applied to the given element.\n *        Any missing styles (that have already been applied to the element beforehand) will be\n *        removed (unset) from the element's styling.\n *\n * Note that this will apply the provided styleMap value to the host element if this function\n * is called within a host binding.\n *\n * @codeGenApi\n */\nexport declare function ɵɵstyleMap(styles: {\n\t[styleName: string]: any;\n} | string | undefined | null): void;\n\n\n/**\n *\n * Update an interpolated style on an element with single bound value surrounded by text.\n *\n * Used when the value passed to a property has 1 interpolated value in it:\n *\n * \\`\\`\\`html\n * <div style=\"key: {{v0}}suffix\"></div>\n * \\`\\`\\`\n *\n * Its compiled representation is:\n *\n * \\`\\`\\`ts\n * ɵɵstyleMapInterpolate1('key: ', v0, 'suffix');\n * \\`\\`\\`\n *\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @codeGenApi\n */\nexport declare function ɵɵstyleMapInterpolate1(prefix: string, v0: any, suffix: string): void;\n\n/**\n *\n * Update an interpolated style on an element with 2 bound values surrounded by text.\n *\n * Used when the value passed to a property has 2 interpolated values in it:\n *\n * \\`\\`\\`html\n * <div style=\"key: {{v0}}; key1: {{v1}}suffix\"></div>\n * \\`\\`\\`\n *\n * Its compiled representation is:\n *\n * \\`\\`\\`ts\n * ɵɵstyleMapInterpolate2('key: ', v0, '; key1: ', v1, 'suffix');\n * \\`\\`\\`\n *\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @codeGenApi\n */\nexport declare function ɵɵstyleMapInterpolate2(prefix: string, v0: any, i0: string, v1: any, suffix: string): void;\n\n/**\n *\n * Update an interpolated style on an element with 3 bound values surrounded by text.\n *\n * Used when the value passed to a property has 3 interpolated values in it:\n *\n * \\`\\`\\`html\n * <div style=\"key: {{v0}}; key2: {{v1}}; key2: {{v2}}suffix\"></div>\n * \\`\\`\\`\n *\n * Its compiled representation is:\n *\n * \\`\\`\\`ts\n * ɵɵstyleMapInterpolate3(\n *     'key: ', v0, '; key1: ', v1, '; key2: ', v2, 'suffix');\n * \\`\\`\\`\n *\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @codeGenApi\n */\nexport declare function ɵɵstyleMapInterpolate3(prefix: string, v0: any, i0: string, v1: any, i1: string, v2: any, suffix: string): void;\n\n/**\n *\n * Update an interpolated style on an element with 4 bound values surrounded by text.\n *\n * Used when the value passed to a property has 4 interpolated values in it:\n *\n * \\`\\`\\`html\n * <div style=\"key: {{v0}}; key1: {{v1}}; key2: {{v2}}; key3: {{v3}}suffix\"></div>\n * \\`\\`\\`\n *\n * Its compiled representation is:\n *\n * \\`\\`\\`ts\n * ɵɵstyleMapInterpolate4(\n *     'key: ', v0, '; key1: ', v1, '; key2: ', v2, '; key3: ', v3, 'suffix');\n * \\`\\`\\`\n *\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param i2 Static value used for concatenation only.\n * @param v3 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @codeGenApi\n */\nexport declare function ɵɵstyleMapInterpolate4(prefix: string, v0: any, i0: string, v1: any, i1: string, v2: any, i2: string, v3: any, suffix: string): void;\n\n/**\n *\n * Update an interpolated style on an element with 5 bound values surrounded by text.\n *\n * Used when the value passed to a property has 5 interpolated values in it:\n *\n * \\`\\`\\`html\n * <div style=\"key: {{v0}}; key1: {{v1}}; key2: {{v2}}; key3: {{v3}}; key4: {{v4}}suffix\"></div>\n * \\`\\`\\`\n *\n * Its compiled representation is:\n *\n * \\`\\`\\`ts\n * ɵɵstyleMapInterpolate5(\n *     'key: ', v0, '; key1: ', v1, '; key2: ', v2, '; key3: ', v3, '; key4: ', v4, 'suffix');\n * \\`\\`\\`\n *\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param i2 Static value used for concatenation only.\n * @param v3 Value checked for change.\n * @param i3 Static value used for concatenation only.\n * @param v4 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @codeGenApi\n */\nexport declare function ɵɵstyleMapInterpolate5(prefix: string, v0: any, i0: string, v1: any, i1: string, v2: any, i2: string, v3: any, i3: string, v4: any, suffix: string): void;\n\n/**\n *\n * Update an interpolated style on an element with 6 bound values surrounded by text.\n *\n * Used when the value passed to a property has 6 interpolated values in it:\n *\n * \\`\\`\\`html\n * <div style=\"key: {{v0}}; key1: {{v1}}; key2: {{v2}}; key3: {{v3}}; key4: {{v4}};\n *             key5: {{v5}}suffix\"></div>\n * \\`\\`\\`\n *\n * Its compiled representation is:\n *\n * \\`\\`\\`ts\n * ɵɵstyleMapInterpolate6(\n *    'key: ', v0, '; key1: ', v1, '; key2: ', v2, '; key3: ', v3, '; key4: ', v4, '; key5: ', v5,\n *    'suffix');\n * \\`\\`\\`\n *\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param i2 Static value used for concatenation only.\n * @param v3 Value checked for change.\n * @param i3 Static value used for concatenation only.\n * @param v4 Value checked for change.\n * @param i4 Static value used for concatenation only.\n * @param v5 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @codeGenApi\n */\nexport declare function ɵɵstyleMapInterpolate6(prefix: string, v0: any, i0: string, v1: any, i1: string, v2: any, i2: string, v3: any, i3: string, v4: any, i4: string, v5: any, suffix: string): void;\n\n/**\n *\n * Update an interpolated style on an element with 7 bound values surrounded by text.\n *\n * Used when the value passed to a property has 7 interpolated values in it:\n *\n * \\`\\`\\`html\n * <div style=\"key: {{v0}}; key1: {{v1}}; key2: {{v2}}; key3: {{v3}}; key4: {{v4}}; key5: {{v5}};\n *             key6: {{v6}}suffix\"></div>\n * \\`\\`\\`\n *\n * Its compiled representation is:\n *\n * \\`\\`\\`ts\n * ɵɵstyleMapInterpolate7(\n *    'key: ', v0, '; key1: ', v1, '; key2: ', v2, '; key3: ', v3, '; key4: ', v4, '; key5: ', v5,\n *    '; key6: ', v6, 'suffix');\n * \\`\\`\\`\n *\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param i2 Static value used for concatenation only.\n * @param v3 Value checked for change.\n * @param i3 Static value used for concatenation only.\n * @param v4 Value checked for change.\n * @param i4 Static value used for concatenation only.\n * @param v5 Value checked for change.\n * @param i5 Static value used for concatenation only.\n * @param v6 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @codeGenApi\n */\nexport declare function ɵɵstyleMapInterpolate7(prefix: string, v0: any, i0: string, v1: any, i1: string, v2: any, i2: string, v3: any, i3: string, v4: any, i4: string, v5: any, i5: string, v6: any, suffix: string): void;\n\n/**\n *\n * Update an interpolated style on an element with 8 bound values surrounded by text.\n *\n * Used when the value passed to a property has 8 interpolated values in it:\n *\n * \\`\\`\\`html\n * <div style=\"key: {{v0}}; key1: {{v1}}; key2: {{v2}}; key3: {{v3}}; key4: {{v4}}; key5: {{v5}};\n *             key6: {{v6}}; key7: {{v7}}suffix\"></div>\n * \\`\\`\\`\n *\n * Its compiled representation is:\n *\n * \\`\\`\\`ts\n * ɵɵstyleMapInterpolate8(\n *    'key: ', v0, '; key1: ', v1, '; key2: ', v2, '; key3: ', v3, '; key4: ', v4, '; key5: ', v5,\n *    '; key6: ', v6, '; key7: ', v7, 'suffix');\n * \\`\\`\\`\n *\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param i2 Static value used for concatenation only.\n * @param v3 Value checked for change.\n * @param i3 Static value used for concatenation only.\n * @param v4 Value checked for change.\n * @param i4 Static value used for concatenation only.\n * @param v5 Value checked for change.\n * @param i5 Static value used for concatenation only.\n * @param v6 Value checked for change.\n * @param i6 Static value used for concatenation only.\n * @param v7 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @codeGenApi\n */\nexport declare function ɵɵstyleMapInterpolate8(prefix: string, v0: any, i0: string, v1: any, i1: string, v2: any, i2: string, v3: any, i3: string, v4: any, i4: string, v5: any, i5: string, v6: any, i6: string, v7: any, suffix: string): void;\n\n/**\n * Update an interpolated style on an element with 9 or more bound values surrounded by text.\n *\n * Used when the number of interpolated values exceeds 8.\n *\n * \\`\\`\\`html\n * <div\n *  class=\"key: {{v0}}; key1: {{v1}}; key2: {{v2}}; key3: {{v3}}; key4: {{v4}}; key5: {{v5}};\n *         key6: {{v6}}; key7: {{v7}}; key8: {{v8}}; key9: {{v9}}suffix\"></div>\n * \\`\\`\\`\n *\n * Its compiled representation is:\n *\n * \\`\\`\\`ts\n * ɵɵstyleMapInterpolateV(\n *    ['key: ', v0, '; key1: ', v1, '; key2: ', v2, '; key3: ', v3, '; key4: ', v4, '; key5: ', v5,\n *     '; key6: ', v6, '; key7: ', v7, '; key8: ', v8, '; key9: ', v9, 'suffix']);\n * \\`\\`\\`\n *.\n * @param values The collection of values and the strings in-between those values, beginning with\n * a string prefix and ending with a string suffix.\n * (e.g. \\`['prefix', value0, '; key2: ', value1, '; key2: ', value2, ..., value99, 'suffix']\\`)\n * @codeGenApi\n */\nexport declare function ɵɵstyleMapInterpolateV(values: any[]): void;\n\n/**\n * Update a style binding on an element with the provided value.\n *\n * If the style value is falsy then it will be removed from the element\n * (or assigned a different value depending if there are any styles placed\n * on the element with \\`styleMap\\` or any static styles that are\n * present from when the element was created with \\`styling\\`).\n *\n * Note that the styling element is updated as part of \\`stylingApply\\`.\n *\n * @param prop A valid CSS property.\n * @param value New value to write (\\`null\\` or an empty string to remove).\n * @param suffix Optional suffix. Used with scalar values to add unit such as \\`px\\`.\n *\n * Note that this will apply the provided style value to the host element if this function is called\n * within a host binding function.\n *\n * @codeGenApi\n */\nexport declare function ɵɵstyleProp(prop: string, value: string | number | ɵSafeValue | undefined | null, suffix?: string | null): typeof ɵɵstyleProp;\n\n\n/**\n *\n * Update an interpolated style property on an element with single bound value surrounded by text.\n *\n * Used when the value passed to a property has 1 interpolated value in it:\n *\n * \\`\\`\\`html\n * <div style.color=\"prefix{{v0}}suffix\"></div>\n * \\`\\`\\`\n *\n * Its compiled representation is:\n *\n * \\`\\`\\`ts\n * ɵɵstylePropInterpolate1(0, 'prefix', v0, 'suffix');\n * \\`\\`\\`\n *\n * @param styleIndex Index of style to update. This index value refers to the\n *        index of the style in the style bindings array that was passed into\n *        \\`styling\\`.\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @param valueSuffix Optional suffix. Used with scalar values to add unit such as \\`px\\`.\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nexport declare function ɵɵstylePropInterpolate1(prop: string, prefix: string, v0: any, suffix: string, valueSuffix?: string | null): typeof ɵɵstylePropInterpolate1;\n\n/**\n *\n * Update an interpolated style property on an element with 2 bound values surrounded by text.\n *\n * Used when the value passed to a property has 2 interpolated values in it:\n *\n * \\`\\`\\`html\n * <div style.color=\"prefix{{v0}}-{{v1}}suffix\"></div>\n * \\`\\`\\`\n *\n * Its compiled representation is:\n *\n * \\`\\`\\`ts\n * ɵɵstylePropInterpolate2(0, 'prefix', v0, '-', v1, 'suffix');\n * \\`\\`\\`\n *\n * @param styleIndex Index of style to update. This index value refers to the\n *        index of the style in the style bindings array that was passed into\n *        \\`styling\\`.\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @param valueSuffix Optional suffix. Used with scalar values to add unit such as \\`px\\`.\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nexport declare function ɵɵstylePropInterpolate2(prop: string, prefix: string, v0: any, i0: string, v1: any, suffix: string, valueSuffix?: string | null): typeof ɵɵstylePropInterpolate2;\n\n/**\n *\n * Update an interpolated style property on an element with 3 bound values surrounded by text.\n *\n * Used when the value passed to a property has 3 interpolated values in it:\n *\n * \\`\\`\\`html\n * <div style.color=\"prefix{{v0}}-{{v1}}-{{v2}}suffix\"></div>\n * \\`\\`\\`\n *\n * Its compiled representation is:\n *\n * \\`\\`\\`ts\n * ɵɵstylePropInterpolate3(0, 'prefix', v0, '-', v1, '-', v2, 'suffix');\n * \\`\\`\\`\n *\n * @param styleIndex Index of style to update. This index value refers to the\n *        index of the style in the style bindings array that was passed into\n *        \\`styling\\`.\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @param valueSuffix Optional suffix. Used with scalar values to add unit such as \\`px\\`.\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nexport declare function ɵɵstylePropInterpolate3(prop: string, prefix: string, v0: any, i0: string, v1: any, i1: string, v2: any, suffix: string, valueSuffix?: string | null): typeof ɵɵstylePropInterpolate3;\n\n/**\n *\n * Update an interpolated style property on an element with 4 bound values surrounded by text.\n *\n * Used when the value passed to a property has 4 interpolated values in it:\n *\n * \\`\\`\\`html\n * <div style.color=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}suffix\"></div>\n * \\`\\`\\`\n *\n * Its compiled representation is:\n *\n * \\`\\`\\`ts\n * ɵɵstylePropInterpolate4(0, 'prefix', v0, '-', v1, '-', v2, '-', v3, 'suffix');\n * \\`\\`\\`\n *\n * @param styleIndex Index of style to update. This index value refers to the\n *        index of the style in the style bindings array that was passed into\n *        \\`styling\\`.\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param i2 Static value used for concatenation only.\n * @param v3 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @param valueSuffix Optional suffix. Used with scalar values to add unit such as \\`px\\`.\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nexport declare function ɵɵstylePropInterpolate4(prop: string, prefix: string, v0: any, i0: string, v1: any, i1: string, v2: any, i2: string, v3: any, suffix: string, valueSuffix?: string | null): typeof ɵɵstylePropInterpolate4;\n\n/**\n *\n * Update an interpolated style property on an element with 5 bound values surrounded by text.\n *\n * Used when the value passed to a property has 5 interpolated values in it:\n *\n * \\`\\`\\`html\n * <div style.color=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}suffix\"></div>\n * \\`\\`\\`\n *\n * Its compiled representation is:\n *\n * \\`\\`\\`ts\n * ɵɵstylePropInterpolate5(0, 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, 'suffix');\n * \\`\\`\\`\n *\n * @param styleIndex Index of style to update. This index value refers to the\n *        index of the style in the style bindings array that was passed into\n *        \\`styling\\`.\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param i2 Static value used for concatenation only.\n * @param v3 Value checked for change.\n * @param i3 Static value used for concatenation only.\n * @param v4 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @param valueSuffix Optional suffix. Used with scalar values to add unit such as \\`px\\`.\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nexport declare function ɵɵstylePropInterpolate5(prop: string, prefix: string, v0: any, i0: string, v1: any, i1: string, v2: any, i2: string, v3: any, i3: string, v4: any, suffix: string, valueSuffix?: string | null): typeof ɵɵstylePropInterpolate5;\n\n/**\n *\n * Update an interpolated style property on an element with 6 bound values surrounded by text.\n *\n * Used when the value passed to a property has 6 interpolated values in it:\n *\n * \\`\\`\\`html\n * <div style.color=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}suffix\"></div>\n * \\`\\`\\`\n *\n * Its compiled representation is:\n *\n * \\`\\`\\`ts\n * ɵɵstylePropInterpolate6(0, 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, 'suffix');\n * \\`\\`\\`\n *\n * @param styleIndex Index of style to update. This index value refers to the\n *        index of the style in the style bindings array that was passed into\n *        \\`styling\\`.\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param i2 Static value used for concatenation only.\n * @param v3 Value checked for change.\n * @param i3 Static value used for concatenation only.\n * @param v4 Value checked for change.\n * @param i4 Static value used for concatenation only.\n * @param v5 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @param valueSuffix Optional suffix. Used with scalar values to add unit such as \\`px\\`.\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nexport declare function ɵɵstylePropInterpolate6(prop: string, prefix: string, v0: any, i0: string, v1: any, i1: string, v2: any, i2: string, v3: any, i3: string, v4: any, i4: string, v5: any, suffix: string, valueSuffix?: string | null): typeof ɵɵstylePropInterpolate6;\n\n/**\n *\n * Update an interpolated style property on an element with 7 bound values surrounded by text.\n *\n * Used when the value passed to a property has 7 interpolated values in it:\n *\n * \\`\\`\\`html\n * <div style.color=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}suffix\"></div>\n * \\`\\`\\`\n *\n * Its compiled representation is:\n *\n * \\`\\`\\`ts\n * ɵɵstylePropInterpolate7(\n *    0, 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, 'suffix');\n * \\`\\`\\`\n *\n * @param styleIndex Index of style to update. This index value refers to the\n *        index of the style in the style bindings array that was passed into\n *        \\`styling\\`.\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param i2 Static value used for concatenation only.\n * @param v3 Value checked for change.\n * @param i3 Static value used for concatenation only.\n * @param v4 Value checked for change.\n * @param i4 Static value used for concatenation only.\n * @param v5 Value checked for change.\n * @param i5 Static value used for concatenation only.\n * @param v6 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @param valueSuffix Optional suffix. Used with scalar values to add unit such as \\`px\\`.\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nexport declare function ɵɵstylePropInterpolate7(prop: string, prefix: string, v0: any, i0: string, v1: any, i1: string, v2: any, i2: string, v3: any, i3: string, v4: any, i4: string, v5: any, i5: string, v6: any, suffix: string, valueSuffix?: string | null): typeof ɵɵstylePropInterpolate7;\n\n/**\n *\n * Update an interpolated style property on an element with 8 bound values surrounded by text.\n *\n * Used when the value passed to a property has 8 interpolated values in it:\n *\n * \\`\\`\\`html\n * <div style.color=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}-{{v7}}suffix\"></div>\n * \\`\\`\\`\n *\n * Its compiled representation is:\n *\n * \\`\\`\\`ts\n * ɵɵstylePropInterpolate8(0, 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6,\n * '-', v7, 'suffix');\n * \\`\\`\\`\n *\n * @param styleIndex Index of style to update. This index value refers to the\n *        index of the style in the style bindings array that was passed into\n *        \\`styling\\`.\n * @param prefix Static value used for concatenation only.\n * @param v0 Value checked for change.\n * @param i0 Static value used for concatenation only.\n * @param v1 Value checked for change.\n * @param i1 Static value used for concatenation only.\n * @param v2 Value checked for change.\n * @param i2 Static value used for concatenation only.\n * @param v3 Value checked for change.\n * @param i3 Static value used for concatenation only.\n * @param v4 Value checked for change.\n * @param i4 Static value used for concatenation only.\n * @param v5 Value checked for change.\n * @param i5 Static value used for concatenation only.\n * @param v6 Value checked for change.\n * @param i6 Static value used for concatenation only.\n * @param v7 Value checked for change.\n * @param suffix Static value used for concatenation only.\n * @param valueSuffix Optional suffix. Used with scalar values to add unit such as \\`px\\`.\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nexport declare function ɵɵstylePropInterpolate8(prop: string, prefix: string, v0: any, i0: string, v1: any, i1: string, v2: any, i2: string, v3: any, i3: string, v4: any, i4: string, v5: any, i5: string, v6: any, i6: string, v7: any, suffix: string, valueSuffix?: string | null): typeof ɵɵstylePropInterpolate8;\n\n/**\n * Update an interpolated style property on an element with 9 or more bound values surrounded by\n * text.\n *\n * Used when the number of interpolated values exceeds 8.\n *\n * \\`\\`\\`html\n * <div\n *  style.color=\"prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}-{{v7}}-{{v8}}-{{v9}}suffix\">\n * </div>\n * \\`\\`\\`\n *\n * Its compiled representation is:\n *\n * \\`\\`\\`ts\n * ɵɵstylePropInterpolateV(\n *  0, ['prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, '-', v7, '-', v9,\n *  'suffix']);\n * \\`\\`\\`\n *\n * @param styleIndex Index of style to update. This index value refers to the\n *        index of the style in the style bindings array that was passed into\n *        \\`styling\\`..\n * @param values The collection of values and the strings in-between those values, beginning with\n * a string prefix and ending with a string suffix.\n * (e.g. \\`['prefix', value0, '-', value1, '-', value2, ..., value99, 'suffix']\\`)\n * @param valueSuffix Optional suffix. Used with scalar values to add unit such as \\`px\\`.\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nexport declare function ɵɵstylePropInterpolateV(prop: string, values: any[], valueSuffix?: string | null): typeof ɵɵstylePropInterpolateV;\n\n/**\n * Registers a synthetic host listener (e.g. \\`(@foo.start)\\`) on a component or directive.\n *\n * This instruction is for compatibility purposes and is designed to ensure that a\n * synthetic host listener (e.g. \\`@HostListener('@foo.start')\\`) properly gets rendered\n * in the component's renderer. Normally all host listeners are evaluated with the\n * parent component's renderer, but, in the case of animation @triggers, they need\n * to be evaluated with the sub component's renderer (because that's where the\n * animation triggers are defined).\n *\n * Do not use this instruction as a replacement for \\`listener\\`. This instruction\n * only exists to ensure compatibility with the ViewEngine's host binding behavior.\n *\n * @param eventName Name of the event\n * @param listenerFn The function to be called when event emits\n * @param useCapture Whether or not to use capture in event listener\n * @param eventTargetResolver Function that returns global target information in case this listener\n * should be attached to a global object like window, document or body\n *\n * @codeGenApi\n */\nexport declare function ɵɵsyntheticHostListener(eventName: string, listenerFn: (e?: any) => any): typeof ɵɵsyntheticHostListener;\n\n/**\n * Updates a synthetic host binding (e.g. \\`[@foo]\\`) on a component or directive.\n *\n * This instruction is for compatibility purposes and is designed to ensure that a\n * synthetic host binding (e.g. \\`@HostBinding('@foo')\\`) properly gets rendered in\n * the component's renderer. Normally all host bindings are evaluated with the parent\n * component's renderer, but, in the case of animation @triggers, they need to be\n * evaluated with the sub component's renderer (because that's where the animation\n * triggers are defined).\n *\n * Do not use this instruction as a replacement for \\`elementProperty\\`. This instruction\n * only exists to ensure compatibility with the ViewEngine's host binding behavior.\n *\n * @param index The index of the element to update in the data array\n * @param propName Name of property. Because it is going to DOM, this is not subject to\n *        renaming as part of minification.\n * @param value New value to write.\n * @param sanitizer An optional function used to sanitize the value.\n *\n * @codeGenApi\n */\nexport declare function ɵɵsyntheticHostProperty<T>(propName: string, value: T | ɵNO_CHANGE, sanitizer?: SanitizerFn | null): typeof ɵɵsyntheticHostProperty;\n\n/**\n * Creates an LContainer for an ng-template (dynamically-inserted view), e.g.\n *\n * <ng-template #foo>\n *    <div></div>\n * </ng-template>\n *\n * @param index The index of the container in the data array\n * @param templateFn Inline template\n * @param decls The number of nodes, local refs, and pipes for this template\n * @param vars The number of bindings for this template\n * @param tagName The name of the container element, if applicable\n * @param attrsIndex Index of template attributes in the \\`consts\\` array.\n * @param localRefs Index of the local references in the \\`consts\\` array.\n * @param localRefExtractor A function which extracts local-refs values from the template.\n *        Defaults to the current element associated with the local-ref.\n *\n * @codeGenApi\n */\nexport declare function ɵɵtemplate(index: number, templateFn: ComponentTemplate<any> | null, decls: number, vars: number, tagName?: string | null, attrsIndex?: number | null, localRefsIndex?: number | null, localRefExtractor?: LocalRefExtractor): void;\n\n/**\n * Retrieves \\`TemplateRef\\` instance from \\`Injector\\` when a local reference is placed on the\n * \\`<ng-template>\\` element.\n *\n * @codeGenApi\n */\nexport declare function ɵɵtemplateRefExtractor(tNode: TNode, lView: LView): TemplateRef<any> | null;\n\n/**\n * Create static text node\n *\n * @param index Index of the node in the data array\n * @param value Static string value to write.\n *\n * @codeGenApi\n */\nexport declare function ɵɵtext(index: number, value?: string): void;\n\n/**\n *\n * Update text content with a lone bound value\n *\n * Used when a text node has 1 interpolated value in it, an no additional text\n * surrounds that interpolated value:\n *\n * \\`\\`\\`html\n * <div>{{v0}}</div>\n * \\`\\`\\`\n *\n * Its compiled representation is:\n *\n * \\`\\`\\`ts\n * ɵɵtextInterpolate(v0);\n * \\`\\`\\`\n * @returns itself, so that it may be chained.\n * @see textInterpolateV\n * @codeGenApi\n */\nexport declare function ɵɵtextInterpolate(v0: any): typeof ɵɵtextInterpolate;\n\n/**\n *\n * Update text content with single bound value surrounded by other text.\n *\n * Used when a text node has 1 interpolated value in it:\n *\n * \\`\\`\\`html\n * <div>prefix{{v0}}suffix</div>\n * \\`\\`\\`\n *\n * Its compiled representation is:\n *\n * \\`\\`\\`ts\n * ɵɵtextInterpolate1('prefix', v0, 'suffix');\n * \\`\\`\\`\n * @returns itself, so that it may be chained.\n * @see textInterpolateV\n * @codeGenApi\n */\nexport declare function ɵɵtextInterpolate1(prefix: string, v0: any, suffix: string): typeof ɵɵtextInterpolate1;\n\n/**\n *\n * Update text content with 2 bound values surrounded by other text.\n *\n * Used when a text node has 2 interpolated values in it:\n *\n * \\`\\`\\`html\n * <div>prefix{{v0}}-{{v1}}suffix</div>\n * \\`\\`\\`\n *\n * Its compiled representation is:\n *\n * \\`\\`\\`ts\n * ɵɵtextInterpolate2('prefix', v0, '-', v1, 'suffix');\n * \\`\\`\\`\n * @returns itself, so that it may be chained.\n * @see textInterpolateV\n * @codeGenApi\n */\nexport declare function ɵɵtextInterpolate2(prefix: string, v0: any, i0: string, v1: any, suffix: string): typeof ɵɵtextInterpolate2;\n\n/**\n *\n * Update text content with 3 bound values surrounded by other text.\n *\n * Used when a text node has 3 interpolated values in it:\n *\n * \\`\\`\\`html\n * <div>prefix{{v0}}-{{v1}}-{{v2}}suffix</div>\n * \\`\\`\\`\n *\n * Its compiled representation is:\n *\n * \\`\\`\\`ts\n * ɵɵtextInterpolate3(\n * 'prefix', v0, '-', v1, '-', v2, 'suffix');\n * \\`\\`\\`\n * @returns itself, so that it may be chained.\n * @see textInterpolateV\n * @codeGenApi\n */\nexport declare function ɵɵtextInterpolate3(prefix: string, v0: any, i0: string, v1: any, i1: string, v2: any, suffix: string): typeof ɵɵtextInterpolate3;\n\n/**\n *\n * Update text content with 4 bound values surrounded by other text.\n *\n * Used when a text node has 4 interpolated values in it:\n *\n * \\`\\`\\`html\n * <div>prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}suffix</div>\n * \\`\\`\\`\n *\n * Its compiled representation is:\n *\n * \\`\\`\\`ts\n * ɵɵtextInterpolate4(\n * 'prefix', v0, '-', v1, '-', v2, '-', v3, 'suffix');\n * \\`\\`\\`\n * @returns itself, so that it may be chained.\n * @see ɵɵtextInterpolateV\n * @codeGenApi\n */\nexport declare function ɵɵtextInterpolate4(prefix: string, v0: any, i0: string, v1: any, i1: string, v2: any, i2: string, v3: any, suffix: string): typeof ɵɵtextInterpolate4;\n\n/**\n *\n * Update text content with 5 bound values surrounded by other text.\n *\n * Used when a text node has 5 interpolated values in it:\n *\n * \\`\\`\\`html\n * <div>prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}suffix</div>\n * \\`\\`\\`\n *\n * Its compiled representation is:\n *\n * \\`\\`\\`ts\n * ɵɵtextInterpolate5(\n * 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, 'suffix');\n * \\`\\`\\`\n * @returns itself, so that it may be chained.\n * @see textInterpolateV\n * @codeGenApi\n */\nexport declare function ɵɵtextInterpolate5(prefix: string, v0: any, i0: string, v1: any, i1: string, v2: any, i2: string, v3: any, i3: string, v4: any, suffix: string): typeof ɵɵtextInterpolate5;\n\n/**\n *\n * Update text content with 6 bound values surrounded by other text.\n *\n * Used when a text node has 6 interpolated values in it:\n *\n * \\`\\`\\`html\n * <div>prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}suffix</div>\n * \\`\\`\\`\n *\n * Its compiled representation is:\n *\n * \\`\\`\\`ts\n * ɵɵtextInterpolate6(\n *    'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, 'suffix');\n * \\`\\`\\`\n *\n * @param i4 Static value used for concatenation only.\n * @param v5 Value checked for change. @returns itself, so that it may be chained.\n * @see textInterpolateV\n * @codeGenApi\n */\nexport declare function ɵɵtextInterpolate6(prefix: string, v0: any, i0: string, v1: any, i1: string, v2: any, i2: string, v3: any, i3: string, v4: any, i4: string, v5: any, suffix: string): typeof ɵɵtextInterpolate6;\n\n/**\n *\n * Update text content with 7 bound values surrounded by other text.\n *\n * Used when a text node has 7 interpolated values in it:\n *\n * \\`\\`\\`html\n * <div>prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}suffix</div>\n * \\`\\`\\`\n *\n * Its compiled representation is:\n *\n * \\`\\`\\`ts\n * ɵɵtextInterpolate7(\n *    'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, 'suffix');\n * \\`\\`\\`\n * @returns itself, so that it may be chained.\n * @see textInterpolateV\n * @codeGenApi\n */\nexport declare function ɵɵtextInterpolate7(prefix: string, v0: any, i0: string, v1: any, i1: string, v2: any, i2: string, v3: any, i3: string, v4: any, i4: string, v5: any, i5: string, v6: any, suffix: string): typeof ɵɵtextInterpolate7;\n\n/**\n *\n * Update text content with 8 bound values surrounded by other text.\n *\n * Used when a text node has 8 interpolated values in it:\n *\n * \\`\\`\\`html\n * <div>prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}-{{v7}}suffix</div>\n * \\`\\`\\`\n *\n * Its compiled representation is:\n *\n * \\`\\`\\`ts\n * ɵɵtextInterpolate8(\n *  'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, '-', v7, 'suffix');\n * \\`\\`\\`\n * @returns itself, so that it may be chained.\n * @see textInterpolateV\n * @codeGenApi\n */\nexport declare function ɵɵtextInterpolate8(prefix: string, v0: any, i0: string, v1: any, i1: string, v2: any, i2: string, v3: any, i3: string, v4: any, i4: string, v5: any, i5: string, v6: any, i6: string, v7: any, suffix: string): typeof ɵɵtextInterpolate8;\n\n/**\n * Update text content with 9 or more bound values other surrounded by text.\n *\n * Used when the number of interpolated values exceeds 8.\n *\n * \\`\\`\\`html\n * <div>prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}-{{v7}}-{{v8}}-{{v9}}suffix</div>\n * \\`\\`\\`\n *\n * Its compiled representation is:\n *\n * \\`\\`\\`ts\n * ɵɵtextInterpolateV(\n *  ['prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, '-', v7, '-', v9,\n *  'suffix']);\n * \\`\\`\\`\n *.\n * @param values The collection of values and the strings in between those values, beginning with\n * a string prefix and ending with a string suffix.\n * (e.g. \\`['prefix', value0, '-', value1, '-', value2, ..., value99, 'suffix']\\`)\n *\n * @returns itself, so that it may be chained.\n * @codeGenApi\n */\nexport declare function ɵɵtextInterpolateV(values: any[]): typeof ɵɵtextInterpolateV;\n\n/**\n * A template tag function for promoting the associated constant literal to a\n * TrustedHTML. Interpolation is explicitly not allowed.\n *\n * @param html constant template literal containing trusted HTML.\n * @returns TrustedHTML wrapping \\`html\\`.\n *\n * @security This is a security-sensitive function and should only be used to\n * convert constant values of attributes and properties found in\n * application-provided Angular templates to TrustedHTML.\n *\n * @codeGenApi\n */\nexport declare function ɵɵtrustConstantHtml(html: TemplateStringsArray): TrustedHTML | string;\n\n/**\n * A template tag function for promoting the associated constant literal to a\n * TrustedScriptURL. Interpolation is explicitly not allowed.\n *\n * @param url constant template literal containing a trusted script URL.\n * @returns TrustedScriptURL wrapping \\`url\\`.\n *\n * @security This is a security-sensitive function and should only be used to\n * convert constant values of attributes and properties found in\n * application-provided Angular templates to TrustedScriptURL.\n *\n * @codeGenApi\n */\nexport declare function ɵɵtrustConstantResourceUrl(url: TemplateStringsArray): TrustedScriptURL | string;\n\n/**\n * Creates new QueryList, stores the reference in LView and returns QueryList.\n *\n * @param predicate The type for which the query will search\n * @param flags Flags associated with the query\n * @param read What to save in the query\n *\n * @codeGenApi\n */\nexport declare function ɵɵviewQuery<T>(predicate: ProviderToken<unknown> | string[], flags: QueryFlags, read?: any): void;\n\nexport { }\n`;\n","const ANGULAR_PLATFORM_BROWSER_FILE = `/**\n* @license Angular v14.2.8\n* (c) 2010-2022 Google LLC. https://angular.io/\n* License: MIT\n*/\n\n\nimport { ApplicationRef } from '@angular/core';\nimport { ComponentRef } from '@angular/core';\nimport { DebugElement } from '@angular/core';\nimport { DebugNode } from '@angular/core';\nimport { GetTestability } from '@angular/core';\nimport * as i0 from '@angular/core';\nimport * as i1 from '@angular/common';\nimport { ImportedNgModuleProviders } from '@angular/core';\nimport { InjectionToken } from '@angular/core';\nimport { ModuleWithProviders } from '@angular/core';\nimport { NgZone } from '@angular/core';\nimport { OnDestroy } from '@angular/core';\nimport { PlatformRef } from '@angular/core';\nimport { Predicate } from '@angular/core';\nimport { Provider } from '@angular/core';\nimport { Renderer2 } from '@angular/core';\nimport { RendererFactory2 } from '@angular/core';\nimport { RendererType2 } from '@angular/core';\nimport { Sanitizer } from '@angular/core';\nimport { SecurityContext } from '@angular/core';\nimport { StaticProvider } from '@angular/core';\nimport { Testability } from '@angular/core';\nimport { TestabilityRegistry } from '@angular/core';\nimport { Type } from '@angular/core';\nimport { Version } from '@angular/core';\nimport { ɵConsole } from '@angular/core';\nimport { ɵDomAdapter } from '@angular/common';\nimport { ɵgetDOM } from '@angular/common';\n\n/**\n* Set of config options available during the application bootstrap operation.\n*\n* @developerPreview\n* @publicApi\n*/\nexport declare interface ApplicationConfig {\n /**\n\t* List of providers that should be available to the root component and all its children.\n\t*/\n providers: Array<Provider | ImportedNgModuleProviders>;\n}\n\n/**\n* Bootstraps an instance of an Angular application and renders a standalone component as the\n* application's root component. More information about standalone components can be found in [this\n* guide](guide/standalone-components).\n*\n* @usageNotes\n* The root component passed into this function *must* be a standalone one (should have the\n* \\`standalone: true\\` flag in the \\`@Component\\` decorator config).\n*\n* \\`\\`\\`typescript\n* @Component({\n*   standalone: true,\n*   template: 'Hello world!'\n* })\n* class RootComponent {}\n*\n* const appRef: ApplicationRef = await bootstrapApplication(RootComponent);\n* \\`\\`\\`\n*\n* You can add the list of providers that should be available in the application injector by\n* specifying the \\`providers\\` field in an object passed as the second argument:\n*\n* \\`\\`\\`typescript\n* await bootstrapApplication(RootComponent, {\n*   providers: [\n*     {provide: BACKEND_URL, useValue: 'https://yourdomain.com/api'}\n*   ]\n* });\n* \\`\\`\\`\n*\n* The \\`importProvidersFrom\\` helper method can be used to collect all providers from any\n* existing NgModule (and transitively from all NgModules that it imports):\n*\n* \\`\\`\\`typescript\n* await bootstrapApplication(RootComponent, {\n*   providers: [\n*     importProvidersFrom(SomeNgModule)\n*   ]\n* });\n* \\`\\`\\`\n*\n* Note: the \\`bootstrapApplication\\` method doesn't include [Testability](api/core/Testability) by\n* default. You can add [Testability](api/core/Testability) by getting the list of necessary\n* providers using \\`provideProtractorTestingSupport()\\` function and adding them into the \\`providers\\`\n* array, for example:\n*\n* \\`\\`\\`typescript\n* import {provideProtractorTestingSupport} from '@angular/platform-browser';\n*\n* await bootstrapApplication(RootComponent, {providers: [provideProtractorTestingSupport()]});\n* \\`\\`\\`\n*\n* @param rootComponent A reference to a standalone component that should be rendered.\n* @param options Extra configuration for the bootstrap operation, see \\`ApplicationConfig\\` for\n*     additional info.\n* @returns A promise that returns an \\`ApplicationRef\\` instance once resolved.\n*\n* @publicApi\n* @developerPreview\n*/\nexport declare function bootstrapApplication(rootComponent: Type<unknown>, options?: ApplicationConfig): Promise<ApplicationRef>;\n\n/**\n* Exports required infrastructure for all Angular apps.\n* Included by default in all Angular apps created with the CLI\n* \\`new\\` command.\n* Re-exports \\`CommonModule\\` and \\`ApplicationModule\\`, making their\n* exports and providers available to all apps.\n*\n* @publicApi\n*/\nexport declare class BrowserModule {\n constructor(providersAlreadyPresent: boolean | null);\n /**\n\t* Configures a browser-based app to transition from a server-rendered app, if\n\t* one is present on the page.\n\t*\n\t* @param params An object containing an identifier for the app to transition.\n\t* The ID must match between the client and server versions of the app.\n\t* @returns The reconfigured \\`BrowserModule\\` to import into the app's root \\`AppModule\\`.\n\t*/\n static withServerTransition(params: {\n\t appId: string;\n }): ModuleWithProviders<BrowserModule>;\n static ɵfac: i0.ɵɵFactoryDeclaration<BrowserModule, [{ optional: true; skipSelf: true; }]>;\n static ɵmod: i0.ɵɵNgModuleDeclaration<BrowserModule, never, never, [typeof i1.CommonModule, typeof i0.ApplicationModule]>;\n static ɵinj: i0.ɵɵInjectorDeclaration<BrowserModule>;\n}\n\n/**\n* NgModule to install on the client side while using the \\`TransferState\\` to transfer state from\n* server to client.\n*\n* @publicApi\n* @deprecated no longer needed, you can inject the \\`TransferState\\` in an app without providing\n*     this module.\n*/\nexport declare class BrowserTransferStateModule {\n static ɵfac: i0.ɵɵFactoryDeclaration<BrowserTransferStateModule, never>;\n static ɵmod: i0.ɵɵNgModuleDeclaration<BrowserTransferStateModule, never, never, never>;\n static ɵinj: i0.ɵɵInjectorDeclaration<BrowserTransferStateModule>;\n}\n\n/**\n* Predicates for use with {@link DebugElement}'s query functions.\n*\n* @publicApi\n*/\nexport declare class By {\n /**\n\t* Match all nodes.\n\t*\n\t* @usageNotes\n\t* ### Example\n\t*\n\t* {@example platform-browser/dom/debug/ts/by/by.ts region='by_all'}\n\t*/\n static all(): Predicate<DebugNode>;\n /**\n\t* Match elements by the given CSS selector.\n\t*\n\t* @usageNotes\n\t* ### Example\n\t*\n\t* {@example platform-browser/dom/debug/ts/by/by.ts region='by_css'}\n\t*/\n static css(selector: string): Predicate<DebugElement>;\n /**\n\t* Match nodes that have the given directive present.\n\t*\n\t* @usageNotes\n\t* ### Example\n\t*\n\t* {@example platform-browser/dom/debug/ts/by/by.ts region='by_directive'}\n\t*/\n static directive(type: Type<any>): Predicate<DebugNode>;\n}\n\n/**\n* Create an instance of an Angular application without bootstrapping any components. This is useful\n* for the situation where one wants to decouple application environment creation (a platform and\n* associated injectors) from rendering components on a screen. Components can be subsequently\n* bootstrapped on the returned \\`ApplicationRef\\`.\n*\n* @param options Extra configuration for the application environment, see \\`ApplicationConfig\\` for\n*     additional info.\n* @returns A promise that returns an \\`ApplicationRef\\` instance once resolved.\n*\n* @publicApi\n* @developerPreview\n*/\nexport declare function createApplication(options?: ApplicationConfig): Promise<ApplicationRef>;\n\n/**\n* Disables Angular tools.\n*\n* @publicApi\n*/\nexport declare function disableDebugTools(): void;\n\n/**\n* DomSanitizer helps preventing Cross Site Scripting Security bugs (XSS) by sanitizing\n* values to be safe to use in the different DOM contexts.\n*\n* For example, when binding a URL in an \\`<a [href]=\"someValue\">\\` hyperlink, \\`someValue\\` will be\n* sanitized so that an attacker cannot inject e.g. a \\`javascript:\\` URL that would execute code on\n* the website.\n*\n* In specific situations, it might be necessary to disable sanitization, for example if the\n* application genuinely needs to produce a \\`javascript:\\` style link with a dynamic value in it.\n* Users can bypass security by constructing a value with one of the \\`bypassSecurityTrust...\\`\n* methods, and then binding to that value from the template.\n*\n* These situations should be very rare, and extraordinary care must be taken to avoid creating a\n* Cross Site Scripting (XSS) security bug!\n*\n* When using \\`bypassSecurityTrust...\\`, make sure to call the method as early as possible and as\n* close as possible to the source of the value, to make it easy to verify no security bug is\n* created by its use.\n*\n* It is not required (and not recommended) to bypass security if the value is safe, e.g. a URL that\n* does not start with a suspicious protocol, or an HTML snippet that does not contain dangerous\n* code. The sanitizer leaves safe values intact.\n*\n* @security Calling any of the \\`bypassSecurityTrust...\\` APIs disables Angular's built-in\n* sanitization for the value passed in. Carefully check and audit all values and code paths going\n* into this call. Make sure any user data is appropriately escaped for this security context.\n* For more detail, see the [Security Guide](https://g.co/ng/security).\n*\n* @publicApi\n*/\nexport declare abstract class DomSanitizer implements Sanitizer {\n /**\n\t* Sanitizes a value for use in the given SecurityContext.\n\t*\n\t* If value is trusted for the context, this method will unwrap the contained safe value and use\n\t* it directly. Otherwise, value will be sanitized to be safe in the given context, for example\n\t* by replacing URLs that have an unsafe protocol part (such as \\`javascript:\\`). The implementation\n\t* is responsible to make sure that the value can definitely be safely used in the given context.\n\t*/\n abstract sanitize(context: SecurityContext, value: SafeValue | string | null): string | null;\n /**\n\t* Bypass security and trust the given value to be safe HTML. Only use this when the bound HTML\n\t* is unsafe (e.g. contains \\`<script>\\` tags) and the code should be executed. The sanitizer will\n\t* leave safe HTML intact, so in most situations this method should not be used.\n\t*\n\t* **WARNING:** calling this method with untrusted user data exposes your application to XSS\n\t* security risks!\n\t*/\n abstract bypassSecurityTrustHtml(value: string): SafeHtml;\n /**\n\t* Bypass security and trust the given value to be safe style value (CSS).\n\t*\n\t* **WARNING:** calling this method with untrusted user data exposes your application to XSS\n\t* security risks!\n\t*/\n abstract bypassSecurityTrustStyle(value: string): SafeStyle;\n /**\n\t* Bypass security and trust the given value to be safe JavaScript.\n\t*\n\t* **WARNING:** calling this method with untrusted user data exposes your application to XSS\n\t* security risks!\n\t*/\n abstract bypassSecurityTrustScript(value: string): SafeScript;\n /**\n\t* Bypass security and trust the given value to be a safe style URL, i.e. a value that can be used\n\t* in hyperlinks or \\`<img src>\\`.\n\t*\n\t* **WARNING:** calling this method with untrusted user data exposes your application to XSS\n\t* security risks!\n\t*/\n abstract bypassSecurityTrustUrl(value: string): SafeUrl;\n /**\n\t* Bypass security and trust the given value to be a safe resource URL, i.e. a location that may\n\t* be used to load executable code from, like \\`<script src>\\`, or \\`<iframe src>\\`.\n\t*\n\t* **WARNING:** calling this method with untrusted user data exposes your application to XSS\n\t* security risks!\n\t*/\n abstract bypassSecurityTrustResourceUrl(value: string): SafeResourceUrl;\n static ɵfac: i0.ɵɵFactoryDeclaration<DomSanitizer, never>;\n static ɵprov: i0.ɵɵInjectableDeclaration<DomSanitizer>;\n}\n\n/**\n* Enabled Angular debug tools that are accessible via your browser's\n* developer console.\n*\n* Usage:\n*\n* 1. Open developer console (e.g. in Chrome Ctrl + Shift + j)\n* 1. Type \\`ng.\\` (usually the console will show auto-complete suggestion)\n* 1. Try the change detection profiler \\`ng.profiler.timeChangeDetection()\\`\n*    then hit Enter.\n*\n* @publicApi\n*/\nexport declare function enableDebugTools<T>(ref: ComponentRef<T>): ComponentRef<T>;\n\n/**\n* The injection token for the event-manager plug-in service.\n*\n* @publicApi\n*/\nexport declare const EVENT_MANAGER_PLUGINS: InjectionToken<EventManagerPlugin[]>;\n\n/**\n* An injectable service that provides event management for Angular\n* through a browser plug-in.\n*\n* @publicApi\n*/\nexport declare class EventManager {\n private _zone;\n private _plugins;\n private _eventNameToPlugin;\n /**\n\t* Initializes an instance of the event-manager service.\n\t*/\n constructor(plugins: EventManagerPlugin[], _zone: NgZone);\n /**\n\t* Registers a handler for a specific element and event.\n\t*\n\t* @param element The HTML element to receive event notifications.\n\t* @param eventName The name of the event to listen for.\n\t* @param handler A function to call when the notification occurs. Receives the\n\t* event object as an argument.\n\t* @returns  A callback function that can be used to remove the handler.\n\t*/\n addEventListener(element: HTMLElement, eventName: string, handler: Function): Function;\n /**\n\t* Registers a global handler for an event in a target view.\n\t*\n\t* @param target A target for global event notifications. One of \"window\", \"document\", or \"body\".\n\t* @param eventName The name of the event to listen for.\n\t* @param handler A function to call when the notification occurs. Receives the\n\t* event object as an argument.\n\t* @returns A callback function that can be used to remove the handler.\n\t* @deprecated No longer being used in Ivy code. To be removed in version 14.\n\t*/\n addGlobalEventListener(target: string, eventName: string, handler: Function): Function;\n /**\n\t* Retrieves the compilation zone in which event listeners are registered.\n\t*/\n getZone(): NgZone;\n static ɵfac: i0.ɵɵFactoryDeclaration<EventManager, never>;\n static ɵprov: i0.ɵɵInjectableDeclaration<EventManager>;\n}\n\ndeclare abstract class EventManagerPlugin {\n private _doc;\n constructor(_doc: any);\n manager: EventManager;\n abstract supports(eventName: string): boolean;\n abstract addEventListener(element: HTMLElement, eventName: string, handler: Function): Function;\n addGlobalEventListener(element: string, eventName: string, handler: Function): Function;\n}\n\n/**\n* Provides DOM operations in any browser environment.\n*\n* @security Tread carefully! Interacting with the DOM directly is dangerous and\n* can introduce XSS risks.\n*/\ndeclare abstract class GenericBrowserDomAdapter extends ɵDomAdapter {\n readonly supportsDOMEvents: boolean;\n}\n\n/**\n* DI token for providing [HammerJS](https://hammerjs.github.io/) support to Angular.\n* @see \\`HammerGestureConfig\\`\n*\n* @ngModule HammerModule\n* @publicApi\n*/\nexport declare const HAMMER_GESTURE_CONFIG: InjectionToken<HammerGestureConfig>;\n\n/**\n* Injection token used to provide a {@link HammerLoader} to Angular.\n*\n* @publicApi\n*/\nexport declare const HAMMER_LOADER: InjectionToken<HammerLoader>;\n\n/**\n* An injectable [HammerJS Manager](https://hammerjs.github.io/api/#hammermanager)\n* for gesture recognition. Configures specific event recognition.\n* @publicApi\n*/\nexport declare class HammerGestureConfig {\n /**\n\t* A set of supported event names for gestures to be used in Angular.\n\t* Angular supports all built-in recognizers, as listed in\n\t* [HammerJS documentation](https://hammerjs.github.io/).\n\t*/\n events: string[];\n /**\n\t* Maps gesture event names to a set of configuration options\n\t* that specify overrides to the default values for specific properties.\n\t*\n\t* The key is a supported event name to be configured,\n\t* and the options object contains a set of properties, with override values\n\t* to be applied to the named recognizer event.\n\t* For example, to disable recognition of the rotate event, specify\n\t*  \\`{\"rotate\": {\"enable\": false}}\\`.\n\t*\n\t* Properties that are not present take the HammerJS default values.\n\t* For information about which properties are supported for which events,\n\t* and their allowed and default values, see\n\t* [HammerJS documentation](https://hammerjs.github.io/).\n\t*\n\t*/\n overrides: {\n\t [key: string]: Object;\n };\n /**\n\t* Properties whose default values can be overridden for a given event.\n\t* Different sets of properties apply to different events.\n\t* For information about which properties are supported for which events,\n\t* and their allowed and default values, see\n\t* [HammerJS documentation](https://hammerjs.github.io/).\n\t*/\n options?: {\n\t cssProps?: any;\n\t domEvents?: boolean;\n\t enable?: boolean | ((manager: any) => boolean);\n\t preset?: any[];\n\t touchAction?: string;\n\t recognizers?: any[];\n\t inputClass?: any;\n\t inputTarget?: EventTarget;\n };\n /**\n\t* Creates a [HammerJS Manager](https://hammerjs.github.io/api/#hammermanager)\n\t* and attaches it to a given HTML element.\n\t* @param element The element that will recognize gestures.\n\t* @returns A HammerJS event-manager object.\n\t*/\n buildHammer(element: HTMLElement): HammerInstance;\n static ɵfac: i0.ɵɵFactoryDeclaration<HammerGestureConfig, never>;\n static ɵprov: i0.ɵɵInjectableDeclaration<HammerGestureConfig>;\n}\n\ndeclare interface HammerInstance {\n on(eventName: string, callback?: Function): void;\n off(eventName: string, callback?: Function): void;\n destroy?(): void;\n}\n\n/**\n* Function that loads HammerJS, returning a promise that is resolved once HammerJs is loaded.\n*\n* @publicApi\n*/\nexport declare type HammerLoader = () => Promise<void>;\n\n/**\n* Adds support for HammerJS.\n*\n* Import this module at the root of your application so that Angular can work with\n* HammerJS to detect gesture events.\n*\n* Note that applications still need to include the HammerJS script itself. This module\n* simply sets up the coordination layer between HammerJS and Angular's EventManager.\n*\n* @publicApi\n*/\nexport declare class HammerModule {\n static ɵfac: i0.ɵɵFactoryDeclaration<HammerModule, never>;\n static ɵmod: i0.ɵɵNgModuleDeclaration<HammerModule, never, never, never>;\n static ɵinj: i0.ɵɵInjectorDeclaration<HammerModule>;\n}\n\n/**\n* Create a \\`StateKey<T>\\` that can be used to store value of type T with \\`TransferState\\`.\n*\n* Example:\n*\n* \\`\\`\\`\n* const COUNTER_KEY = makeStateKey<number>('counter');\n* let value = 10;\n*\n* transferState.set(COUNTER_KEY, value);\n* \\`\\`\\`\n*\n* @publicApi\n*/\nexport declare function makeStateKey<T = void>(key: string): StateKey<T>;\n\n/**\n* A service for managing HTML \\`<meta>\\` tags.\n*\n* Properties of the \\`MetaDefinition\\` object match the attributes of the\n* HTML \\`<meta>\\` tag. These tags define document metadata that is important for\n* things like configuring a Content Security Policy, defining browser compatibility\n* and security settings, setting HTTP Headers, defining rich content for social sharing,\n* and Search Engine Optimization (SEO).\n*\n* To identify specific \\`<meta>\\` tags in a document, use an attribute selection\n* string in the format \\`\"tag_attribute='value string'\"\\`.\n* For example, an \\`attrSelector\\` value of \\`\"name='description'\"\\` matches a tag\n* whose \\`name\\` attribute has the value \\`\"description\"\\`.\n* Selectors are used with the \\`querySelector()\\` Document method,\n* in the format \\`meta[{attrSelector}]\\`.\n*\n* @see [HTML meta tag](https://developer.mozilla.org/docs/Web/HTML/Element/meta)\n* @see [Document.querySelector()](https://developer.mozilla.org/docs/Web/API/Document/querySelector)\n*\n*\n* @publicApi\n*/\nexport declare class Meta {\n private _doc;\n private _dom;\n constructor(_doc: any);\n /**\n\t* Retrieves or creates a specific \\`<meta>\\` tag element in the current HTML document.\n\t* In searching for an existing tag, Angular attempts to match the \\`name\\` or \\`property\\` attribute\n\t* values in the provided tag definition, and verifies that all other attribute values are equal.\n\t* If an existing element is found, it is returned and is not modified in any way.\n\t* @param tag The definition of a \\`<meta>\\` element to match or create.\n\t* @param forceCreation True to create a new element without checking whether one already exists.\n\t* @returns The existing element with the same attributes and values if found,\n\t* the new element if no match is found, or \\`null\\` if the tag parameter is not defined.\n\t*/\n addTag(tag: MetaDefinition, forceCreation?: boolean): HTMLMetaElement | null;\n /**\n\t* Retrieves or creates a set of \\`<meta>\\` tag elements in the current HTML document.\n\t* In searching for an existing tag, Angular attempts to match the \\`name\\` or \\`property\\` attribute\n\t* values in the provided tag definition, and verifies that all other attribute values are equal.\n\t* @param tags An array of tag definitions to match or create.\n\t* @param forceCreation True to create new elements without checking whether they already exist.\n\t* @returns The matching elements if found, or the new elements.\n\t*/\n addTags(tags: MetaDefinition[], forceCreation?: boolean): HTMLMetaElement[];\n /**\n\t* Retrieves a \\`<meta>\\` tag element in the current HTML document.\n\t* @param attrSelector The tag attribute and value to match against, in the format\n\t* \\`\"tag_attribute='value string'\"\\`.\n\t* @returns The matching element, if any.\n\t*/\n getTag(attrSelector: string): HTMLMetaElement | null;\n /**\n\t* Retrieves a set of \\`<meta>\\` tag elements in the current HTML document.\n\t* @param attrSelector The tag attribute and value to match against, in the format\n\t* \\`\"tag_attribute='value string'\"\\`.\n\t* @returns The matching elements, if any.\n\t*/\n getTags(attrSelector: string): HTMLMetaElement[];\n /**\n\t* Modifies an existing \\`<meta>\\` tag element in the current HTML document.\n\t* @param tag The tag description with which to replace the existing tag content.\n\t* @param selector A tag attribute and value to match against, to identify\n\t* an existing tag. A string in the format \\`\"tag_attribute=\\`value string\\`\"\\`.\n\t* If not supplied, matches a tag with the same \\`name\\` or \\`property\\` attribute value as the\n\t* replacement tag.\n\t* @return The modified element.\n\t*/\n updateTag(tag: MetaDefinition, selector?: string): HTMLMetaElement | null;\n /**\n\t* Removes an existing \\`<meta>\\` tag element from the current HTML document.\n\t* @param attrSelector A tag attribute and value to match against, to identify\n\t* an existing tag. A string in the format \\`\"tag_attribute=\\`value string\\`\"\\`.\n\t*/\n removeTag(attrSelector: string): void;\n /**\n\t* Removes an existing \\`<meta>\\` tag element from the current HTML document.\n\t* @param meta The tag definition to match against to identify an existing tag.\n\t*/\n removeTagElement(meta: HTMLMetaElement): void;\n private _getOrCreateElement;\n private _setMetaElementAttributes;\n private _parseSelector;\n private _containsAttributes;\n private _getMetaKeyMap;\n static ɵfac: i0.ɵɵFactoryDeclaration<Meta, never>;\n static ɵprov: i0.ɵɵInjectableDeclaration<Meta>;\n}\n\n/**\n* Represents the attributes of an HTML \\`<meta>\\` element. The element itself is\n* represented by the internal \\`HTMLMetaElement\\`.\n*\n* @see [HTML meta tag](https://developer.mozilla.org/docs/Web/HTML/Element/meta)\n* @see \\`Meta\\`\n*\n* @publicApi\n*/\nexport declare type MetaDefinition = {\n charset?: string;\n content?: string;\n httpEquiv?: string;\n id?: string;\n itemprop?: string;\n name?: string;\n property?: string;\n scheme?: string;\n url?: string;\n} & {\n [prop: string]: string;\n};\n\n/**\n* A factory function that returns a \\`PlatformRef\\` instance associated with browser service\n* providers.\n*\n* @publicApi\n*/\nexport declare const platformBrowser: (extraProviders?: StaticProvider[]) => PlatformRef;\n\n/**\n* Returns a set of providers required to setup [Testability](api/core/Testability) for an\n* application bootstrapped using the \\`bootstrapApplication\\` function. The set of providers is\n* needed to support testing an application with Protractor (which relies on the Testability APIs\n* to be present).\n*\n* @returns An array of providers required to setup Testability for an application and make it\n*     available for testing using Protractor.\n*\n* @developerPreview\n* @publicApi\n*/\nexport declare function provideProtractorTestingSupport(): Provider[];\n\n/**\n* Marker interface for a value that's safe to use as HTML.\n*\n* @publicApi\n*/\nexport declare interface SafeHtml extends SafeValue {\n}\n\n/**\n* Marker interface for a value that's safe to use as a URL to load executable code from.\n*\n* @publicApi\n*/\nexport declare interface SafeResourceUrl extends SafeValue {\n}\n\n/**\n* Marker interface for a value that's safe to use as JavaScript.\n*\n* @publicApi\n*/\nexport declare interface SafeScript extends SafeValue {\n}\n\n/**\n* Marker interface for a value that's safe to use as style (CSS).\n*\n* @publicApi\n*/\nexport declare interface SafeStyle extends SafeValue {\n}\n\n/**\n* Marker interface for a value that's safe to use as a URL linking to a document.\n*\n* @publicApi\n*/\nexport declare interface SafeUrl extends SafeValue {\n}\n\n/**\n* Marker interface for a value that's safe to use in a particular context.\n*\n* @publicApi\n*/\nexport declare interface SafeValue {\n}\n\n/**\n* A type-safe key to use with \\`TransferState\\`.\n*\n* Example:\n*\n* \\`\\`\\`\n* const COUNTER_KEY = makeStateKey<number>('counter');\n* let value = 10;\n*\n* transferState.set(COUNTER_KEY, value);\n* \\`\\`\\`\n*\n* @publicApi\n*/\nexport declare type StateKey<T> = string & {\n __not_a_string: never;\n __value_type?: T;\n};\n\n/**\n* A service that can be used to get and set the title of a current HTML document.\n*\n* Since an Angular application can't be bootstrapped on the entire HTML document (\\`<html>\\` tag)\n* it is not possible to bind to the \\`text\\` property of the \\`HTMLTitleElement\\` elements\n* (representing the \\`<title>\\` tag). Instead, this service can be used to set and get the current\n* title value.\n*\n* @publicApi\n*/\nexport declare class Title {\n private _doc;\n constructor(_doc: any);\n /**\n\t* Get the title of the current HTML document.\n\t*/\n getTitle(): string;\n /**\n\t* Set the title of the current HTML document.\n\t* @param newTitle\n\t*/\n setTitle(newTitle: string): void;\n static ɵfac: i0.ɵɵFactoryDeclaration<Title, never>;\n static ɵprov: i0.ɵɵInjectableDeclaration<Title>;\n}\n\n/**\n* A key value store that is transferred from the application on the server side to the application\n* on the client side.\n*\n* The \\`TransferState\\` is available as an injectable token.\n* On the client, just inject this token using DI and use it, it will be lazily initialized.\n* On the server it's already included if \\`renderApplication\\` function is used. Otherwise, import\n* the \\`ServerTransferStateModule\\` module to make the \\`TransferState\\` available.\n*\n* The values in the store are serialized/deserialized using JSON.stringify/JSON.parse. So only\n* boolean, number, string, null and non-class objects will be serialized and deserialized in a\n* non-lossy manner.\n*\n* @publicApi\n*/\nexport declare class TransferState {\n private store;\n private onSerializeCallbacks;\n /**\n\t* Get the value corresponding to a key. Return \\`defaultValue\\` if key is not found.\n\t*/\n get<T>(key: StateKey<T>, defaultValue: T): T;\n /**\n\t* Set the value corresponding to a key.\n\t*/\n set<T>(key: StateKey<T>, value: T): void;\n /**\n\t* Remove a key from the store.\n\t*/\n remove<T>(key: StateKey<T>): void;\n /**\n\t* Test whether a key exists in the store.\n\t*/\n hasKey<T>(key: StateKey<T>): boolean;\n /**\n\t* Indicates whether the state is empty.\n\t*/\n get isEmpty(): boolean;\n /**\n\t* Register a callback to provide the value for a key when \\`toJson\\` is called.\n\t*/\n onSerialize<T>(key: StateKey<T>, callback: () => T): void;\n /**\n\t* Serialize the current state of the store to JSON.\n\t*/\n toJson(): string;\n static ɵfac: i0.ɵɵFactoryDeclaration<TransferState, never>;\n static ɵprov: i0.ɵɵInjectableDeclaration<TransferState>;\n}\n\n/**\n* @publicApi\n*/\nexport declare const VERSION: Version;\n\n/**\n* A \\`DomAdapter\\` powered by full browser DOM APIs.\n*\n* @security Tread carefully! Interacting with the DOM directly is dangerous and\n* can introduce XSS risks.\n*/\nexport declare class ɵBrowserDomAdapter extends GenericBrowserDomAdapter {\n static makeCurrent(): void;\n onAndCancel(el: Node, evt: any, listener: any): Function;\n dispatchEvent(el: Node, evt: any): void;\n remove(node: Node): void;\n createElement(tagName: string, doc?: Document): HTMLElement;\n createHtmlDocument(): Document;\n getDefaultDocument(): Document;\n isElementNode(node: Node): boolean;\n isShadowRoot(node: any): boolean;\n /** @deprecated No longer being used in Ivy code. To be removed in version 14. */\n getGlobalEventTarget(doc: Document, target: string): EventTarget | null;\n getBaseHref(doc: Document): string | null;\n resetBaseElement(): void;\n getUserAgent(): string;\n getCookie(name: string): string | null;\n}\n\nexport declare class ɵBrowserGetTestability implements GetTestability {\n addToWindow(registry: TestabilityRegistry): void;\n findTestabilityInTree(registry: TestabilityRegistry, elem: any, findInAncestors: boolean): Testability | null;\n}\n\nexport declare class ɵDomEventsPlugin extends EventManagerPlugin {\n constructor(doc: any);\n supports(eventName: string): boolean;\n addEventListener(element: HTMLElement, eventName: string, handler: Function): Function;\n removeEventListener(target: any, eventName: string, callback: Function): void;\n static ɵfac: i0.ɵɵFactoryDeclaration<ɵDomEventsPlugin, never>;\n static ɵprov: i0.ɵɵInjectableDeclaration<ɵDomEventsPlugin>;\n}\n\nexport declare class ɵDomRendererFactory2 implements RendererFactory2 {\n private eventManager;\n private sharedStylesHost;\n private appId;\n private rendererByCompId;\n private defaultRenderer;\n constructor(eventManager: EventManager, sharedStylesHost: ɵDomSharedStylesHost, appId: string);\n createRenderer(element: any, type: RendererType2 | null): Renderer2;\n begin(): void;\n end(): void;\n static ɵfac: i0.ɵɵFactoryDeclaration<ɵDomRendererFactory2, never>;\n static ɵprov: i0.ɵɵInjectableDeclaration<ɵDomRendererFactory2>;\n}\n\nexport declare class ɵDomSanitizerImpl extends DomSanitizer {\n private _doc;\n constructor(_doc: any);\n sanitize(ctx: SecurityContext, value: SafeValue | string | null): string | null;\n bypassSecurityTrustHtml(value: string): SafeHtml;\n bypassSecurityTrustStyle(value: string): SafeStyle;\n bypassSecurityTrustScript(value: string): SafeScript;\n bypassSecurityTrustUrl(value: string): SafeUrl;\n bypassSecurityTrustResourceUrl(value: string): SafeResourceUrl;\n static ɵfac: i0.ɵɵFactoryDeclaration<ɵDomSanitizerImpl, never>;\n static ɵprov: i0.ɵɵInjectableDeclaration<ɵDomSanitizerImpl>;\n}\n\nexport declare class ɵDomSharedStylesHost extends ɵSharedStylesHost implements OnDestroy {\n private _doc;\n private _hostNodes;\n constructor(_doc: any);\n private _addStylesToHost;\n addHost(hostNode: Node): void;\n removeHost(hostNode: Node): void;\n onStylesAdded(additions: Set<string>): void;\n ngOnDestroy(): void;\n static ɵfac: i0.ɵɵFactoryDeclaration<ɵDomSharedStylesHost, never>;\n static ɵprov: i0.ɵɵInjectableDeclaration<ɵDomSharedStylesHost>;\n}\n\nexport declare function ɵescapeHtml(text: string): string;\n\nexport declare function ɵflattenStyles(compId: string, styles: Array<any | any[]>, target: string[]): string[];\n\nexport { ɵgetDOM }\n\n/**\n* Event plugin that adds Hammer support to an application.\n*\n* @ngModule HammerModule\n*/\nexport declare class ɵHammerGesturesPlugin extends EventManagerPlugin {\n private _config;\n private console;\n private loader?;\n private _loaderPromise;\n constructor(doc: any, _config: HammerGestureConfig, console: ɵConsole, loader?: HammerLoader | null | undefined);\n supports(eventName: string): boolean;\n addEventListener(element: HTMLElement, eventName: string, handler: Function): Function;\n isCustomEvent(eventName: string): boolean;\n static ɵfac: i0.ɵɵFactoryDeclaration<ɵHammerGesturesPlugin, [null, null, null, { optional: true; }]>;\n static ɵprov: i0.ɵɵInjectableDeclaration<ɵHammerGesturesPlugin>;\n}\n\nexport declare function ɵinitDomAdapter(): void;\n\nexport declare const ɵINTERNAL_BROWSER_PLATFORM_PROVIDERS: StaticProvider[];\n\n/**\n* @publicApi\n* A browser plug-in that provides support for handling of key events in Angular.\n*/\nexport declare class ɵKeyEventsPlugin extends EventManagerPlugin {\n /**\n\t* Initializes an instance of the browser plug-in.\n\t* @param doc The document in which key events will be detected.\n\t*/\n constructor(doc: any);\n /**\n\t* Reports whether a named key event is supported.\n\t* @param eventName The event name to query.\n\t* @return True if the named key event is supported.\n\t*/\n supports(eventName: string): boolean;\n /**\n\t* Registers a handler for a specific element and key event.\n\t* @param element The HTML element to receive event notifications.\n\t* @param eventName The name of the key event to listen for.\n\t* @param handler A function to call when the notification occurs. Receives the\n\t* event object as an argument.\n\t* @returns The key event that was registered.\n\t*/\n addEventListener(element: HTMLElement, eventName: string, handler: Function): Function;\n /**\n\t* Parses the user provided full keyboard event definition and normalizes it for\n\t* later internal use. It ensures the string is all lowercase, converts special\n\t* characters to a standard spelling, and orders all the values consistently.\n\t*\n\t* @param eventName The name of the key event to listen for.\n\t* @returns an object with the full, normalized string, and the dom event name\n\t* or null in the case when the event doesn't match a keyboard event.\n\t*/\n static parseEventName(eventName: string): {\n\t fullKey: string;\n\t domEventName: string;\n } | null;\n /**\n\t* Determines whether the actual keys pressed match the configured key code string.\n\t* The \\`fullKeyCode\\` event is normalized in the \\`parseEventName\\` method when the\n\t* event is attached to the DOM during the \\`addEventListener\\` call. This is unseen\n\t* by the end user and is normalized for internal consistency and parsing.\n\t*\n\t* @param event The keyboard event.\n\t* @param fullKeyCode The normalized user defined expected key event string\n\t* @returns boolean.\n\t*/\n static matchEventFullKeyCode(event: KeyboardEvent, fullKeyCode: string): boolean;\n /**\n\t* Configures a handler callback for a key event.\n\t* @param fullKey The event name that combines all simultaneous keystrokes.\n\t* @param handler The function that responds to the key event.\n\t* @param zone The zone in which the event occurred.\n\t* @returns A callback function.\n\t*/\n static eventCallback(fullKey: string, handler: Function, zone: NgZone): Function;\n static ɵfac: i0.ɵɵFactoryDeclaration<ɵKeyEventsPlugin, never>;\n static ɵprov: i0.ɵɵInjectableDeclaration<ɵKeyEventsPlugin>;\n}\n\nexport declare const ɵNAMESPACE_URIS: {\n [ns: string]: string;\n};\n\nexport declare class ɵSharedStylesHost {\n addStyles(styles: string[]): void;\n onStylesAdded(additions: Set<string>): void;\n getAllStyles(): string[];\n static ɵfac: i0.ɵɵFactoryDeclaration<ɵSharedStylesHost, never>;\n static ɵprov: i0.ɵɵInjectableDeclaration<ɵSharedStylesHost>;\n}\n\nexport declare function ɵshimContentAttribute(componentShortId: string): string;\n\nexport declare function ɵshimHostAttribute(componentShortId: string): string;\n\n/**\n* An id that identifies a particular application being bootstrapped, that should\n* match across the client/server boundary.\n*/\nexport declare const ɵTRANSITION_ID: InjectionToken<unknown>;\n\nexport { }\n`;\n\nexport default ANGULAR_PLATFORM_BROWSER_FILE;\n","import { Component } from '@angular/core';\n\nimport WorkspaceWithRendererDebugComponent from './workspace-with-renderer-debug.component';\n\n@Component({\n\tselector: 'app-root',\n\tstandalone: true,\n\timports: [\n\t\tWorkspaceWithRendererDebugComponent\n\t],\n\ttemplateUrl: './app.component.html',\n\tstyleUrls: ['./app.component.scss']\n})\nexport default class AppComponent {\n\n}\n","<wp-workspace-with-renderer-debug></wp-workspace-with-renderer-debug>\n","import {\n\tAfterViewInit,\n\tComponent,\n\tElementRef,\n\tEventEmitter,\n\tInject,\n\tOnDestroy,\n\tOutput,\n\tViewChild\n} from '@angular/core';\nimport { Subscription } from 'rxjs';\n\nimport IMonacoEditorConfig from './i-monaco-editor-config';\nimport IStandaloneEditorConstructionOptions2 from './i-standalone-editor-construction-options2';\nimport MONACO_EDITOR_CONFIG_INJECTION_TOKEN from './monaco-editor-config-injection-token';\n\nlet loadedMonaco = false;\nlet loadPromise: Promise<void>;\n\n@Component({\n\ttemplate: ''\n})\nexport default abstract class BaseEditor implements AfterViewInit, OnDestroy {\n\t@Output() onInit = new EventEmitter<any>();\n\t@Output() isInit = new EventEmitter<void>();\n\n\t@ViewChild(\n\t\t'editorContainer',\n\t\t{ static: true }\n\t) _editorContainer!: ElementRef;\n\n\tprotected _editor: any;\n\tprotected _options!: IStandaloneEditorConstructionOptions2;\n\tprotected _windowResizeSubscription!: Subscription;\n\n\tconstructor(@Inject(MONACO_EDITOR_CONFIG_INJECTION_TOKEN) protected _config: IMonacoEditorConfig) { }\n\n\tngAfterViewInit(): void {\n\t\tif (loadedMonaco) {\n\t\t\t// Wait until monaco editor is available\n\t\t\tloadPromise.then(() => {\n\t\t\t\tthis.isInit.emit();\n\t\t\t\tthis.initMonaco(this._options);\n\t\t\t});\n\t\t} else {\n\t\t\tloadedMonaco = true;\n\t\t\tloadPromise = new Promise<void>((resolve: any) => {\n\t\t\t\tconst baseUrl = (this._config.baseUrl || './assets') + '/monaco-editor/min/vs';\n\t\t\t\tif (typeof ((<any>window).monaco) === 'object') {\n\t\t\t\t\tresolve();\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tconst onGotAmdLoader: any = () => {\n\t\t\t\t\t// Load monaco\n\t\t\t\t\t(<any>window).require.config({ paths: { 'vs': `${baseUrl}` } });\n\t\t\t\t\t(<any>window).require([`vs/editor/editor.main`], () => {\n\t\t\t\t\t\tif (typeof this._config.onMonacoLoad === 'function') {\n\t\t\t\t\t\t\tthis._config.onMonacoLoad();\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthis.isInit.emit();\n\t\t\t\t\t\tthis.initMonaco(this._options);\n\t\t\t\t\t\tresolve();\n\t\t\t\t\t});\n\t\t\t\t};\n\n\t\t\t\t// Load AMD loader if necessary\n\t\t\t\tif (!(<any>window).require) {\n\t\t\t\t\tconst loaderScript: HTMLScriptElement = document.createElement('script');\n\t\t\t\t\tloaderScript.type = 'text/javascript';\n\t\t\t\t\tloaderScript.src = `${baseUrl}/loader.js`;\n\t\t\t\t\tloaderScript.addEventListener('load', onGotAmdLoader);\n\t\t\t\t\tdocument.body.appendChild(loaderScript);\n\t\t\t\t} else {\n\t\t\t\t\tonGotAmdLoader();\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n\n\tprotected abstract initMonaco(options: any): void;\n\n\tngOnDestroy() {\n\t\tif (this._windowResizeSubscription) {\n\t\t\tthis._windowResizeSubscription.unsubscribe();\n\t\t}\n\t\tif (this._editor) {\n\t\t\tthis._editor.dispose();\n\t\t\tthis._editor = undefined;\n\t\t}\n\t}\n}\n","import { Component } from '@angular/core';\nimport { FlexLayoutModule } from '@angular/flex-layout';\n\n@Component({\n\tselector: 'wp-clickable-element',\n\tstandalone: true,\n\timports: [\n\t\tFlexLayoutModule\n\t],\n\ttemplateUrl: './clickable-element.component.html',\n\tstyleUrls: ['./clickable-element.component.scss']\n})\nexport default class ClickableElementComponent { }\n","<div\n\tfxLayout=\"row\"\n\tfxLayoutAlign=\"center center\"\n>\n\t<ng-content></ng-content>\n\t<!-- <img\n\t\tclass=\"icon\"\n\t\t[src]=\"'assets/icons/' + icon + '.svg'\"\n\t> -->\n</div>\n","import {\n\tComponent,\n\tInput\n} from '@angular/core';\nimport { FlexLayoutModule } from '@angular/flex-layout';\n\n@Component({\n\tselector: 'wp-clickable-icon',\n\tstandalone: true,\n\timports: [\n\t\tFlexLayoutModule\n\t],\n\ttemplateUrl: './clickable-icon.component.html',\n\tstyleUrls: ['./clickable-icon.component.scss']\n})\nexport default class ClickableIconComponent {\n\t@Input() icon!: string;\n}\n","<div\n\tfxLayout=\"row\"\n\tfxLayoutAlign=\"center center\"\n>\n\t<img\n\t\tclass=\"icon\"\n\t\t[src]=\"'assets/icons/' + icon + '.svg'\"\n\t>\n</div>\n","import { CommonModule } from '@angular/common';\nimport {\n\tComponent,\n\tInjectable,\n\tInput,\n\tOnChanges\n} from '@angular/core';\n\nimport createNgComponentFromString from './create-ng-component-from-string';\nimport INgProjectFilesService from './i-ng-project-files-service';\n\n/**\n * To use this component, you should have this line\n * in main.ts file :\n * import '@angular/compiler';\n */\n@Component({\n\tselector: 'wp-compile-component',\n\tstandalone: true,\n\ttemplateUrl: './compile-component.component.html',\n\tstyleUrls: ['./compile-component.component.scss'],\n\timports: [\n\t\tCommonModule\n\t]\n})\n@Injectable()\nexport default class CompileComponentComponent implements OnChanges {\n\t@Input() ngComponentFileName!: string;\n\n\tdynamicComponent: any;\n\n\tconstructor(\n\t\tprivate readonly _ngProjectFilesService: INgProjectFilesService\n\t) {\n\t\tthis.listenChanges();\n\t}\n\n\tget renderComponent(): boolean {\n\t\treturn this.dynamicComponent !== undefined;\n\t}\n\n\tngOnChanges() {\n\t\tthis.update();\n\t}\n\n\tprivate update(): void {\n\t\tthis.dynamicComponent = createNgComponentFromString(\n\t\t\tthis.ngComponentFileName,\n\t\t\tthis._ngProjectFilesService\n\t\t);\n\t}\n\n\tprivate listenChanges(): void {\n\t\t/**\n\t\t * TODO\n\t\t */\n\t\tthis._ngProjectFilesService.change$.subscribe(() => {\n\t\t\tthis.update();\n\t\t});\n\t}\n}\n","<ng-container *ngIf=\"renderComponent\">\n\t<!-- <ng-container\n\t\t*ngComponentOutlet=\"dynamicComponent; ngModuleFactory: dynamicModule;\"\n\t></ng-container> -->\n\t<ng-container\n\t\t*ngComponentOutlet=\"dynamicComponent\"\n\t></ng-container>\n</ng-container>\n","import {\n\tComponentRef,\n\tDirective,\n\tElementRef,\n\tHostListener,\n\tInjector,\n\tInput\n} from '@angular/core';\nimport {\n\tfilter,\n\tfromEvent,\n\tmap,\n\tObservable,\n\tSubscription,\n\ttake\n} from 'rxjs';\n\nimport ContextMenuRef from './context-menu-ref.service';\nimport FileContextMenuComponent from './file-context-menu.component';\nimport OverlayContainerComponent from './overlay-container.component';\nimport ShowOverlayService from './show-overlay.service';\n\n@Directive({\n\tselector: '[wp-context-menu-2]',\n\tstandalone: true\n})\nexport default class ContextMenu2Directive {\n\t// @Input() contextMenuTemplate!: TemplateRef<any>;\n\t// @Input() contextMenuInput: any;\n\t@Input() filePath!: string;\n\n\tprivate _sub?: Subscription;\n\tprivate _overlayRef?: ComponentRef<OverlayContainerComponent>;\n\n\tconstructor(\n\t\tprivate readonly _showOverlayService: ShowOverlayService,\n\t\tprivate readonly _injector: Injector,\n\t\telementRef: ElementRef\n\t) {\n\t\telementRef.nativeElement.oncontextmenu = () => false;\n\t}\n\n\t@HostListener(\n\t\t'contextmenu',\n\t\t['$event']\n\t)\n\tonContextMenu({ x, y }: MouseEvent): void {\n\t\tthis.open(\n\t\t\t{\n\t\t\t\tx,\n\t\t\t\ty\n\t\t\t} as MouseEvent\n\t\t);\n\t}\n\n\topen({ x, y }: MouseEvent): void {\n\t\tthis.close();\n\t\tconst injector = Injector.create(\n\t\t\t[\n\t\t\t\t{\n\t\t\t\t\tprovide: ContextMenuRef,\n\t\t\t\t\tuseValue: {\n\t\t\t\t\t\tclose: () => {\n\t\t\t\t\t\t\tthis.close();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t],\n\t\t\tthis._injector\n\t\t);\n\t\tthis._overlayRef = this._showOverlayService.showOverlay2(\n\t\t\tFileContextMenuComponent,\n\t\t\t{\n\t\t\t\tx,\n\t\t\t\ty\n\t\t\t},\n\t\t\t{ filePath: this.filePath },\n\t\t\tinjector\n\t\t);\n\t\tconst containerHtml = this._showOverlayService.container!.element.nativeElement as HTMLElement;\n\t\tif (containerHtml.style.pointerEvents === 'none') {\n\t\t\treturn;\n\t\t}\n\t\tthis._sub = listenClickOutside(\n\t\t\tthis._overlayRef,\n\t\t).subscribe(() => {\n\t\t\tthis.close();\n\t\t});\n\t}\n\n\tclose(): void {\n\t\tif (this._overlayRef === undefined) {\n\t\t\treturn;\n\t\t}\n\t\tthis._sub?.unsubscribe();\n\t\tthis._overlayRef?.destroy();\n\t\tthis._overlayRef = undefined;\n\t}\n}\n\nfunction listenClickOutside(\n\toverlayRef: ComponentRef<OverlayContainerComponent>\n): Observable<void> {\n\treturn fromEvent<MouseEvent>(\n\t\tdocument,\n\t\t'click'\n\t).pipe(\n\t\tfilter(event => {\n\t\t\tconst clickTargetHtml = event.target as HTMLElement;\n\t\t\tconst contentElementRef = overlayRef.instance.contentElementRef;\n\t\t\tconst contentHtmlElement = contentElementRef.nativeElement as HTMLElement;\n\t\t\treturn !contentHtmlElement.contains(clickTargetHtml);\n\t\t}),\n\t\ttake(1),\n\t\tmap(e => undefined)\n\t);\n}\n","export default class ContextMenuRef {\n\tclose(): void {\n\t\t\n\t}\n}\n","export function convertToKebabCase(text: string): string {\n\tconst match = text.match(/[A-Z]{2,}(?=[A-Z][a-z]+[0-9]*|\\b)|[A-Z]?[a-z]+[0-9]*|[A-Z]|[0-9]+/g);\n\tif (match === null) {\n\t\treturn '';\n\t}\n\treturn match.map(x => x.toLowerCase()).join('-');\n}\n","import { Injectable } from '@angular/core';\n\nimport addNewImport from './add-new-import';\nimport { convertToKebabCase } from './convert-to-kebab-case';\nimport { getAvailableName } from './get-available-name';\nimport { getTypescriptFileName } from './get-typescript-file-name';\nimport ProjectFilesService from './project-files.service';\nimport ShowInputBoxService from './show-input-box.service';\nimport { camalize } from './to-camel-case';\n\n@Injectable({ providedIn: 'root' })\nexport default class CreateFunctionInWorkspaceService {\n\tconstructor(\n\t\tprivate readonly _projectFilesService: ProjectFilesService,\n\t\tprivate readonly _showInputBoxService: ShowInputBoxService\n\t) { }\n\n\tasync createFunction(data: { filePath: string }): Promise<void> {\n\t\tconst interfaceNameFromUser = await this._showInputBoxService.showInputBox({\n\t\t\tplaceHolder: 'functionName',\n\t\t\tprompt: 'Function name'\n\t\t});\n\t\tif (interfaceNameFromUser === undefined) {\n\t\t\treturn;\n\t\t}\n\t\tlet kebabName = convertToKebabCase(interfaceNameFromUser);\n\t\tconst availableNameKebab = await getAvailableName(\n\t\t\tthis._projectFilesService.filePathList.map(e => e.path),\n\t\t\tkebabName\n\t\t);\n\t\tconst newFilePath = getTypescriptFileName(availableNameKebab)\n\t\tconst functionName = camalize(kebabName);\n\t\tthis._projectFilesService.updt_create({\n\t\t\tpath: newFilePath,\n\t\t\tcontent: `export default function ${functionName}() {\n\t// ...\n}\n`\n\t\t});\n\t\tconst importerFilePath = data.filePath;\n\t\tconst importerFileContent = this._projectFilesService.getFile(importerFilePath);\n\t\tconst newFileContent = addNewImport(\n\t\t\t{\n\t\t\t\talias: functionName,\n\t\t\t\tname: availableNameKebab\n\t\t\t},\n\t\t\timporterFileContent\n\t\t);\n\t\tthis._projectFilesService.updt_modifyContent({\n\t\t\tpath: importerFilePath,\n\t\t\tcontent: newFileContent\n\t\t});\n\t}\n}\n","import * as angularCommon from '@angular/common';\nimport * as angularCore from '@angular/core';\nimport 'reflect-metadata';\n\nimport { getImports } from './get-imports';\nimport INgProjectFilesService from './i-ng-project-files-service';\nimport { isAngularComponent } from './is-angular-component';\nimport transpileTs from './transpile-ts';\n\nconst Component = angularCore.Component;\nconst NgIf = angularCommon.NgIf;\nconst Injectable = angularCore.Injectable;\n\nconst IMPORT_REGEX = /import [\\w{}\\s,]+ from '.+';/g;\n\n/**\n * @returns javascript class\n */\nexport default function createNgComponentFromString(\n\tngComponentFileName: string,\n\tngProjectFilesService: INgProjectFilesService\n): any {\n\tconst fileContent = ngProjectFilesService.getFile(ngComponentFileName);\n\tif (fileContent === undefined) {\n\t\treturn undefined;\n\t}\n\tlet modifiedContent = getNgComponentModifiedContent(\n\t\tfileContent,\n\t\tngProjectFilesService\n\t);\n\tif (modifiedContent === undefined) {\n\t\treturn undefined;\n\t}\n\tconst dependenciesFilesNames = getAllDepedenciesFilesNames(\n\t\tngComponentFileName,\n\t\tngProjectFilesService\n\t);\n\tconst allCode = dependenciesFilesNames.map(e => getDependencyFileModifiedContent(\n\t\te,\n\t\tngProjectFilesService\n\t)).join('\\n') + '\\n' + modifiedContent;\n\t// console.log(allCode);\n\tconst jsCode = transpileTs(allCode);\n\tconst jsClass = eval(jsCode);\n\treturn jsClass;\n}\n\nfunction getAllDepedenciesFilesNames(\n\tfileName: string,\n\tngProjectFilesService: INgProjectFilesService\n): string[] {\n\tconst res: string[] = [];\n\tconst fileContent = ngProjectFilesService.getFile(fileName);\n\tif (fileContent === undefined) {\n\t\tthrow new Error(`no file ${fileName}`);\n\t}\n\tconst localImports = getImports(fileContent);\n\tlocalImports.forEach(e => {\n\t\t/**\n\t\t * TODO\n\t\t * prendre en compte e.alias\n\t\t */\n\t\tconst dependencyFileName = e.name + '.ts';\n\t\tconst array = getAllDepedenciesFilesNames(\n\t\t\tdependencyFileName,\n\t\t\tngProjectFilesService\n\t\t).concat(dependencyFileName)\n\t\tlet ref = 0;\n\t\tfor (const e of array) {\n\t\t\tconst i = res.indexOf(e);\n\t\t\tif (i >= 0) {\n\t\t\t\tref = i;\n\t\t\t} else {\n\t\t\t\tres.splice(\n\t\t\t\t\tref,\n\t\t\t\t\t0,\n\t\t\t\t\te\n\t\t\t\t);\n\t\t\t\tref++;\n\t\t\t}\n\t\t}\n\t});\n\treturn res;\n}\n\n// function getModifiedContent(fileContent: string): string | undefined {\n// \tlet res = fileContent;\n// \tconst match = fileContent.match(IMPORT_REGEX);\n// \tif (match !== null) {\n// \t\tconst lastImport = match.slice(-1)[0];\n// \t\tconst index = fileContent.lastIndexOf(lastImport);\n// \t\tres = fileContent.slice(index + lastImport.length);\n// \t}\n// \tconst className = getClassName(res);\n// \tif (className === undefined) {\n// \t\treturn undefined;\n// \t}\n// \tres = res.replace('export default', '');\n// \treturn res + '\\n' + className;\n// }\n\nfunction getNgComponentModifiedContent(\n\tfileContent: string,\n\tngProjectFilesService: INgProjectFilesService\n): string | undefined {\n\tlet res = fileContent;\n\tconst match = fileContent.match(IMPORT_REGEX);\n\tif (match !== null) {\n\t\tconst lastImport = match.slice(-1)[0];\n\t\tconst index = fileContent.lastIndexOf(lastImport);\n\t\tres = fileContent.slice(index + lastImport.length);\n\t}\n\tconst className = getClassName(res);\n\tif (className === undefined) {\n\t\treturn undefined;\n\t}\n\tres = res.replace('export default', '');\n\tres = replaceTemplateAndStylesUrl(\n\t\tres,\n\t\tngProjectFilesService\n\t);\n\treturn res + '\\n' + className;\n}\n\nfunction replaceTemplateUrl(\n\tfileContent: string,\n\tngProjectFilesService: INgProjectFilesService\n): string {\n\tconst a = fileContent.match(/templateUrl: '\\.\\/([\\w\\.-]+)'/);\n\tif (a === null) {\n\t\treturn fileContent;\n\t}\n\tconst templateUrl = a[1];\n\tconst templateFileContent = ngProjectFilesService.getFile(templateUrl);\n\tif (templateFileContent === undefined) {\n\t\tthrow new Error(`no file ${templateUrl}`);\n\t}\n\treturn fileContent.replace(\n\t\ta[0],\n\t\t`template: \\`${templateFileContent}\\``\n\t);\n}\n\nfunction replaceStyleUrls(\n\tfileContent: string,\n\tngProjectFilesService: INgProjectFilesService\n): string {\n\t/**\n\t * TODO\n\t * multiple scss files\n\t */\n\tconst a = fileContent.match(/styleUrls: \\['\\.\\/([\\w\\.-]+)'\\]/);\n\tif (a === null) {\n\t\treturn fileContent;\n\t}\n\tconst styleUrl = a[1];\n\tconst styleFileContent = ngProjectFilesService.getFile(styleUrl);\n\tif (styleFileContent === undefined) {\n\t\tthrow new Error(`no file ${styleUrl}`);\n\t}\n\treturn fileContent.replace(\n\t\ta[0],\n\t\t`styles: [\\`${styleFileContent}\\`]`\n\t);\n}\n\nfunction getDependencyFileModifiedContent(\n\tfileName: string,\n\tngProjectFilesService: INgProjectFilesService\n): string {\n\tconst fileContent = ngProjectFilesService.getFile(fileName);\n\tif (fileContent === undefined) {\n\t\tthrow new Error();\n\t}\n\treturn getModifiedContent2(\n\t\tfileContent,\n\t\tngProjectFilesService\n\t);\n}\n\nfunction getModifiedContent2(\n\tfileContent: string,\n\tngProjectFilesService: INgProjectFilesService\n): string {\n\tlet res = fileContent;\n\tconst match = fileContent.match(IMPORT_REGEX);\n\tif (match !== null) {\n\t\tconst lastImport = match.slice(-1)[0];\n\t\tconst index = fileContent.lastIndexOf(lastImport);\n\t\tres = fileContent.slice(index + lastImport.length);\n\t}\n\tres = res.replace('export default', '');\n\tif (!isAngularComponent(fileContent)) {\n\t\treturn res;\n\t}\n\treturn replaceTemplateAndStylesUrl(\n\t\tres,\n\t\tngProjectFilesService\n\t);\n}\n\nfunction replaceTemplateAndStylesUrl(\n\tfileContent: string,\n\tngProjectFilesService: INgProjectFilesService\n): string {\n\tlet res = fileContent;\n\tres = replaceTemplateUrl(\n\t\tres,\n\t\tngProjectFilesService\n\t);\n\tres = replaceStyleUrls(\n\t\tres,\n\t\tngProjectFilesService\n\t);\n\treturn res;\n}\n\nfunction getClassName(fileContent: string): string | undefined {\n\tconst a = fileContent.match(/export default class (\\w+)/);\n\tif (a === null) {\n\t\treturn undefined;\n\t}\n\treturn a[1];\n}\n","import { Injectable } from '@angular/core';\n\nimport CreateNgComponentInWorkspaceService from './create-ng-component-in-workspace.service';\nimport importInFile from './import-in-file';\nimport ProjectFilesService from './project-files.service';\n\n@Injectable({ providedIn: 'root' })\nexport default class CreateNgComponentInFileService {\n\tconstructor(\n\t\tprivate readonly _createNgComponentInWorkspaceService: CreateNgComponentInWorkspaceService,\n\t\tprivate readonly _projectFilesService: ProjectFilesService\n\t) { }\n\n\tasync createNgComponentInFile(data: { filePath: string }): Promise<string | undefined> {\n\t\tconst importerFile = this._projectFilesService.filePathList.find(e => e.path === data.filePath);\n\t\tif (importerFile === undefined) {\n\t\t\treturn undefined;\n\t\t}\n\t\tconst a = await this._createNgComponentInWorkspaceService.createNgComponentInWorkspace();\n\t\tif (a === undefined) {\n\t\t\treturn undefined;\n\t\t}\n\t\t/**\n\t\t * TODO-3 ajouter le componsant importé dans le tableau imports\n\t\t * du @Component.\n\t\t */\n\t\tconst newFileContent = importInFile(\n\t\t\timporterFile.content,\n\t\t\ta.componentClassName,\n\t\t\ta.fileName\n\t\t);\n\t\tthis._projectFilesService.updt_modifyContent({\n\t\t\tpath: data.filePath,\n\t\t\tcontent: newFileContent\n\t\t});\n\t\treturn a.fileName;\n\t}\n}\n","import { Injectable } from '@angular/core';\n\nimport { convertToKebabCase } from './convert-to-kebab-case';\nimport { getAvailableName } from './get-available-name';\nimport { getTypescriptFileName } from './get-typescript-file-name';\nimport ProjectFilesService from './project-files.service';\nimport ShowInputBoxService from './show-input-box.service';\nimport toPascalCase from './to-pascal-case';\n\nconst PLACE_HOLDER = 'Angular component name';\nconst PROMPT = 'Angular component name';\nconst COMPONENT_FILE_SUFFIX = '.component';\nconst COMPONENT_CLASS_NAME_SUFFIX = 'Component';\nconst PREFIX = 'wp';\n\n@Injectable({ providedIn: 'root' })\nexport default class CreateNgComponentInWorkspaceService {\n\tconstructor(\n\t\tprivate readonly _showInputBoxService: ShowInputBoxService,\n\t\tprivate readonly _projectFilesService: ProjectFilesService\n\t) { }\n\n\tasync createNgComponentInWorkspace() {\n\t\tconst nameFromUser = await this._showInputBoxService.showInputBox({\n\t\t\tplaceHolder: PLACE_HOLDER,\n\t\t\tprompt: PROMPT\n\t\t});\n\t\tif (nameFromUser === undefined) {\n\t\t\treturn undefined;\n\t\t}\n\t\tconst kebabName = convertToKebabCase(nameFromUser);\n\t\tconst availableNameKebab = await getAvailableName(\n\t\t\tthis._projectFilesService.filePathList.map(e => e.path),\n\t\t\tkebabName + COMPONENT_FILE_SUFFIX\n\t\t);\n\t\tconst htmlFileName = `${availableNameKebab}.html`;\n\t\tconst styleFileName = `${availableNameKebab}.scss`;\n\t\tconst componentClassName = getComponentClassName(kebabName);\n\t\tconst fileContent = getNgComponentFileContent(\n\t\t\tcomponentClassName,\n\t\t\tkebabName,\n\t\t\thtmlFileName,\n\t\t\tstyleFileName\n\t\t);\n\t\tconst componentFilePath = getTypescriptFileName(availableNameKebab);\n\t\tthis._projectFilesService.updt_create({\n\t\t\tpath: componentFilePath,\n\t\t\tcontent: fileContent\n\t\t});\n\t\tthis._projectFilesService.updt_create({\n\t\t\tpath: htmlFileName,\n\t\t\tcontent: getHtmlFileContent(kebabName)\n\t\t});\n\t\tthis._projectFilesService.updt_create({\n\t\t\tpath: styleFileName,\n\t\t\tcontent: ''\n\t\t});\n\t\t// await createMockInputsFile(\n\t\t// \tsrcPath,\n\t\t// \tfileName\n\t\t// );\n\t\t// await createMockInitService(componentFilePath);\n\t\t// vscode.window.showTextDocument(vscode.Uri.file(componentFilePath));\n\t\treturn {\n\t\t\tcomponentClassName,\n\t\t\tfileName: availableNameKebab\n\t\t};\n\t}\n}\n\n/**\n * @param kebabName suffix .component\n */\nfunction getNgComponentFileContent(\n\tcomponentClassName: string,\n\tkebabName: string,\n\thtmlFileName: string,\n\tstyleFileName: string\n): string {\n\treturn `import { Component } from '@angular/core';\n\n@Component({\n\tselector: '${PREFIX}-${kebabName}',\n\tstandalone: true,\n\ttemplateUrl: './${htmlFileName}',\n\tstyleUrls: ['./${styleFileName}']\n})\nexport default class ${componentClassName} { }\n`;\n}\n\nfunction getComponentClassName(kebabName: string): string {\n\tconst componentName = toPascalCase(kebabName);\n\treturn `${componentName}${COMPONENT_CLASS_NAME_SUFFIX}`;\n}\n\nfunction getHtmlFileContent(kebabName: string): string {\n\treturn `<p>${kebabName} component works</p>`;\n}\n\n// async function importComponentInFile(\n// \timportFileName: string,\n// \tsrcPath: string,\n// \tcomponentClassName: string,\n// \tfileName: string\n// ): Promise<void> {\n// \tawait importInFile(\n// \t\timportFileName,\n// \t\tsrcPath,\n// \t\tcomponentClassName,\n// \t\tfileName\n// \t);\n// \t/**\n// \t * TODO-3 ajouter le componsant importé dans le tableau imports\n// \t * du @Component.\n// \t */\n// }\n","export default function deepClone(data: any): any {\n\tif (Array.isArray(data)) {\n\t\treturn data.map(deepClone);\n\t}\n\tif (typeof data === 'object') {\n\t\treturn Object.keys(data).reduce(\n\t\t\t(\n\t\t\t\tprev,\n\t\t\t\tcurr\n\t\t\t) => {\n\t\t\t\treturn {\n\t\t\t\t\t...prev,\n\t\t\t\t\t[curr]: deepClone(data[curr])\n\t\t\t\t};\n\t\t\t},\n\t\t\t{}\n\t\t);\n\t}\n\treturn data;\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/plugins/zone-error';  // Included with Angular CLI.\n","import { CommonModule } from '@angular/common';\nimport {\n\tComponent,\n\tInput\n} from '@angular/core';\n\nimport IFileContextMenuOption from './i-file-context-menu-option';\nimport ContextMenuRef from './context-menu-ref.service';\nimport WorkspaceCommandsService from './workspace-commands.service';\n\n@Component({\n\tselector: 'wp-file-context-menu',\n\tstandalone: true,\n\timports: [\n\t\tCommonModule\n\t],\n\ttemplateUrl: './file-context-menu.component.html',\n\tstyleUrls: ['./file-context-menu.component.scss']\n})\nexport default class FileContextMenuComponent {\n\t// @Input() options!: IFileContextMenuOption[];\n\t@Input() filePath!: string;\n\n\toptions: IFileContextMenuOption[] = [];\n\n\tconstructor(\n\t\tprivate readonly _contextMenuRef: ContextMenuRef,\n\t\tprivate readonly _workspaceCommandsService: WorkspaceCommandsService\n\t) { }\n\n\tngOnInit(): void {\n\t\tconst commands = this._workspaceCommandsService.commands;\n\t\tthis.options = Object.keys(commands).map(commandId => {\n\t\t\treturn {\n\t\t\t\tlabel: commands[commandId].name,\n\t\t\t\tcommandId\n\t\t\t};\n\t\t});\n\t}\n\n\tonClick(option: IFileContextMenuOption): void {\n\t\tthis._contextMenuRef.close();\n\t\tthis._workspaceCommandsService.runCommand(\n\t\t\toption.commandId,\n\t\t\t{ filePath: this.filePath }\n\t\t);\n\t}\n}\n\nfunction getFileName(filePath: string): string {\n\tconst a = filePath.split('.');\n\ta.pop();\n\treturn a.join('.');\n}\n","<div>\n\t<div\n\t\t*ngFor=\"let option of options\"\n\t\t(click)=\"onClick(option)\"\n\t\t>\n\t\t{{ option.label }}\n\t</div>\n</div>\n","import { Injectable } from '@angular/core';\n\nimport IFileInEditor from './i-file-in-editor';\n\n@Injectable({ providedIn: 'root' })\nexport default class FilesInEditorService {\n\tfiles: IFileInEditor[] = [];\n\n\topen(filePath: string): void {\n\t\tthis.files.forEach(e => e.selected = false);\n\t\tconst file = this.files.find(e => e.filePath === filePath);\n\t\tif (file !== undefined) {\n\t\t\tfile.selected = true;\n\t\t\treturn;\n\t\t}\n\t\tthis.files.push({\n\t\t\tfilePath,\n\t\t\tselected: true\n\t\t});\n\t}\n\n\tclose(filePath: string): void {\n\t\tthis.files = this.files.filter(e => e.filePath !== filePath);\n\t}\n}\n","import { CommonModule } from '@angular/common';\nimport { Component } from '@angular/core';\n\nimport FilesInEditorService from './files-in-editor.service';\nimport IFileInEditor from './i-file-in-editor';\nimport IStandaloneEditorConstructionOptions2 from './i-standalone-editor-construction-options2';\nimport InitMonacoModelService from './init-monaco-model.service';\nimport MonacoEditor2Component from './monaco-editor-2';\nimport ProjectFilesService from './project-files.service';\nimport TabComponent from './tab.component';\nimport TabsComponent from './tabs.component';\n\nconst DEFAULT_THEME = 'vs-dark';\nconst EXTENSION_LANGUAGE_MAPPING = {\n\tts: 'typescript',\n\thtml: 'html',\n\tscss: 'scss'\n};\n\n@Component({\n\tselector: 'wp-files-tabs',\n\tstandalone: true,\n\timports: [\n\t\tTabsComponent,\n\t\tTabComponent,\n\t\tCommonModule,\n\t\tMonacoEditor2Component\n\t],\n\ttemplateUrl: './files-tabs.component.html',\n\tstyleUrls: ['./files-tabs.component.scss']\n})\nexport default class FilesTabsComponent {\n\tprivate _map: { [filePath: string]: IStandaloneEditorConstructionOptions2 } = {};\n\n\tconstructor(\n\t\tprivate readonly _projectFilesService: ProjectFilesService,\n\t\tprivate readonly _filesInEditorService: FilesInEditorService,\n\t\tprivate readonly _initMonacoModelService: InitMonacoModelService\n\t) { }\n\n\tget files(): IFileInEditor[] {\n\t\treturn this._filesInEditorService.files;\n\t}\n\n\tonClose(filePath: string): void {\n\t\tthis._filesInEditorService.close(filePath);\n\t}\n\n\tonCodeChange(\n\t\tfilePath: string,\n\t\tcode: string\n\t): void {\n\t\tthis._projectFilesService.updt_modifyContent2({\n\t\t\tpath: filePath,\n\t\t\tcontent: code\n\t\t});\n\t}\n\n\tgetOptions(filePath: string) {\n\t\tconst res = this._map[filePath];\n\t\tif (res !== undefined) {\n\t\t\treturn res;\n\t\t}\n\t\tthis._map[filePath] = {\n\t\t\ttheme: DEFAULT_THEME,\n\t\t\tlanguage: getLanguage(filePath),\n\t\t\tmodel: {\n\t\t\t\t// value: this.getFileContent(filePath),\n\t\t\t\t// language: 'typescript',\n\t\t\t\turi: filePath\n\t\t\t}\n\t\t}\n\t\treturn this._map[filePath];\n\t}\n\n\tonMonacoInit(): void {\n\t\tthis._initMonacoModelService.init();\n\t}\n}\n\nfunction getLanguage(filePath: string): string {\n\tconst extension = getExtension(filePath);\n\treturn (EXTENSION_LANGUAGE_MAPPING as any)[extension];\n}\n\nfunction getExtension(filePath: string): string {\n\treturn filePath.split('.').slice(-1)[0];\n}\n","<wp-tabs>\n\t<wp-tab\n\t\t*ngFor=\"let file of files\"\n\t\t[title]=\"file.filePath\"\n\t\t[selected]=\"file.selected\"\n\t\t(close)=\"onClose(file.filePath)\"\n\t>\n\t\t<ng-template>\n\t\t\t<!-- <wp-monaco-editor\n\t\t\t\t[code]=\"getFileContent(file.filePath)\"\n\t\t\t\t[extension]=\"getExtension(file.filePath)\"\n\t\t\t\t(codeChange)=\"onCodeChange(file.filePath, $event)\"\n\t\t\t></wp-monaco-editor> -->\n\t\t\t<wp-monaco-editor-2\n\t\t\t\t[options]=\"getOptions(file.filePath)\"\n\t\t\t\t(isInit)=\"onMonacoInit()\"\n\t\t\t\t(codeChange)=\"onCodeChange(file.filePath, $event)\"\n\t\t\t></wp-monaco-editor-2>\n\t\t</ng-template>\n\t</wp-tab>\n</wp-tabs>\n","import { TS_EXTENSION } from './ts-extension';\n\nconst FIRST_COUNT = 2;\n\nexport async function getAvailableName(\n\tfileNames: string[],\n\tname: string\n): Promise<string> {\n\tconst allExistingNames = await getTypescriptNames(fileNames);\n\tif (allExistingNames.indexOf(name) < 0) {\n\t\treturn name;\n\t}\n\treturn getAvailableNameWithSuffix(\n\t\tallExistingNames,\n\t\tname,\n\t\tFIRST_COUNT\n\t);\n}\n\nfunction getAvailableNameWithSuffix(\n\tallExistingNames: string[],\n\tname: string,\n\tcounter: number\n): string {\n\tconst a = name.split('.');\n\tconst nameWithCounter = `${a[0]}-${counter}`;\n\tif (allExistingNames.indexOf(nameWithCounter) < 0) {\n\t\treturn nameWithCounter;\n\t}\n\treturn getAvailableNameWithSuffix(\n\t\tallExistingNames,\n\t\tname,\n\t\tcounter + 1\n\t);\n}\n\n/**\n * @returns file names without .ts extension.\n */\nasync function getTypescriptNames(fileNames: string[]): Promise<string[]> {\n\tconst typescriptFiles = fileNames.map(e => {\n\t\tif (!e.endsWith(TS_EXTENSION)) {\n\t\t\treturn undefined;\n\t\t}\n\t\treturn e.slice(\n\t\t\t0,\n\t\t\te.length - TS_EXTENSION.length\n\t\t);\n\t}).filter(e => e !== undefined);\n\treturn typescriptFiles as string[];\n}\n","import { getImports } from './get-imports';\nimport { IDependencyOptions } from './i-dependency-options';\nimport { IImportInfo } from './i-import-info';\nimport { isAngularComponent } from './is-angular-component';\n\ntype ReadFile = (filePath: string) => Promise<string>;\n\nexport async function getDepsOfTypescriptFile(\n\tfile: IDependencyOptions,\n\treadFile: ReadFile\n): Promise<IDependencyOptions[]> {\n\tconst filePath = `${file.fileName}.${file.extension}`;\n\tconst fileContent = await readFile(filePath);\n\tconst imports = getImportsOfFile(fileContent);\n\treturn (await Promise.all(imports.map(async e => {\n\t\ttry {\n\t\t\treturn await convertTypescriptDep(\n\t\t\t\te.name,\n\t\t\t\te.alias,\n\t\t\t\treadFile\n\t\t\t);\n\t\t} catch (err) {\n\t\t\treturn undefined;\n\t\t}\n\t}))).filter(e => e !== undefined) as IDependencyOptions[];\n}\n\nfunction getImportsOfFile(fileContent: string): IImportInfo[] {\n\tconst imports = getImports(fileContent);\n\tconst res: IImportInfo[] = [];\n\tfor (const imp of imports) {\n\t\tif (res.some(e => e.alias === imp.alias)) {\n\t\t\tcontinue;\n\t\t}\n\t\tres.push(imp);\n\t}\n\treturn res;\n}\n\nexport async function convertTypescriptDep(\n\tfileName: string,\n\talias: string,\n\treadFile: ReadFile\n): Promise<IDependencyOptions> {\n\tconst filePath = `${fileName}.ts`;\n\tconst fileContent = await readFile(filePath);\n\tconst imports = getImports(fileContent);\n\tconst isCollapsed = imports.length > 0;\n\tconst isAngular = isAngularComponent(fileContent);\n\treturn {\n\t\talias,\n\t\tfileName,\n\t\tisCollapsed,\n\t\textension: 'ts',\n\t\ttype: isAngular ? 'angular' : 'typescript'\n\t\t// icon: isAngular ? 'angular' : undefined\n\t};\n}\n","import { IImportInfo } from './i-import-info';\n\nconst REGEXP = /^import ([\\w-]+) from '\\.\\/([\\w\\-\\.]+)';?\\s*$/;\n\nexport function getImports(fileContent: string): IImportInfo[] {\n\tconst lines = fileContent.split('\\n');\n\treturn lines.map(processLine).filter(e => e !== undefined) as IImportInfo[];\n}\n\nfunction processLine(\n\tlineText: string,\n\trow: number\n): IImportInfo | undefined {\n\tconst match = lineText.match(REGEXP);\n\tif (match === null) {\n\t\treturn undefined;\n\t}\n\treturn {\n\t\tname: match[2],\n\t\talias: match[1],\n\t\trow\n\t};\n}\n","import { TS_EXTENSION } from './ts-extension';\n\nexport function getTypescriptFileName(fileName: string): string {\n\treturn `${fileName}${TS_EXTENSION}`;\n}\n","import { Observable } from 'rxjs';\n\nexport default abstract class INgProjectFilesService {\n\tabstract getFile(fileName: string): string | undefined;\n\tabstract change$: Observable<void>;\n}\n","import { Observable } from 'rxjs';\n\nexport default abstract class ITreeDataProviderService<T> {\n\tabstract getRootNode(): Promise<T>;\n\tabstract getChildren(node: T): Promise<T[]>;\n\tabstract readonly change$: Observable<void>;\n}\n","import addNewImport from './add-new-import';\n\nexport default function importInFile(\n\timporterFileContent: string,\n\tclassName: string,\n\tfileName: string\n): string {\n\tconst newFileContent = addNewImport(\n\t\t{\n\t\t\talias: className,\n\t\t\tname: fileName\n\t\t},\n\t\timporterFileContent\n\t);\n\treturn newFileContent;\n}\n","import { Injectable } from '@angular/core';\nimport { Unsubscribable } from 'rxjs';\n\nimport ProjectFilesService from './project-files.service';\n\ndeclare var monaco: any;\n\n/**\n * TODO-102 préfixer les uri par un identifiant unique.\n */\n@Injectable({ providedIn: 'root' })\nexport default class InitMonacoModelService {\n\tprivate _isInit = false;\n\tprivate _subscriptions: Unsubscribable[] = [];\n\n\tconstructor(\n\t\tprivate readonly _projectFilesService: ProjectFilesService\n\t) { }\n\n\tinit(): void {\n\t\tif (this._isInit) {\n\t\t\treturn;\n\t\t}\n\t\tthis._isInit = true;\n\t\t/**\n\t\t * TODO-102 ne pas supprimer les models des\n\t\t * autres workspaces.\n\t\t */\n\t\tmonaco.editor.getModels().forEach((e: any) => {\n\t\t\te.dispose();\n\t\t});\n\t\tmonaco.languages.typescript.typescriptDefaults.setCompilerOptions({\n\t\t\texperimentalDecorators: true,\n\t\t\temitDecoratorMetadata: true\n\t\t});\n\t\tthis._projectFilesService.nodeModules.forEach(e => {\n\t\t\tmonaco.editor.createModel(\n\t\t\t\te.content,\n\t\t\t\tundefined,\n\t\t\t\tmonaco.Uri.parse(e.path)\n\t\t\t);\n\t\t});\n\t\tthis._projectFilesService.filePathList.forEach(e => {\n\t\t\tconst extension = getExtension(e.path);\n\t\t\tif (extension === 'ts') {\n\t\t\t\tmonaco.editor.createModel(\n\t\t\t\t\te.content,\n\t\t\t\t\t'typescript',\n\t\t\t\t\tmonaco.Uri.parse(e.path)\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\tmonaco.editor.createModel(\n\t\t\t\t\te.content,\n\t\t\t\t\tundefined,\n\t\t\t\t\tmonaco.Uri.parse(e.path)\n\t\t\t\t);\n\t\t\t}\n\t\t});\n\t\tthis.update();\n\t}\n\n\tprivate update(): void {\n\t\tthis._subscriptions.push(this._projectFilesService.fileUpdated$.subscribe(filePath => {\n\t\t\tconst uri = monaco.Uri.parse(filePath);\n\t\t\tconst fileContent = this._projectFilesService.getFile(filePath);\n\t\t\tconst model = monaco.editor.getModel(uri);\n\t\t\tif (model === null) {\n\t\t\t\tmonaco.editor.createModel(\n\t\t\t\t\tfileContent,\n\t\t\t\t\tundefined,\n\t\t\t\t\turi\n\t\t\t\t);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tmodel.setValue(fileContent);\n\t\t}));\n\t\tthis._subscriptions.push(this._projectFilesService.fileCreated$.subscribe(filePath => {\n\t\t\tconst uri = monaco.Uri.parse(filePath);\n\t\t\tconst fileContent = this._projectFilesService.getFile(filePath);\n\t\t\tmonaco.editor.createModel(\n\t\t\t\tfileContent,\n\t\t\t\tundefined,\n\t\t\t\turi\n\t\t\t);\n\t\t}));\n\t}\n}\n\nfunction getExtension(filePath: string): string | undefined {\n\tconst array = filePath.split('.');\n\tif (array.length < 2) {\n\t\treturn undefined;\n\t}\n\treturn array.slice(-1)[0];\n}\n","export function isAngularComponent(fileContent: string): boolean {\n\treturn fileContent.match('@Component') !== null;\n}\n","import '@angular/compiler';\nimport { enableProdMode } from '@angular/core';\nimport { bootstrapApplication } from '@angular/platform-browser';\n\nimport AppComponent from './app.component';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n\tenableProdMode();\n}\n\nbootstrapApplication(\n\tAppComponent,\n\t{\n\t\tproviders: [\n\t\t]\n\t}\n);\n","import { CommonModule } from '@angular/common';\nimport {\n\tComponent,\n\tEventEmitter,\n\tforwardRef,\n\tInject,\n\tInput,\n\tNgZone,\n\tOutput\n} from '@angular/core';\nimport {\n\tControlValueAccessor,\n\tNG_VALUE_ACCESSOR\n} from '@angular/forms';\nimport { fromEvent } from 'rxjs';\nimport * as monacoTypes from 'monaco-editor';\n\nimport BaseEditor from './base-editor';\nimport IMonacoEditorConfig from './i-monaco-editor-config';\nimport IStandaloneEditorConstructionOptions2 from './i-standalone-editor-construction-options2';\nimport MONACO_EDITOR_CONFIG_INJECTION_TOKEN from './monaco-editor-config-injection-token';\n\ndeclare var monaco: any;\n\n@Component({\n\tselector: 'wp-monaco-editor-2',\n\tstandalone: true,\n\ttemplateUrl: './monaco-editor-2.html',\n\tstyleUrls: ['./monaco-editor-2.scss'],\n\timports: [\n\t\tCommonModule\n\t],\n\tproviders: [\n\t\t{\n\t\t\tprovide: MONACO_EDITOR_CONFIG_INJECTION_TOKEN,\n\t\t\tuseValue: {}\n\t\t},\n\t\t{\n\t\t\tprovide: NG_VALUE_ACCESSOR,\n\t\t\tuseExisting: forwardRef(() => MonacoEditor2Component),\n\t\t\tmulti: true\n\t\t}\n\t]\n})\nexport default class MonacoEditor2Component extends BaseEditor implements ControlValueAccessor {\n\tpropagateChange = (_: any) => { };\n\tonTouched = () => { };\n\n\tprivate _value = '';\n\n\t@Input('options')\n\tset options(value: IStandaloneEditorConstructionOptions2) {\n\t\tthis._options = Object.assign(\n\t\t\t{},\n\t\t\tthis._config.defaultOptions,\n\t\t\tvalue\n\t\t);\n\t\tif (this._editor) {\n\t\t\tthis._editor.dispose();\n\t\t\tthis.initMonaco(value);\n\t\t}\n\t}\n\n\t@Output() codeChange = new EventEmitter<string>();\n\n\tget options(): any {\n\t\treturn this._options;\n\t}\n\n\t// @Input('model')\n\t// set model(model: IEditorModel) {\n\t// \tthis._options.model = model;\n\t// \tif (this._editor) {\n\t// \t\tthis._editor.dispose();\n\t// \t\tthis.initMonaco(this._options);\n\t// \t}\n\t// }\n\n\tconstructor(\n\t\tprivate zone: NgZone,\n\t\t@Inject(MONACO_EDITOR_CONFIG_INJECTION_TOKEN) editorConfig: IMonacoEditorConfig\n\t) {\n\t\tsuper(editorConfig);\n\t}\n\n\t/**\n\t * Never called.\n\t */\n\twriteValue(value: any): void {\n\t\tthis._value = value || '';\n\t\t// Fix for value change while dispose in process.\n\t\tsetTimeout(() => {\n\t\t\tif (this._editor && !this.options.model) {\n\t\t\t\tthis._editor.setValue(this._value);\n\t\t\t}\n\t\t});\n\t}\n\n\tregisterOnChange(fn: any): void {\n\t\tthis.propagateChange = fn;\n\t}\n\n\tregisterOnTouched(fn: any): void {\n\t\tthis.onTouched = fn;\n\t}\n\n\tprotected initMonaco(options: IStandaloneEditorConstructionOptions2): void {\n\t\tconst monacoOptions: monacoTypes.editor.IStandaloneEditorConstructionOptions = {...options} as any;\n\t\tconst hasModel = !!options.model;\n\t\tif (hasModel) {\n\t\t\tconst uri = options.model.uri ? monaco.Uri.parse(options.model.uri) : undefined as any;\n\t\t\tconst model = monaco.editor.getModel(uri);\n\t\t\tif (model) {\n\t\t\t\tmonacoOptions.model = model;\n\t\t\t\t// model.setValue(this._value);\n\t\t\t} else {\n\t\t\t\tmonacoOptions.model = monaco.editor.createModel(\n\t\t\t\t\toptions.model.value,\n\t\t\t\t\toptions.model.language,\n\t\t\t\t\turi\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\tthis._editor = monaco.editor.create(\n\t\t\tthis._editorContainer.nativeElement,\n\t\t\tmonacoOptions\n\t\t);\n\t\tif (!hasModel) {\n\t\t\tthis._editor.setValue(this._value);\n\t\t}\n\t\tthis._editor.onDidChangeModelContent((e: any) => {\n\t\t\tconst value = this._editor.getValue();\n\t\t\tif (value === this._value) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t// value is not propagated to parent when executing outside zone.\n\t\t\tthis.zone.run(() => {\n\t\t\t\t// console.log('onDidChangeModelContent', value);\n\t\t\t\t// this.propagateChange(value);\n\t\t\t\tthis._value = value;\n\t\t\t\tthis.codeChange.next(value);\n\t\t\t});\n\t\t});\n\t\tthis._editor.onDidBlurEditorWidget(() => {\n\t\t\tthis.onTouched();\n\t\t});\n\t\t// refresh layout on resize event.\n\t\tif (this._windowResizeSubscription) {\n\t\t\tthis._windowResizeSubscription.unsubscribe();\n\t\t}\n\t\tthis._windowResizeSubscription = fromEvent(window, 'resize').subscribe(() => this._editor.layout());\n\t\tthis.onInit.emit(this._editor);\n\t}\n}\n","<div class=\"editor-container\" #editorContainer></div>\n","import { InjectionToken } from '@angular/core';\n\nconst MONACO_EDITOR_CONFIG_INJECTION_TOKEN = new InjectionToken('NGX_MONACO_EDITOR_CONFIG');\n\nexport default MONACO_EDITOR_CONFIG_INJECTION_TOKEN;\n","import { ComponentType } from '@angular/cdk/overlay';\nimport {\n\tAfterViewInit,\n\tChangeDetectorRef,\n\tComponent,\n\tComponentRef,\n\tElementRef,\n\tInjector,\n\tTemplateRef,\n\tViewChild,\n\tViewContainerRef\n} from '@angular/core';\nimport { firstValueFrom, Subject } from 'rxjs';\nimport ContextMenuRef from './context-menu-ref.service';\n\nimport IPositionInOverlay, { Axis } from './i-position-in-overlay';\n\n@Component({\n\tselector: 'wp-overlay-container',\n\tstandalone: true,\n\ttemplateUrl: './overlay-container.component.html',\n\tstyleUrls: ['./overlay-container.component.scss']\n})\nexport default class OverlayContainerComponent implements AfterViewInit {\n\tprivate _isViewInit = false;\n\tprivate _template?: TemplateRef<any>;\n\tprivate _context?: any;\n\tprivate _componentClass?: ComponentType<any>;\n\tprivate _inputs?: any;\n\tprivate _injector?: Injector;\n\tprivate _componentRef$ = new Subject<ComponentRef<any>>();\n\n\t@ViewChild(\n\t\t'content',\n\t\t{ read: ViewContainerRef }\n\t) content!: ViewContainerRef;\n\n\t@ViewChild('wrapper') contentElementRef!: ElementRef;\n\n\tposition!: IPositionInOverlay;\n\n\tconstructor(\n\t\tprivate readonly _cd: ChangeDetectorRef\n\t) { }\n\n\tngAfterViewInit(): void {\n\t\tthis._isViewInit = true;\n\t\tif (this._template !== undefined) {\n\t\t\tthis.content.createEmbeddedView(\n\t\t\t\tthis._template,\n\t\t\t\tthis._context\n\t\t\t);\n\t\t} else if (this._componentClass !== undefined) {\n\t\t\tconst componentRef = this.createComponent(\n\t\t\t\tthis._componentClass,\n\t\t\t\tthis._inputs,\n\t\t\t\tthis._injector\n\t\t\t);\n\t\t\tthis._componentRef$.next(componentRef);\n\t\t} else {\n\t\t\treturn;\n\t\t}\n\t\tthis._cd.detectChanges();\n\t}\n\n\tsetOverlayContentTemplate(\n\t\tvalue: TemplateRef<any>,\n\t\tcontext: any\n\t): void {\n\t\tif (!this._isViewInit) {\n\t\t\tthis._template = value;\n\t\t\tthis._context = context;\n\t\t\treturn;\n\t\t}\n\t\tthis.content.createEmbeddedView(\n\t\t\tvalue,\n\t\t\tcontext\n\t\t);\n\t}\n\n\tasync setOverlayContentComponent<T>(\n\t\tcomponentClass: ComponentType<T>,\n\t\tinputs: Partial<T> = {},\n\t\tinjector?: Injector\n\t): Promise<ComponentRef<T>> {\n\t\tif (!this._isViewInit) {\n\t\t\tthis._componentClass = componentClass;\n\t\t\tthis._inputs = inputs;\n\t\t\tthis._injector = injector;\n\t\t\treturn firstValueFrom(this._componentRef$);\n\t\t}\n\t\treturn this.createComponent(\n\t\t\tcomponentClass,\n\t\t\tinputs,\n\t\t\tinjector\n\t\t);\n\t}\n\n\tget x(): string {\n\t\treturn getAxis(this.position.x);\n\t}\n\n\tget y(): string {\n\t\treturn getAxis(this.position.y);\n\t}\n\n\tget transform(): string {\n\t\tlet res = '';\n\t\tif (this.position.x === 'center') {\n\t\t\tres += 'translateX(-50%)';\n\t\t}\n\t\tif (this.position.y === 'center') {\n\t\t\tres += 'translateY(-50%)';\n\t\t}\n\t\treturn res;\n\t}\n\n\tprivate createComponent<T>(\n\t\tcomponentClass: ComponentType<T>,\n\t\tinputs: Partial<T> = {},\n\t\tinjector?: Injector\n\t): ComponentRef<T> {\n\t\tconst componentRef = this.content.createComponent(\n\t\t\tcomponentClass,\n\t\t\t{\n\t\t\t\tinjector\n\t\t\t}\n\t\t);\n\t\tfor (const inputName of Object.keys(inputs)) {\n\t\t\t(componentRef.instance as any)[inputName] = (inputs as any)[inputName];\n\t\t}\n\t\treturn componentRef;\n\t}\n}\n\nfunction getAxis(axis: Axis): string {\n\tif (typeof axis === 'number') {\n\t\treturn `${axis}px`;\n\t}\n\tif (axis === 'center') {\n\t\treturn '50%';\n\t}\n\treturn '';\n}\n","<div>\n\t<div\n\t\t#wrapper\n\t\t[style.top]=\"y\"\n\t\t[style.left]=\"x\"\n\t\t[style.transform]=\"transform\"\n\t>\n\t\t<ng-container #content></ng-container>\n\t</div>\n</div>\n","import { Injectable } from '@angular/core';\nimport {\n\tdebounceTime,\n\tObservable,\n\tSubject,\n\tUnsubscribable\n} from 'rxjs';\n\nimport deepClone from './deep-clone';\nimport IFile from './i-file';\n\nconst DELAY_MS = 2000;\nconst KEY = 'projectFiles';\n\n@Injectable({ providedIn: 'root' })\nexport default class ProjectFilesService {\n\tprivate _change$ = new Subject<void>();\n\tprivate _fileUpdated$ = new Subject<string>();\n\tprivate _fileCreated$ = new Subject<string>();\n\tprivate _subscriptions: Unsubscribable[] = [];\n\n\tfilePathList: IFile[] = [];\n\tnodeModules: IFile[] = [];\n\n\tconstructor() {\n\t\tthis.filePathList = getData();\n\t\tthis.saveInLocalStorageSubscribe();\n\t}\n\n\tngOnDestroy(): void {\n\t\tthis._subscriptions.forEach(e => e.unsubscribe());\n\t}\n\n\tgetFile(filePath: string): string {\n\t\tconst res = this.filePathList.find(e => e.path === filePath)?.content;\n\t\tif (res === undefined) {\n\t\t\tthrow new Error();\n\t\t}\n\t\treturn res;\n\t}\n\n\tupdt_create(file: IFile): void {\n\t\tthis.filePathList.push(file);\n\t\tthis._change$.next();\n\t\tthis._fileCreated$.next(file.path);\n\t}\n\n\tupdt_modifyContent(file: IFile): void {\n\t\tconst element = this.filePathList.find(e => e.path === file.path);\n\t\tif (element === undefined) {\n\t\t\treturn;\n\t\t}\n\t\telement.content = file.content;\n\t\tthis._change$.next();\n\t\tthis._fileUpdated$.next(file.path);\n\t}\n\n\t/**\n\t * To be call by the editor,\n\t * no event fired to avoid a cyclic\n\t * method call.\n\t */\n\tupdt_modifyContent2(file: IFile): void {\n\t\tconst element = this.filePathList.find(e => e.path === file.path);\n\t\tif (element === undefined) {\n\t\t\treturn;\n\t\t}\n\t\telement.content = file.content;\n\t\tthis._change$.next();\n\t}\n\n\tprivate saveInLocalStorageSubscribe(): void {\n\t\tthis._subscriptions.push(this._change$.pipe(debounceTime(DELAY_MS)).subscribe(() => {\n\t\t\tlocalStorage.setItem(\n\t\t\t\tKEY,\n\t\t\t\tJSON.stringify(this.filePathList)\n\t\t\t);\n\t\t}));\n\t}\n\n\tget change$(): Observable<void> {\n\t\treturn this._change$.asObservable();\n\t}\n\n\tget fileUpdated$(): Observable<string> {\n\t\treturn this._fileUpdated$.asObservable();\n\t}\n\n\tget fileCreated$(): Observable<string> {\n\t\treturn this._fileCreated$.asObservable();\n\t}\n}\n\nfunction getData(): IFile[] {\n\tconst data = localStorage.getItem(KEY);\n\tif (data === null) {\n\t\treturn deepClone(FILE_LIST);\n\t}\n\treturn JSON.parse(data);\n}\n\nconst FILE_LIST: IFile[] = [\n\t/**\n\t * TODO\n\t * TataComponent est considéré comme un import du\n\t * fichier courant.\n\t */\n\t{\n\t\tpath: 'toto.component.ts',\n\t\tcontent: `import { Component } from '@angular/core';\n\nimport TataComponent from './tata.component';\n\n@Component({\n\tselector: 'toto',\n\tstandalone: true,\n\ttemplateUrl: './toto.component.html',\n\tstyleUrls: ['./toto.component.scss'],\n\timports: [\n\t\tTataComponent\n\t]\n})\nexport default class TotoComponent {\n\n}\n`\n\t},\n\t{\n\t\tpath: 'toto.component.html',\n\t\tcontent: '<p>I am toto component !!</p> <tata></tata>'\n\t},\n\t{\n\t\tpath: 'toto.component.scss',\n\t\tcontent: 'p {color: orange;}'\n\t},\n\t{\n\t\tpath: 'tata.component.ts',\n\t\tcontent: `import { Component } from '@angular/core';\n\n@Component({\n\tselector: 'tata',\n\tstandalone: true,\n\ttemplateUrl: './tata.component.html',\n\tstyleUrls: ['./tata.component.scss']\n})\nexport default class TataComponent {\n\n}`\n\t},\n\t{\n\t\tpath: 'tata.component.html',\n\t\tcontent: '<p>I am tata component !!</p>'\n\t},\n\t{\n\t\tpath: 'tata.component.scss',\n\t\tcontent: 'p {color: blue;}'\n\t}\n];\n","import { Injectable } from '@angular/core';\nimport {\n\tObservable,\n\tSubject\n} from 'rxjs';\n\nimport {\n\tconvertTypescriptDep,\n\tgetDepsOfTypescriptFile\n} from './get-deps-of-ts-file';\nimport { IDependencyOptions } from './i-dependency-options';\nimport ITreeDataProviderService from './i-tree-data-provider-service';\nimport ProjectFilesService from './project-files.service';\n\n@Injectable({ providedIn: 'root' })\nexport default class ProjectTreeDataProviderService implements ITreeDataProviderService<IDependencyOptions> {\n\tconstructor(\n\t\tprivate readonly _projectFilesService: ProjectFilesService\n\t) { }\n\n\tasync getRootNode(): Promise<IDependencyOptions> {\n\t\t/**\n\t\t * TODO\n\t\t */\n\t\tconst res = this._projectFilesService.filePathList[0];\n\t\tconst fileName = getFileName(res.path);\n\t\treturn convertTypescriptDep(\n\t\t\tfileName,\n\t\t\tres.path,\n\t\t\tasync e => this.readFile(e)\n\t\t);\n\t\t// const res = this._projectFilesService.filePathList.find(e => e.path === 'main.ts');\n\t\t// if (res === undefined) {\n\t\t// \tthrow new Error('no file main.ts found');\n\t\t// }\n\t\t// return convertTypescriptDep(\n\t\t// \t'main',\n\t\t// \t'main',\n\t\t// \tasync e => this.readFile(e)\n\t\t// );\n\t}\n\n\tasync getChildren(node: IDependencyOptions): Promise<IDependencyOptions[]> {\n\t\treturn getDepsOfTypescriptFile(\n\t\t\tnode,\n\t\t\tasync e => this.readFile(e)\n\t\t);\n\t}\n\n\tget change$(): Observable<void> {\n\t\treturn this._projectFilesService.change$;\n\t}\n\n\tprivate async readFile(filePath: string): Promise<string> {\n\t\treturn this._projectFilesService.getFile(filePath);\n\t}\n}\n\nfunction getFileName(filePath: string): string {\n\tconst a = filePath.split('.');\n\ta.pop();\n\treturn a.join('.');\n}\n","import { CommonModule } from '@angular/common';\nimport {\n\tComponent,\n\tInput\n} from '@angular/core';\n\nimport AngularTreeItemComponent from './angular-tree-item.component';\nimport FilesInEditorService from './files-in-editor.service';\nimport { IDependencyOptions } from './i-dependency-options';\nimport ProjectTreeItemComponent from './project-tree-item.component';\nimport IData from './project-tree-item-data';\nimport ContextMenu2Directive from './context-menu-2.directive';\n\n@Component({\n\tselector: 'wp-project-tree-item-2',\n\tstandalone: true,\n\timports: [\n\t\tProjectTreeItemComponent,\n\t\tAngularTreeItemComponent,\n\t\tCommonModule,\n\t\tContextMenu2Directive\n\t],\n\ttemplateUrl: './project-tree-item.component-2.html',\n\tstyleUrls: ['./project-tree-item.component-2.scss']\n})\nexport default class ProjectTreeItemComponent2 {\n\t@Input() data!: IDependencyOptions;\n\n\tprojectTreeItemData!: IData;\n\n\tconstructor(\n\t\tprivate readonly _filesInEditorService: FilesInEditorService\n\t) { }\n\n\tngOnInit(): void {\n\t\tthis.projectTreeItemData = this.getData();\n\t}\n\n\tonClick(): void {\n\t\tthis._filesInEditorService.open(this.filePath);\n\t}\n\n\tget filePath(): string {\n\t\treturn `${this.data.fileName}.${this.data.extension}`;\n\t}\n\n\tprivate getData(): IData {\n\t\tif (this.data.type !== 'angular') {\n\t\t\treturn {\n\t\t\t\tlabel: this.data.alias\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\tlabel: this.data.alias,\n\t\t\tactions: [\n\t\t\t\t{\n\t\t\t\t\ticon: 'css',\n\t\t\t\t\tcallack: () => {\n\t\t\t\t\t\tconst filePath = `${this.data.fileName}.scss`;\n\t\t\t\t\t\tthis._filesInEditorService.open(filePath);\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\ticon: 'html',\n\t\t\t\t\tcallack: () => {\n\t\t\t\t\t\tconst filePath = `${this.data.fileName}.html`;\n\t\t\t\t\t\tthis._filesInEditorService.open(filePath);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t]\n\t\t};\n\t}\n}\n","<!-- TODO appeler le composant angular component,\n\tservice, interface, ... -->\n\n<div\n\twp-context-menu-2\n\t[filePath]=\"filePath\"\n\t(click)=\"onClick()\"\n>\n\t<wp-project-tree-item\n\t\t[data]=\"projectTreeItemData\"\n\t></wp-project-tree-item>\n\n\t<!-- <wp-angular-tree-item\n\t\t*ngIf=\"data.type === 'angular'\"\n\t\t[data]=\"data\"\n\t></wp-angular-tree-item> -->\n</div>\n","import { CommonModule } from '@angular/common';\nimport {\n\tComponent,\n\tInput\n} from '@angular/core';\nimport { FlexLayoutModule } from '@angular/flex-layout';\nimport ClickableIconComponent from './clickable-icon.component';\nimport IData from './project-tree-item-data';\n\n@Component({\n\tselector: 'wp-project-tree-item',\n\tstandalone: true,\n\timports: [\n\t\tFlexLayoutModule,\n\t\tCommonModule,\n\t\tClickableIconComponent\n\t],\n\ttemplateUrl: './project-tree-item.component.html',\n\tstyleUrls: ['./project-tree-item.component.scss']\n})\nexport default class ProjectTreeItemComponent {\n\t@Input() data!: IData;\n\n\tonClick(\n\t\taction: any,\n\t\tevent: any\n\t): void { // TODO IAction\n\t\taction.callack();\n\t\tevent.stopPropagation();\n\t}\n}\n","<div\n\tfxLayout=\"row\"\n\tfxLayoutAlign=\"space-between center\"\n>\n\t<div>\n\t\t{{ data.label }}\n\t</div>\n\n\t<!-- <div>hey</div> -->\n\t<div\n\t\t*ngIf=\"data.actions !== undefined\"\n\t\tfxLayout=\"row\"\n\t>\n\t\t<wp-clickable-icon\n\t\t\t*ngFor=\"let action of data.actions\"\n\t\t\t[icon]=\"action.icon\"\n\t\t\t(click)=\"onClick(action, $event)\"\n\t\t></wp-clickable-icon>\n\t</div>\n</div>\n","import { Component } from '@angular/core';\n\nimport ITreeDataProviderService from './i-tree-data-provider-service';\nimport ProjectTreeDataProviderService from './project-tree-data-provider.service';\nimport ProjectTreeItemComponent2 from './project-tree-item.component-2';\nimport TreeComponent from './tree.component';\n\n@Component({\n\tselector: 'wp-project-tree',\n\tstandalone: true,\n\timports: [\n\t\tTreeComponent,\n\t\tProjectTreeItemComponent2\n\t],\n\ttemplateUrl: './project-tree.component.html',\n\tstyleUrls: ['./project-tree.component.scss'],\n\tproviders: [\n\t\t{\n\t\t\tprovide: ITreeDataProviderService,\n\t\t\tuseClass: ProjectTreeDataProviderService\n\t\t}\n\t]\n})\nexport default class ProjectTreeComponent { }\n","<wp-tree\n\t[itemTemplateRef]=\"itemTemplate\">\n</wp-tree>\n\n<ng-template\n\t#itemTemplate\n\tlet-itemData=\"data\"\n>\n\t<wp-project-tree-item-2\n\t\t[data]=\"itemData\"\n\t></wp-project-tree-item-2>\n</ng-template>\n","import { Injectable } from '@angular/core';\n\nimport IShowInputBox from './i-show-input-box';\nimport ShowOverlayService from './show-overlay.service';\nimport VscodeInputBoxValueService from './vscode-input-box-value.service';\nimport VscodeInputBoxComponent from './vscode-input-box.component';\nimport VscodeWorkspaceViewContainerRefService from './vscode-workspace-view-container-ref.service';\n\n@Injectable({ providedIn: 'root' })\nexport default class ShowInputBoxService {\n\tconstructor(\n\t\tprivate readonly _showOverlayService: ShowOverlayService,\n\t\tprivate readonly _vscodeWorkspaceViewContainerRefService: VscodeWorkspaceViewContainerRefService,\n\t\tprivate readonly _vscodeInputBoxValueService: VscodeInputBoxValueService\n\t) { }\n\n\tasync showInputBox(value: IShowInputBox): Promise<string | undefined> {\n\t\tconst container = this._vscodeWorkspaceViewContainerRefService.container;\n\t\tif (container === undefined) {\n\t\t\tthrow new Error('VscodeWorkspaceViewContainerRefService.container is undefined');\n\t\t}\n\t\tconst componentRef = this._showOverlayService.showOverlay4(\n\t\t\tcontainer,\n\t\t\tVscodeInputBoxComponent,\n\t\t\t{\n\t\t\t\tx: 'center',\n\t\t\t\ty: 0\n\t\t\t},\n\t\t\t{ description: value }\n\t\t);\n\t\treturn new Promise(resolve => {\n\t\t\tthis._vscodeInputBoxValueService.value$.subscribe(e => {\n\t\t\t\tcomponentRef.destroy();\n\t\t\t\tresolve(e);\n\t\t\t});\n\t\t});\n\t}\n}\n","import { ComponentType } from '@angular/cdk/portal';\nimport {\n\tComponentRef,\n\tInjectable,\n\tInjector,\n\tViewContainerRef\n} from '@angular/core';\n\n// import CreateComponentInContainerService from './create-component-in-container.service';\n// import CreateComponentInBodyService from './create-component-in-body.service';\nimport IOverlayRef from './i-overlay-ref-2';\nimport IPositionInOverlay, { Axis } from './i-position-in-overlay';\nimport OverlayContainerComponent from './overlay-container.component';\n\n@Injectable({ providedIn: 'root' })\nexport default class ShowOverlayService {\n\ttoto = 1;\n\tcontainer?: ViewContainerRef;\n\n\tconstructor(\n\t\t// private readonly _createComponentInBodyService: CreateComponentInBodyService\n\t) { }\n\n\tasync showOverlay<T>(\n\t\tcontainer: ViewContainerRef,\n\t\tcomponentClass: ComponentType<T>,\n\t\tposition: IPositionInOverlay\n\t): Promise<IOverlayRef<T>> {\n\t\tconst containerRef = container.createComponent(OverlayContainerComponent);\n\t\t// const overlayRef = this._createComponentInBodyService.appendComponentToBody(OverlayContainerComponent);\n\t\t// const containerRef = overlayRef.componentRef;\n\t\t// const injector = Injector.create([\n\t\t// \t{\n\t\t// \t\tprovide: ContextMenuRef,\n\t\t// \t\tuseValue: {\n\t\t// \t\t\tclose: () => {\n\t\t// \t\t\t\tthis.close();\n\t\t// \t\t\t}\n\t\t// \t\t}\n\t\t// \t}\n\t\t// ]);\n\t\tconst overlayContainerComponent = containerRef.instance;\n\t\toverlayContainerComponent.position = position;\n\t\tconst componentRef = await overlayContainerComponent.setOverlayContentComponent(\n\t\t\tcomponentClass,\n\t\t\t// { filePath: this.filePath },\n\t\t\t// injector\n\t\t);\n\t\treturn {\n\t\t\tcomponentRef,\n\t\t\tdestroy: () => {\n\t\t\t\tcontainerRef.destroy()\n\t\t\t}\n\t\t};\n\t}\n\n\tshowOverlay2<T>(\n\t\tcomponentClass: ComponentType<T>,\n\t\tposition: IPositionInOverlay,\n\t\tinputs?: Partial<T>,\n\t\tinjector?: Injector\n\t): ComponentRef<OverlayContainerComponent> {\n\t\t/**\n\t\t * TODO\n\t\t */\n\t\tif (this.container === undefined) {\n\t\t\tthrow new Error(); // TODO\n\t\t}\n\t\treturn this.showOverlay3(\n\t\t\tthis.container,\n\t\t\tcomponentClass,\n\t\t\tposition,\n\t\t\tinputs,\n\t\t\tinjector\n\t\t);\n\t}\n\n\tshowOverlay3<T>(\n\t\tcontainer: ViewContainerRef,\n\t\tcomponentClass: ComponentType<T>,\n\t\twindowPosition: IPositionInOverlay,\n\t\tinputs?: Partial<T>,\n\t\tinjector?: Injector\n\t): ComponentRef<OverlayContainerComponent> {\n\t\tconst position = convertPosition(\n\t\t\twindowPosition,\n\t\t\tcontainer.element.nativeElement as HTMLElement\n\t\t);\n\t\tconst containerRef = container.createComponent(OverlayContainerComponent);\n\t\tconst overlayContainerComponent = containerRef.instance;\n\t\toverlayContainerComponent.position = position;\n\t\toverlayContainerComponent.setOverlayContentComponent(\n\t\t\tcomponentClass,\n\t\t\tinputs,\n\t\t\tinjector\n\t\t);\n\t\treturn containerRef;\n\t}\n\n\tshowOverlay4<T>(\n\t\tcontainer: ViewContainerRef,\n\t\tcomponentClass: ComponentType<T>,\n\t\twindowPosition: IPositionInOverlay,\n\t\tinputs?: Partial<T>,\n\t\tinjector?: Injector\n\t): ComponentRef<OverlayContainerComponent> {\n\t\tconst containerRef = container.createComponent(OverlayContainerComponent);\n\t\tconst overlayContainerComponent = containerRef.instance;\n\t\toverlayContainerComponent.position = windowPosition;\n\t\toverlayContainerComponent.setOverlayContentComponent(\n\t\t\tcomponentClass,\n\t\t\tinputs,\n\t\t\tinjector\n\t\t);\n\t\treturn containerRef;\n\t}\n\n\t// private get container(): ViewContainerRef {\n\t// \t/**\n\t// \t * TODO-101\n\t// \t * A récupérer depuis un service\n\t// \t */\n\t// \tthrow new Error('container');\n\t// }\n}\n\nfunction convertPosition(\n\twindowPosition: IPositionInOverlay,\n\trelativeHtmlElement: HTMLElement\n): IPositionInOverlay {\n\tconst rect = relativeHtmlElement.getBoundingClientRect();\n\treturn {\n\t\tx: convertAxisValue(\n\t\t\twindowPosition.x,\n\t\t\trect.x\n\t\t),\n\t\ty: convertAxisValue(\n\t\t\twindowPosition.y,\n\t\t\trect.y\n\t\t)\n\t};\n}\n\nfunction convertAxisValue(\n\taxis: Axis,\n\trelativeValue: number\n): Axis {\n\tif (typeof axis !== 'number') {\n\t\treturn axis;\n\t}\n\treturn axis - relativeValue;\n}\n","import {\n\tComponent,\n\tEventEmitter,\n\tInput,\n\tOutput\n} from '@angular/core';\nimport { FlexLayoutModule } from '@angular/flex-layout';\nimport { FontAwesomeModule } from '@fortawesome/angular-fontawesome';\nimport * as icons from '@fortawesome/free-solid-svg-icons';\n\nimport ClickableElementComponent from './clickable-element.component';\n\n@Component({\n\tselector: 'wp-tab-title',\n\tstandalone: true,\n\timports: [\n\t\tFlexLayoutModule,\n\t\tFontAwesomeModule,\n\t\tClickableElementComponent\n\t],\n\ttemplateUrl: './tab-title.component.html',\n\tstyleUrls: ['./tab-title.component.scss']\n})\nexport default class TabTitleComponent {\n\t@Input() title!: string;\n\t@Input() selected: boolean | undefined = false;\n\n\t@Output() close = new EventEmitter<void>();\n\n\tcloseIcon = icons.faClose;\n\n\tonClose(): void {\n\t\tthis.close.next();\n\t}\n}\n","<div\n\tfxLayout=\"row\"\n\tfxLayoutAlign=\"center center\"\n\tfxLayoutGap=\"3px\"\n\t[class.selected]=\"selected\"\n>\n\t<div>\n\t\t{{ title }}\n\t</div>\n\n\t<wp-clickable-element\n\t\t(click)=\"onClose()\"\n\t>\n\t\t<fa-icon\n\t\t\t[icon]=\"closeIcon\"\n\t\t></fa-icon>\n\t</wp-clickable-element>\n</div>\n","import {\n\tComponent,\n\tContentChild,\n\tEventEmitter,\n\tInput,\n\tOutput,\n\tTemplateRef\n} from '@angular/core';\n\n@Component({\n\tselector: 'wp-tab',\n\tstandalone: true,\n\ttemplateUrl: './tab.component.html',\n\tstyleUrls: ['./tab.component.scss']\n})\nexport default class TabComponent {\n\t@Input() title!: string;\n\t@Input() selected: boolean | undefined = false;\n\n\t@Output() close = new EventEmitter<void>();\n\n\t@ContentChild(TemplateRef) templateRef!: TemplateRef<any>;\n}\n","import { CommonModule } from '@angular/common';\nimport { AfterContentInit, Component, ContentChildren, TemplateRef } from '@angular/core';\nimport { FlexLayoutModule } from '@angular/flex-layout';\n\nimport TabComponent from './tab.component';\nimport TabTitleComponent from './tab-title.component';\n\ninterface ITab {\n\ttitle: string;\n\tselected: boolean;\n}\n\n@Component({\n\tselector: 'wp-tabs',\n\tstandalone: true,\n\timports: [\n\t\tFlexLayoutModule,\n\t\tTabTitleComponent,\n\t\tTabComponent,\n\t\tCommonModule\n\t],\n\ttemplateUrl: './tabs.component.html',\n\tstyleUrls: ['./tabs.component.scss']\n})\nexport default class TabsComponent implements AfterContentInit {\n\tpublic isInit = false;\n\n\t@ContentChildren(TabComponent) tabComponents: TabComponent[] = [];\n\n\tngAfterContentInit(): void {\n\t\t/**\n\t\t * We wait tab components inside have their templateRef\n\t\t * ready.\n\t\t */\n\t\tsetTimeout(() => {\n\t\t\tthis.isInit = true;\n\t\t});\n\t}\n\n\tget tabs(): TabComponent[] {\n\t\treturn Array.from(this.tabComponents);\n\t}\n\n\tget selectedTab(): TabComponent | undefined {\n\t\tconst res = this.tabComponents.find(e => e.selected);\n\t\treturn res;\n\t}\n\n\tonTabClick(tabComponent: TabComponent): void {\n\t\tthis.tabComponents.forEach(e => {\n\t\t\te.selected = false;\n\t\t});\n\t\ttabComponent.selected = true;\n\t\t/**\n\t\t * TODO propager l'évenement en dehors\n\t\t * du composant\n\t\t */\n\t}\n}\n","<ng-container *ngIf=\"isInit\">\n\t<div\n\t\tfxLayout=\"column\"\n\t>\n\t\t<div\n\t\t\tclass=\"header\"\n\t\t\tfxLayout=\"row\"\n\t\t>\n\t\t\t<wp-tab-title\n\t\t\t\t*ngFor=\"let tab of tabs\"\n\t\t\t\t[title]=\"tab.title\"\n\t\t\t\t[selected]=\"tab.selected\"\n\t\t\t\t(click)=\"onTabClick(tab)\"\n\t\t\t\t(close)=\"tab.close.next()\"\n\t\t\t></wp-tab-title>\n\t\t</div>\n\t\n\t\t<div\n\t\t\tfxFlex\n\t\t\tclass=\"content\"\n\t\t>\n\t\t\t<ng-container *ngIf=\"selectedTab !== undefined && selectedTab.templateRef !== undefined\">\n\t\t\t\t<ng-container *ngTemplateOutlet=\"selectedTab!.templateRef\"></ng-container>\n\t\t\t</ng-container>\n\t\t</div>\n\t</div>\n</ng-container>\n","export function camalize(text: string): string {\n\treturn text.toLowerCase().replace(\n\t\t/[^a-zA-Z0-9]+(.)/g,\n\t\t(m, chr) => chr.toUpperCase()\n\t);\n}\n","export default function toPascalCase(text: string): string {\n  return text.replace(/(^\\w|-\\w)/g, clearAndUpper);\n}\n\nfunction clearAndUpper(text: string): string {\n  return text.replace(/-/, \"\").toUpperCase();\n}\n","import * as ts from 'typescript';\n\nconst DEFAULT_OPTIONS: ts.TranspileOptions = {\n\tcompilerOptions: {\n\t\tmodule: ts.ModuleKind.CommonJS,\n\t\texperimentalDecorators: true,\n\t\temitDecoratorMetadata: true\n\t}\n};\n\nexport default function transpileTs(\n\tsource: string,\n\toptions?: ts.TranspileOptions\n): string {\n\t/**\n\t * Default options -- you could also perform a merge,\n\t * or use the project tsconfig.json\n\t */\n\tif (options === undefined) {\n\t\toptions = DEFAULT_OPTIONS;\n\t}\n\treturn ts.transpileModule(\n\t\tsource,\n\t\toptions\n\t).outputText;\n}\n","import { CommonModule } from '@angular/common';\nimport {\n\tComponent,\n\tContentChild,\n\tInput,\n\tOnInit,\n\tTemplateRef\n} from '@angular/core';\nimport { FlexLayoutModule } from '@angular/flex-layout';\nimport { FontAwesomeModule } from '@fortawesome/angular-fontawesome';\nimport * as icons from '@fortawesome/free-solid-svg-icons';\n\nimport ITreeDataProviderService from './i-tree-data-provider-service';\nimport ITreeNode from './i-tree-node';\n\n@Component({\n\tselector: 'wp-tree',\n\tstandalone: true,\n\timports: [\n\t\tCommonModule,\n\t\tFlexLayoutModule,\n\t\tFontAwesomeModule\n\t],\n\ttemplateUrl: './tree.component.html',\n\tstyleUrls: ['./tree.component.scss']\n})\nexport default class TreeComponent<T> implements OnInit {\n\t@Input() node?: T;\n\t@Input() indent = 0;\n\t@Input() itemTemplateRef!: TemplateRef<any>;\n\n\t// @ContentChild('itemTemplate') itemTemplateRef!: TemplateRef<any>;\n\n\tisContentDisplayed = false;\n\tfaArrowRight = icons.faAngleRight;\n\tfaArrowDown = icons.faAngleDown;\n\trootNode!: T;\n\tchildren?: T[];\n\n\tconstructor(\n\t\tprivate readonly _treeDataProviderService: ITreeDataProviderService<T>\n\t) { }\n\n\tngOnInit(): void {\n\t\tthis.fetchRootNode();\n\t\tthis._treeDataProviderService.change$.subscribe(() => {\n\t\t\tthis.onChange();\n\t\t});\n\t}\n\n\tprivate async onChange(): Promise<void> {\n\t\tthis.fetchRootNode();\n\t\tif (this.isContentDisplayed) {\n\t\t\tthis.children = await this._treeDataProviderService.getChildren(this.rootNode);\n\t\t}\n\t}\n\n\tasync toggleOpen(): Promise<void> {\n\t\tif (!this.isContentDisplayed) {\n\t\t\tthis.children = await this._treeDataProviderService.getChildren(this.rootNode);\n\t\t}\n\t\tthis.isContentDisplayed = !this.isContentDisplayed;\n\t}\n\n\tprivate async fetchRootNode(): Promise<void> {\n\t\tthis.rootNode = await this.getRootNode();\n\t}\n\n\tprivate async getRootNode(): Promise<T> {\n\t\tif (this.node !== undefined) {\n\t\t\treturn this.node;\n\t\t}\n\t\treturn this._treeDataProviderService.getRootNode();\n\t}\n}\n","<!-- <ng-template #>\n\t<ng-content></ng-content>\n</ng-template> -->\n\n<div\n\t*ngIf=\"rootNode !== undefined\"\n\t[style.padding-left]=\"3 + indent * 10 + 'px'\"\n\tclass=\"root\"\n\tfxLayout=\"row\"\n\tfxLayoutGap=\"10px\"\n>\n\t<div\n\t\tclass=\"icon-container\"\n\t\t(click)=\"toggleOpen()\"\n\t>\n\t\t<ng-container\n\t\t\t*ngIf=\"$any(rootNode).isCollapsed\"\n\t\t>\n\t\t\t<fa-icon\n\t\t\t\t*ngIf=\"!isContentDisplayed\"\n\t\t\t\t[icon]=\"faArrowRight\"\n\t\t\t></fa-icon>\n\n\t\t\t<fa-icon\n\t\t\t\t*ngIf=\"isContentDisplayed\"\n\t\t\t\t[icon]=\"faArrowDown\"\n\t\t\t></fa-icon>\n\t\t</ng-container>\n\t</div>\n\n\t<div\n\t\tfxFlex\n\t>\n\t\t<!-- {{rootNode}} -->\n\t\t<ng-container\n\t\t\t*ngTemplateOutlet=\"itemTemplateRef; context: {data: rootNode}\"\n\t\t></ng-container>\n\t</div>\n</div>\n\n<!-- <div\n\t*ngIf=\"isContentDisplayed\"\n\tclass=\"content\"\n> -->\n<ng-container\n\t*ngIf=\"isContentDisplayed\"\n>\n\t<wp-tree\n\t\t*ngFor=\"let node of children\"\n\t\t[node]=\"node\"\n\t\t[indent]=\"indent + 1\"\n\t\t[itemTemplateRef]=\"itemTemplateRef\"\n\t></wp-tree>\n</ng-container>\n<!-- </div> -->\n","export const TS_EXTENSION = '.ts';\n","import { Injectable } from '@angular/core';\nimport {\n\tObservable,\n\tSubject\n} from 'rxjs';\n\n@Injectable({ providedIn: 'root' })\nexport default class VscodeInputBoxValueService {\n\tvalue = '';\n\n\tprivate _value$ = new Subject<string | undefined>();\n\n\tcancel(): void {\n\t\tthis._value$.next(undefined);\n\t}\n\n\tvalidate(): void {\n\t\tthis._value$.next(this.value);\n\t}\n\n\tget value$(): Observable<string | undefined> {\n\t\treturn this._value$.asObservable();\n\t}\n}\n","import {\n\tAfterViewInit,\n\tComponent,\n\tElementRef,\n\tViewChild\n} from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport {\n\tObservable,\n\tSubject\n} from 'rxjs';\n\nimport IShowInputBox from './i-show-input-box';\nimport VscodeInputBoxValueService from './vscode-input-box-value.service';\n\n@Component({\n\tselector: 'wp-vscode-input-box',\n\tstandalone: true,\n\timports: [\n\t\tFormsModule\n\t],\n\ttemplateUrl: './vscode-input-box.component.html',\n\tstyleUrls: ['./vscode-input-box.component.scss']\n})\nexport default class VscodeInputBoxComponent implements AfterViewInit {\n\t@ViewChild('input') input!: ElementRef;\n\n\t// value = '';\n\tdescription!: IShowInputBox;\n\n\tconstructor(\n\t\tprivate readonly _vscodeInputBoxValueService: VscodeInputBoxValueService\n\t) { }\n\n\tngAfterViewInit(): void {\n\t\tthis.input.nativeElement.focus();\n\t}\n\n\tvalidate(): void {\n\t\tif (this.value === '') {\n\t\t\treturn;\n\t\t}\n\t\tthis._vscodeInputBoxValueService.validate();\n\t}\n\n\tescape(): void {\n\t\tthis._vscodeInputBoxValueService.cancel();\n\t}\n\n\tget value(): string {\n\t\treturn this._vscodeInputBoxValueService.value;\n\t}\n\n\tset value(value: string) {\n\t\tthis._vscodeInputBoxValueService.value = value;\n\t}\n}\n","<div>\n\t<input\n\t\t#input\n\t\ttype=\"text\"\n\t\t[(ngModel)]=\"value\"\n\t\t(keyup.enter)=\"validate()\"\n\t\t(keyup.escape)=\"escape()\"\n\t>\n\t<div>\n\t\t{{ description.prompt }} (Press 'Enter' to confirm of 'Escape' to cancel)\n\t</div>\n</div>\n","import {\n\tInjectable,\n\tViewContainerRef\n} from '@angular/core';\n\n@Injectable({ providedIn: 'root' })\nexport default class VscodeWorkspaceViewContainerRefService {\n\tcontainer?: ViewContainerRef;\n}\n","import {\n\tComponent,\n\tViewChild,\n\tViewContainerRef\n} from '@angular/core';\nimport { FlexLayoutModule } from '@angular/flex-layout';\n\nimport FilesTabsComponent from './files-tabs.component';\nimport ProjectTreeComponent from './project-tree.component';\nimport ShowOverlayService from './show-overlay.service';\nimport VscodeWorkspaceViewContainerRefService from './vscode-workspace-view-container-ref.service';\n\n@Component({\n\tselector: 'wp-vscode-workspace',\n\tstandalone: true,\n\timports: [\n\t\tProjectTreeComponent,\n\t\tFlexLayoutModule,\n\t\tFilesTabsComponent\n\t],\n\ttemplateUrl: './vscode-workspace.component.html',\n\tstyleUrls: ['./vscode-workspace.component.scss']\n})\nexport default class VscodeWorkspaceComponent {\n\t@ViewChild('container', { read: ViewContainerRef }) container!: ViewContainerRef;\n\t@ViewChild('hostContainer', {read: ViewContainerRef}) hostContainer!: ViewContainerRef; \n\n\tconstructor(\n\t\tprivate readonly _viewContainerRefService: VscodeWorkspaceViewContainerRefService,\n\t\tprivate readonly _showOverlayService: ShowOverlayService\n\t) { }\n\n\tngAfterViewInit(): void {\n\t\tthis._viewContainerRefService.container = this.container;\n\t\tthis._showOverlayService.container = this.hostContainer;\n\t}\n}\n","<div\n\tfxLayout=\"row\"\n\tfxLayoutAlign=\"start\"\n\t#hostContainer\n>\n\t<ng-container #container></ng-container>\n\t<!-- <div #container></div> -->\n\t<div\n\t\tclass=\"tree\"\n\t>\n\t\t<div class=\"sidebar-title\">explorer</div>\n\n\t\t<wp-project-tree></wp-project-tree>\n\t</div>\n\n\t<div\n\t\tfxFlex\n\t\tclass=\"content\"\n\t>\n\t\t<wp-files-tabs></wp-files-tabs>\n\t</div>\n</div>\n","import { Injectable } from '@angular/core';\n\nimport CreateFunctionInWorkspaceService from './create-function-in-workspace.service';\nimport CreateNgComponentInFileService from './create-ng-component-in-file.service';\nimport IWorkspaceCommand from './i-workspace-command';\n\n@Injectable({ providedIn: 'root' })\nexport default class WorkspaceCommandsService {\n\tcommands: {\n\t\t[commandId: string]: IWorkspaceCommand;\n\t} = {};\n\n\tconstructor(\n\t\tcreateFunctionService: CreateFunctionInWorkspaceService,\n\t\tcreateNgComponentService: CreateNgComponentInFileService\n\t) {\n\t\tthis.commands = {\n\t\t\tcreateFunction: {\n\t\t\t\tname: 'Create function',\n\t\t\t\thandler: (data: any) => {\n\t\t\t\t\tcreateFunctionService.createFunction(data);\n\t\t\t\t}\n\t\t\t},\n\t\t\tcreateNgComponent: {\n\t\t\t\tname: 'Create ng component',\n\t\t\t\thandler: (data: any) => {\n\t\t\t\t\tcreateNgComponentService.createNgComponentInFile(data);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t}\n\n\trunCommand(\n\t\tcommandId: string,\n\t\targ?: any\n\t): void {\n\t\tconst command = this.commands[commandId];\n\t\tif (command === undefined) {\n\t\t\treturn;\n\t\t}\n\t\tcommand.handler(arg);\n\t}\n}\n","import { Component } from '@angular/core';\n\nimport { ANGULAR_CORE_FILE } from './angular-core-file';\nimport ANGULAR_PLATFORM_BROWSER_FILE from './angular-platform-browser-file';\nimport CompileComponentComponent from './compile-component.component';\nimport deepClone from './deep-clone';\nimport FilesInEditorService from './files-in-editor.service';\nimport IFileInEditor from './i-file-in-editor';\nimport INgProjectFilesService from './i-ng-project-files-service';\nimport ProjectFilesService from './project-files.service';\nimport VscodeWorkspaceComponent from './vscode-workspace.component';\n\n@Component({\n\tselector: 'wp-workspace-with-renderer-debug',\n\tstandalone: true,\n\ttemplateUrl: './workspace-with-renderer-debug.component.html',\n\tstyleUrls: ['./workspace-with-renderer-debug.component.scss'],\n\timports: [\n\t\tVscodeWorkspaceComponent,\n\t\tCompileComponentComponent\n\t],\n\tproviders: [\n\t\t{\n\t\t\tprovide: INgProjectFilesService,\n\t\t\tuseExisting: ProjectFilesService\n\t\t}\n\t]\n})\nexport default class WorkspaceWithRendererDebugComponent {\n\tngComponentFileName = 'toto.component.ts';\n\n\tconstructor(\n\t\tprojectFilesService: ProjectFilesService,\n\t\tfilesInEditorService: FilesInEditorService\n\t) {\n\t\t// projectFilesService.filePathList = deepClone(FILE_LIST);\n\t\tprojectFilesService.nodeModules = [\n\t\t\t{\n\t\t\t\tpath: 'node_modules/@angular/core/index.d.ts',\n\t\t\t\tcontent: ANGULAR_CORE_FILE\n\t\t\t},\n\t\t\t{\n\t\t\t\tpath: 'node_modules/@angular/platform-browser/index.d.ts',\n\t\t\t\tcontent: ANGULAR_PLATFORM_BROWSER_FILE\n\t\t\t}\n\t\t]\n\t\tfilesInEditorService.files = deepClone(FILES_IN_EDITOR);\n\t}\n}\n\n// const FILE_LIST: IFile[] = [\n// \t/**\n// \t * TODO\n// \t * TataComponent est considéré comme un import du\n// \t * fichier courant.\n// \t */\n// \t{\n// \t\tpath: 'toto.component.ts',\n// \t\tcontent: `import { Component } from '@angular/core';\n\n// import TataComponent from './tata.component';\n\n// @Component({\n// \tselector: 'toto',\n// \tstandalone: true,\n// \ttemplateUrl: './toto.component.html',\n// \tstyleUrls: ['./toto.component.scss'],\n// \timports: [\n// \t\tTataComponent\n// \t]\n// })\n// export default class TotoComponent {\n\n// }\n// `\n// \t},\n// \t{\n// \t\tpath: 'toto.component.html',\n// \t\tcontent: '<p>I am toto component !!</p> <tata></tata>'\n// \t},\n// \t{\n// \t\tpath: 'toto.component.scss',\n// \t\tcontent: 'p {color: orange;}'\n// \t},\n// \t{\n// \t\tpath: 'tata.component.ts',\n// \t\tcontent: `import { Component } from '@angular/core';\n\n// @Component({\n// \tselector: 'tata',\n// \tstandalone: true,\n// \ttemplateUrl: './tata.component.html',\n// \tstyleUrls: ['./tata.component.scss']\n// })\n// export default class TataComponent {\n\n// }`\n// \t},\n// \t{\n// \t\tpath: 'tata.component.html',\n// \t\tcontent: '<p>I am tata component !!</p>'\n// \t},\n// \t{\n// \t\tpath: 'tata.component.scss',\n// \t\tcontent: 'p {color: blue;}'\n// \t}\n// ];\n\nconst FILES_IN_EDITOR: IFileInEditor[] = [\n\t{\n\t\tfilePath: 'toto.component.ts',\n\t\tselected: true\n\t}\n];\n","<div>\n\t<div\n\t\tclass=\"editor\"\n\t>\n\t\t<wp-vscode-workspace></wp-vscode-workspace>\n\t</div>\n\n\t<div\n\t\tclass=\"renderer\"\n\t>\n\t\t<wp-compile-component\n\t\t\t[ngComponentFileName]=\"ngComponentFileName\"\n\t\t></wp-compile-component>\n\t</div>\n</div>\n","function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = () => ([]);\nwebpackEmptyContext.resolve = webpackEmptyContext;\nwebpackEmptyContext.id = 6640;\nmodule.exports = webpackEmptyContext;","/* (ignored) */","/* (ignored) */","/* (ignored) */","/* (ignored) */","/* (ignored) */","/* (ignored) */","/* (ignored) */"],"names":["ANGULAR_CORE_FILE","addNewImport","convertToKebabCase","getAvailableName","getTypescriptFileName","ProjectFilesService","ShowInputBoxService","camalize","CreateFunctionInWorkspaceService","constructor","_projectFilesService","_showInputBoxService","createFunction","data","interfaceNameFromUser","showInputBox","placeHolder","prompt","undefined","kebabName","availableNameKebab","filePathList","map","e","path","newFilePath","functionName","updt_create","content","importerFilePath","filePath","importerFileContent","getFile","newFileContent","alias","name","updt_modifyContent","i0","factory","providedIn","CreateNgComponentInWorkspaceService","importInFile","CreateNgComponentInFileService","_createNgComponentInWorkspaceService","createNgComponentInFile","importerFile","find","a","createNgComponentInWorkspace","componentClassName","fileName","toPascalCase","PLACE_HOLDER","PROMPT","COMPONENT_FILE_SUFFIX","COMPONENT_CLASS_NAME_SUFFIX","PREFIX","nameFromUser","htmlFileName","styleFileName","getComponentClassName","fileContent","getNgComponentFileContent","componentFilePath","getHtmlFileContent","componentName","TS_EXTENSION","FIRST_COUNT","fileNames","allExistingNames","getTypescriptNames","indexOf","getAvailableNameWithSuffix","counter","split","nameWithCounter","typescriptFiles","endsWith","slice","length","filter","getImports","isAngularComponent","getDepsOfTypescriptFile","file","readFile","extension","imports","getImportsOfFile","Promise","all","convertTypescriptDep","err","res","imp","some","push","isCollapsed","isAngular","type","ChangeDetectorRef","ComponentRef","ElementRef","Injector","TemplateRef","ViewContainerRef","firstValueFrom","Subject","OverlayContainerComponent","_cd","ngAfterViewInit","_isViewInit","_template","createEmbeddedView","_context","_componentClass","componentRef","createComponent","_inputs","_injector","_componentRef$","next","detectChanges","setOverlayContentTemplate","value","context","setOverlayContentComponent","componentClass","inputs","injector","x","getAxis","position","y","transform","inputName","Object","keys","instance","selectors","viewQuery","ctx","axis","Observable","ProjectTreeDataProviderService","getRootNode","getFileName","getChildren","node","change$","pop","join","ShowOverlayService","VscodeInputBoxValueService","VscodeInputBoxComponent","VscodeWorkspaceViewContainerRefService","_showOverlayService","_vscodeWorkspaceViewContainerRefService","_vscodeInputBoxValueService","container","Error","showOverlay4","description","resolve","value$","subscribe","destroy","showOverlay","containerRef","overlayContainerComponent","showOverlay2","showOverlay3","windowPosition","convertPosition","element","nativeElement","relativeHtmlElement","rect","getBoundingClientRect","convertAxisValue","relativeValue","CommonModule","FlexLayoutModule","FontAwesomeModule","icons","ITreeDataProviderService","ctx_r8","TreeComponent","_treeDataProviderService","faAngleRight","faAngleDown","ngOnInit","fetchRootNode","onChange","isContentDisplayed","children","rootNode","toggleOpen","indent","itemTemplateRef","standalone","features","decls","vars","consts","template","i1","i2","i3","styles"],"sourceRoot":"webpack:///","x_google_ignoreList":[71,72,73,74,75,76,77,78]}